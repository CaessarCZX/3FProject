{
  "address": "0x81E709243A25C7c1F2295025eeA543D6Ffc1DCf1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommissionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "config",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DepositContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MembershipPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewBusinessOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewSaving",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransferBusiness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMember",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "checkActiveMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_thirtLevelUpline",
          "type": "address"
        }
      ],
      "name": "depositMemberFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBusinessWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositMultiple",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxContractBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currentMember",
          "type": "address"
        }
      ],
      "name": "getMemberBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinAmountToDeposit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currentMember",
          "type": "address"
        }
      ],
      "name": "getTotalAffiliatesPerMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_decreaseAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateMemberFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uplineAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_thirtLevelUpline",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "memberEntrance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "paymentCommissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_newBusinessWallet",
          "type": "address"
        }
      ],
      "name": "setBusinessWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tier1",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_tier2",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_tier3",
          "type": "uint8"
        }
      ],
      "name": "setCommissionRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMultiple",
          "type": "uint128"
        }
      ],
      "name": "setDepositMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMaxBalance",
          "type": "uint128"
        }
      ],
      "name": "setMaxContractBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_toBusiness",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_toUpline",
          "type": "uint128"
        }
      ],
      "name": "setMembershipPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMinAmount",
          "type": "uint128"
        }
      ],
      "name": "setMinAmountToDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xad96cbba57d14a23159a71bc1201644688dbff5c0c8e1f1cd6562ef8cc806e24",
  "receipt": {
    "to": null,
    "from": "0xcC9Ab49082e75Fff477F5D0413998252506d8906",
    "contractAddress": "0x81E709243A25C7c1F2295025eeA543D6Ffc1DCf1",
    "transactionIndex": 90,
    "gasUsed": "4124526",
    "logsBloom": "0x
    "blockHash": "0x5597a9212ca96ae640d3b478545c2bacbf27090908c6c64edb1fd50dd4e0085c",
    "transactionHash": "0xad96cbba57d14a23159a71bc1201644688dbff5c0c8e1f1cd6562ef8cc806e24",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 7394387,
        "transactionHash": "0xad96cbba57d14a23159a71bc1201644688dbff5c0c8e1f1cd6562ef8cc806e24",
        "address": "0x81E709243A25C7c1F2295025eeA543D6Ffc1DCf1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc9ab49082e75fff477f5d0413998252506d8906"
        ],
        "data": "0x",
        "logIndex": 1182,
        "blockHash": "0x5597a9212ca96ae640d3b478545c2bacbf27090908c6c64edb1fd50dd4e0085c"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 7394387,
        "transactionHash": "0xad96cbba57d14a23159a71bc1201644688dbff5c0c8e1f1cd6562ef8cc806e24",
        "address": "0x81E709243A25C7c1F2295025eeA543D6Ffc1DCf1",
        "topics": [
          "0x7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c283",
          "0x000000000000000000000000cc9ab49082e75fff477f5d0413998252506d8906"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000067744194",
        "logIndex": 1183,
        "blockHash": "0x5597a9212ca96ae640d3b478545c2bacbf27090908c6c64edb1fd50dd4e0085c"
      }
    ],
    "blockNumber": 7394387,
    "cumulativeGasUsed": "34856674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B846D9d563D434d275e2d3a532c30B0574DcA2e"
  ],
  "numDeployments": 7,
  "solcInputHash": "c424a05d95d36ca742aef0ea1c911bec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"config\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MembershipPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewBusinessOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewSaving\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferBusiness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMember\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"checkActiveMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirtLevelUpline\",\"type\":\"address\"}],\"name\":\"depositMemberFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusinessWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositMultiple\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxContractBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentMember\",\"type\":\"address\"}],\"name\":\"getMemberBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinAmountToDeposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentMember\",\"type\":\"address\"}],\"name\":\"getTotalAffiliatesPerMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateMemberFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uplineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirtLevelUpline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"memberEntrance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"paymentCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBusinessWallet\",\"type\":\"address\"}],\"name\":\"setBusinessWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_tier2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_tier3\",\"type\":\"uint8\"}],\"name\":\"setCommissionRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMultiple\",\"type\":\"uint128\"}],\"name\":\"setDepositMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMaxBalance\",\"type\":\"uint128\"}],\"name\":\"setMaxContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_toBusiness\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_toUpline\",\"type\":\"uint128\"}],\"name\":\"setMembershipPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMinAmount\",\"type\":\"uint128\"}],\"name\":\"setMinAmountToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FFFBusiness.sol\":\"FFFBusiness\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/FFFBusiness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract FFFBusiness is Ownable, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// USDT\\n\\tIERC20 public token;\\n\\n\\t// For Bussiness\\n\\taddress payable private _businessWallet;\\n    uint128 private _totalMembers;\\n    uint256 private _totalBalance;\\n\\n\\t//Limits\\n\\tuint128 private _MIN_AMOUNT_TO_DEPOSIT;\\n\\tuint128 private _MAX_CONTRACT_BALANCE;\\n\\tuint128 private _DEPOSIT_MULTIPLE;\\n    uint128 private _MEMBERSHIP_PAYMENT_TO_BUSINESS;\\n    uint128 private _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n    uint8 private _COMMISSION_PER_TIER_ONE;\\n    uint8 private _COMMISSION_PER_TIER_TWO;\\n    uint8 private _COMMISSION_PER_TIER_THREE;\\n\\n\\t// Represents every client wallet\\n\\tstruct Member {\\n\\t\\taddress payable memberWallet;\\n\\t\\tbool isActive; \\n\\t\\tuint balance; // Total savings per client\\n\\t}\\n\\n\\tmapping(address => Member) private members;\\n\\tmapping(address => address[]) private enrolled; // Warning! for verification only\\n\\n    // Main Events\\n    event NewBusinessOwner(\\n        string message,\\n        address indexed oldOwner,\\n        address indexed newOwner,\\n        uint timestamp\\n    );\\n    event ConfigUpdated(\\n        string config,\\n        uint newValue,\\n        uint timestamp\\n    );\\n\\tevent DepositContract(\\n        address indexed from,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent TransferBusiness(\\n\\t\\taddress indexed from,\\n\\t\\tuint amount,\\n\\t\\tuint timestamp\\n\\t);\\n\\tevent WithdrawalContract(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n    event WithdrawalMember(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent CommissionPaid(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n    event MembershipPaid(\\n        address indexed from,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent NewMember(\\n        address indexed member,\\n        uint timestamp\\n    );\\n    event NewSaving(\\n        address indexed member,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\n\\t// Initiallize USDT address && only DEPLOYER wallet is the OWNER!!!\\n\\tconstructor(address _tokenAddress) {\\n\\t\\trequire(_tokenAddress != address(0), \\\"Token address cannot be zero\\\");\\n\\n        // Ruleset for bussiness logic\\n        _MIN_AMOUNT_TO_DEPOSIT = 2000 * 10 ** 6; // 2000 USDT\\n        _MAX_CONTRACT_BALANCE = 10000000 * 10 ** 6; // 10M USDT\\n        _DEPOSIT_MULTIPLE = 500 * 10 ** 6; // M\\u00faltiple 500 USDT\\n        _MEMBERSHIP_PAYMENT_TO_BUSINESS = 400 * 10 ** 6; //400 USDT\\n        _MEMBERSHIP_PAYMENT_TO_UPLINE = 100 * 10 ** 6; //100 USDT\\n        _COMMISSION_PER_TIER_ONE = 4;\\n        _COMMISSION_PER_TIER_TWO = 2;\\n        _COMMISSION_PER_TIER_THREE = 2;\\n\\n        // Principal wallet\\n\\t\\t_businessWallet = payable(msg.sender);\\n\\n        // Token\\n\\t\\ttoken = IERC20(_tokenAddress);\\n\\n        // Balance for total members\\n        _totalBalance = 0;\\n\\n        // Principal wallet is the first member\\n        _createMember(_businessWallet);\\n\\t}\\n\\n    // Modofiers\\n\\tmodifier onlyActiveMember() {\\n\\t\\trequire(members[msg.sender].isActive, \\\"Miembro no activo\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkValidAddress(address _recipient) {\\n\\t\\trequire(_recipient != address(0), \\\"Direccion invalida\\\");\\n\\t\\t_;\\n\\t}\\n\\n    // Checkers\\n    function checkActiveMember(address _member) public view returns(bool) {\\n        return members[_member].isActive;\\n    }\\n\\n    // Getters for bussiness logic vars\\n    function getTotalBalance() private view returns (uint) {\\n        return _totalBalance;\\n    }\\n\\n    function getBusinessWallet() public view returns (address) {\\n        return _businessWallet;\\n    }\\n\\n    function getTotalMembers() public view returns (uint) {\\n        return _totalMembers;\\n    }\\n\\n\\tfunction getMemberBalance(address _currentMember) public view returns(uint) {\\n        return members[_currentMember].balance;\\n    }\\n\\n    function getTotalAffiliatesPerMember(address _currentMember) public view returns(uint) {\\n        return enrolled[_currentMember].length;\\n    }\\n\\n    function getMinAmountToDeposit() public view returns (uint128) {\\n        return _MIN_AMOUNT_TO_DEPOSIT;\\n    }\\n\\n    function getMaxContractBalance() public view returns (uint128) {\\n        return _MAX_CONTRACT_BALANCE;\\n    }\\n\\n    function getDepositMultiple() public view returns (uint128) {\\n        return _DEPOSIT_MULTIPLE;\\n    }\\n\\n    function getCurrentContractBalance() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n        // Setters\\n    function setMinAmountToDeposit(uint128 _newMinAmount) external onlyOwner {\\n        require(_newMinAmount > 0, \\\"Minimum amount must be greater than 0\\\");\\n        require(_newMinAmount < _MAX_CONTRACT_BALANCE, \\\"Min cannot exceed max\\\");\\n        _MIN_AMOUNT_TO_DEPOSIT = _newMinAmount;\\n        emit ConfigUpdated(\\\"MIN_AMOUNT_TO_DEPOSIT\\\", _newMinAmount, block.timestamp);\\n    }\\n\\n    function setMaxContractBalance(uint128 _newMaxBalance) external onlyOwner {\\n        require(_newMaxBalance > _MIN_AMOUNT_TO_DEPOSIT, \\\"Max must exceed min\\\");\\n        _MAX_CONTRACT_BALANCE = _newMaxBalance;\\n        emit ConfigUpdated(\\\"MAX_CONTRACT_BALANCE\\\", _newMaxBalance, block.timestamp);\\n    }\\n\\n    function setDepositMultiple(uint128 _newMultiple) external onlyOwner {\\n        require(_newMultiple > 0, \\\"Multiple must be greater than 0\\\");\\n        _DEPOSIT_MULTIPLE = _newMultiple;\\n        emit ConfigUpdated(\\\"DEPOSIT_MULTIPLE\\\", _newMultiple, block.timestamp);\\n    }\\n\\n    function setMembershipPayments(uint128 _toBusiness, uint128 _toUpline) external onlyOwner {\\n        require(_toBusiness > 0 && _toUpline > 0, \\\"Membership payments must be positive\\\");\\n        _MEMBERSHIP_PAYMENT_TO_BUSINESS = _toBusiness;\\n        _MEMBERSHIP_PAYMENT_TO_UPLINE = _toUpline;\\n        emit ConfigUpdated(\\\"MEMBERSHIP_PAYMENTS\\\", _toBusiness + _toUpline, block.timestamp);\\n    }\\n\\n    function setCommissionRates(uint8 _tier1, uint8 _tier2, uint8 _tier3) external onlyOwner {\\n        require(_tier1 + _tier2 + _tier3 <= 100, \\\"Total commission cannot exceed 100%\\\");\\n        _COMMISSION_PER_TIER_ONE = _tier1;\\n        _COMMISSION_PER_TIER_TWO = _tier2;\\n        _COMMISSION_PER_TIER_THREE = _tier3;\\n        emit ConfigUpdated(\\\"COMMISSION_RATES\\\", _tier1 + _tier2 + _tier3, block.timestamp);\\n    }\\n\\n    function setBusinessWallet(address payable _newBusinessWallet) external onlyOwner {\\n        require(_newBusinessWallet != address(0), \\\"Invalid address\\\");\\n        _businessWallet = _newBusinessWallet;\\n        emit NewBusinessOwner(\\\"BUSINESS_WALLET\\\", _businessWallet, _newBusinessWallet, block.timestamp);\\n    }\\n\\n\\n\\tfunction memberEntrance(\\n        address _uplineAddress,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline,\\n        uint _amount\\n    ) public {\\n        if (!members[msg.sender].isActive) {\\n            _createMember(payable(msg.sender));\\n        }\\n        if (_uplineAddress != address(0)) {\\n            enrolled[_uplineAddress].push(msg.sender);\\n        } else {\\n            enrolled[_businessWallet].push(msg.sender);\\n        }\\n\\n        _firstDeposit(_amount, _uplineAddress, _secondLevelUpline, _thirtLevelUpline);\\n    }\\n\\n\\tfunction deposit(uint256 _amount) external onlyOwner() {\\n        uint256 realBalance = getCurrentContractBalance() + _amount;\\n        require(realBalance <= _MAX_CONTRACT_BALANCE, \\\"El deposito no puede superar el limite del contrato\\\");\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 currentBalance = getCurrentContractBalance();\\n        _withdraw(msg.sender, currentBalance);\\n    }\\n\\n    function paymentCommissions (\\n        uint256 _paymentAmount,\\n        address _memberAddress\\n    ) external onlyOwner checkValidAddress(_memberAddress) {\\n        require(getCurrentContractBalance() >= _paymentAmount, \\\"Contrato no cuenta con suficientes fondos\\\");\\n        _processPayment(_memberAddress, _paymentAmount);\\n        emit CommissionPaid(_memberAddress, _paymentAmount, block.timestamp);\\n    }\\n\\n    // Provitional function for decrease memberfunds, in case to whitdraw in a future\\n    function liquidateMemberFunds(\\n        address _memberAddress,\\n        uint _decreaseAmount\\n    ) external onlyOwner {\\n        Member storage currentMember = members[_memberAddress];\\n        require(currentMember.isActive, \\\"Miembro no activo\\\");\\n        require(currentMember.balance >= _decreaseAmount, \\\"Monto invalido\\\");\\n\\n        currentMember.balance -= _decreaseAmount;\\n        _totalBalance -= _decreaseAmount;\\n        _withdraw(_memberAddress, _decreaseAmount);\\n        emit WithdrawalMember(_memberAddress, _decreaseAmount, block.timestamp);\\n    }\\n\\n    function depositMemberFunds(\\n        uint _amount,\\n        address _firstLevelUpline,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline\\n    ) public onlyActiveMember {\\n        require(_amount >= _MIN_AMOUNT_TO_DEPOSIT, \\\"Deposito no alcanza monto minimo\\\");\\n        require(_amount % _DEPOSIT_MULTIPLE == 0, \\\"Valor del deposito no es valido\\\");\\n        require(_totalBalance + _amount <= _MAX_CONTRACT_BALANCE, \\\"Deposito supera el monto soportado por el contrato\\\");\\n\\n        _deposit(msg.sender, _amount);\\n\\n        // Update total balance in contract\\n        _totalBalance += _amount;\\n\\n        members[msg.sender].balance += _amount;\\n        emit NewSaving(msg.sender, _amount, block.timestamp);\\n\\n        uint256 commissionFirstLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_ONE);\\n        uint256 commissionSecondLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_TWO);\\n        uint256 commissionThirtLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_THREE);\\n        uint256 totalCommissions = commissionFirstLevel + commissionSecondLevel + commissionThirtLevel;\\n\\n        uint256 finalDeposit = _amount - totalCommissions;\\n        require(finalDeposit > totalCommissions, \\\"Error en el calculo de comisiones\\\");\\n\\n        // Payment to uplines in case exists\\n        if (_firstLevelUpline != address(0)) {\\n            _processPayment(_firstLevelUpline, commissionFirstLevel);\\n            emit CommissionPaid(_firstLevelUpline, commissionFirstLevel, block.timestamp);\\n            commissionFirstLevel = 0;\\n        }\\n        if (_secondLevelUpline != address(0)) {\\n            _processPayment(_secondLevelUpline, commissionSecondLevel);\\n            emit CommissionPaid(_secondLevelUpline, commissionSecondLevel, block.timestamp);\\n            commissionSecondLevel = 0;\\n        }\\n        if (_thirtLevelUpline != address(0)) {\\n            _processPayment(_thirtLevelUpline, commissionThirtLevel);\\n            emit CommissionPaid(_thirtLevelUpline, commissionFirstLevel, block.timestamp);\\n            commissionThirtLevel = 0;\\n        }\\n\\n        // final calculation after to pay uplines\\n        finalDeposit += (commissionFirstLevel + commissionSecondLevel + commissionThirtLevel);\\n\\n        _processPayment(_businessWallet, finalDeposit);\\n\\n        // Update total balance in contract with total amount per deposit\\n        _totalBalance += _amount;\\n\\n        emit TransferBusiness(msg.sender, finalDeposit, block.timestamp);\\n\\n    }\\n\\n\\tfunction _processPayment(address _to, uint256 _amount) private {\\n        require(_amount > 0, \\\"La cantidad a transferir debe ser mayor a cero\\\");\\n        token.safeTransfer(_to, _amount);\\n    }\\n\\n    function _firstDeposit(\\n        uint256 _amount,\\n        address _uplineAddress,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline\\n    ) private onlyActiveMember {\\n        uint256 membership = _MEMBERSHIP_PAYMENT_TO_BUSINESS + _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n        uint256 firstDeposit = _amount - membership;\\n\\n        require(_amount >= _MIN_AMOUNT_TO_DEPOSIT + membership, \\\"Monto insuficiente\\\");\\n        _deposit(msg.sender, membership);\\n\\n        // Membership payment to bussiness\\n        _processPayment(_businessWallet, _MEMBERSHIP_PAYMENT_TO_BUSINESS);\\n        emit MembershipPaid(msg.sender, _MEMBERSHIP_PAYMENT_TO_BUSINESS, block.timestamp);\\n        // Membership payment to upline\\n        _processPayment(_uplineAddress, _MEMBERSHIP_PAYMENT_TO_UPLINE);\\n        emit CommissionPaid(_uplineAddress, _MEMBERSHIP_PAYMENT_TO_UPLINE, block.timestamp);\\n\\n        // For saving\\n        depositMemberFunds(firstDeposit, _uplineAddress, _secondLevelUpline, _thirtLevelUpline);\\n\\n        emit NewSaving(msg.sender, firstDeposit, block.timestamp);\\n    }\\n\\n    function _deposit(address _from, uint256 _amount) private {\\n        require(token.allowance(_from, address(this)) >= _amount, \\\"Insufficient allowance\\\");\\n        require(_amount <= token.balanceOf(_from), \\\"No cuentas con USDT en tu wallet\\\");\\n        require(_amount > 0, \\\"Deposito no puede ser vacio\\\");\\n        token.safeTransferFrom(_from, address(this), _amount);\\n        emit DepositContract(_from, _amount, block.timestamp);\\n    }\\n\\n    function _withdraw(address _to, uint256 _amount) private nonReentrant {\\n        require(getCurrentContractBalance() >= _amount, \\\"Contrato no cuenta con suficientes fondos\\\");\\n        _processPayment(_to, _amount);\\n        emit WithdrawalContract(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _calculateCommission(uint256 _amount, uint256 _refundPercent) private pure returns (uint) {\\n        return (_amount * _refundPercent) / 100;\\n    }\\n\\n\\tfunction _createMember(address payable _newMember) private checkValidAddress(_newMember) {\\n        members[_newMember] = Member({\\n            memberWallet: _newMember,\\n            isActive: true,\\n            balance: 0\\n        });\\n\\n        _totalMembers++;\\n        emit NewMember(_newMember, block.timestamp);\\n    }\\n    \\n\\treceive() external payable {\\n\\t\\trevert(\\\"Ether not accepted\\\");\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\trevert(\\\"Function not supported\\\");\\n\\t}\\n\\n\\n}\\n\",\"keccak256\":\"0x64ecc23e6ab8f0156aa442d291b301faee18e1ec87c1cc3fb74e984966fc3b6f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c80637f7efd1a116100d1578063b71308701161008a578063d194770511610064578063d194770514610552578063d59392de1461058f578063f2fde38b146105ba578063fc0c546a146105e3576101aa565b8063b7130870146104c1578063ca55753a146104ec578063cc2ec6ab14610529576101aa565b80637f7efd1a146103b15780638da5cb5b146103ee5780638f18030514610419578063aa331db514610444578063b315ea361461046f578063b6b55f2514610498576101aa565b80633f37da5f116101235780633f37da5f146102cb5780634b71810d146102f45780635afe70d71461031d5780636d79008114610346578063715018a61461037157806374ff373214610388576101aa565b80630b760cd9146101e5578063258cf9b81461020e5780632f3f199c1461023757806335b2455b14610260578063361f1ad3146102895780633ccfd60b146102b4576101aa565b366101aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a190612a9f565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dc90612b0b565b60405180910390fd5b3480156101f157600080fd5b5061020c60048036038101906102079190612b78565b61060e565b005b34801561021a57600080fd5b5061023560048036038101906102309190612ba5565b6106e0565b005b34801561024357600080fd5b5061025e60048036038101906102599190612b78565b610815565b005b34801561026c57600080fd5b5061028760048036038101906102829190612c79565b610916565b005b34801561029557600080fd5b5061029e610a37565b6040516102ab9190612cc8565b60405180910390f35b3480156102c057600080fd5b506102c9610a5d565b005b3480156102d757600080fd5b506102f260048036038101906102ed9190612b78565b610a7e565b005b34801561030057600080fd5b5061031b60048036038101906103169190612d1c565b610bd4565b005b34801561032957600080fd5b50610344600480360381019061033f9190612dad565b610cde565b005b34801561035257600080fd5b5061035b610e20565b6040516103689190612de9565b60405180910390f35b34801561037d57600080fd5b50610386610ec3565b005b34801561039457600080fd5b506103af60048036038101906103aa9190612e04565b610ed7565b005b3480156103bd57600080fd5b506103d860048036038101906103d39190612e44565b61104d565b6040516103e59190612e8c565b60405180910390f35b3480156103fa57600080fd5b506104036110a6565b6040516104109190612eb6565b60405180910390f35b34801561042557600080fd5b5061042e6110cf565b60405161043b9190612de9565b60405180910390f35b34801561045057600080fd5b50610459611107565b6040516104669190612eb6565b60405180910390f35b34801561047b57600080fd5b5061049660048036038101906104919190612ed1565b611131565b005b3480156104a457600080fd5b506104bf60048036038101906104ba9190612f38565b61133d565b005b3480156104cd57600080fd5b506104d66113dd565b6040516104e39190612cc8565b60405180910390f35b3480156104f857600080fd5b50610513600480360381019061050e9190612e44565b611403565b6040516105209190612de9565b60405180910390f35b34801561053557600080fd5b50610550600480360381019061054b9190612f65565b61144f565b005b34801561055e57600080fd5b5061057960048036038101906105749190612e44565b611a65565b6040516105869190612de9565b60405180910390f35b34801561059b57600080fd5b506105a4611ab1565b6040516105b19190612cc8565b60405180910390f35b3480156105c657600080fd5b506105e160048036038101906105dc9190612e44565b611ad7565b005b3480156105ef57600080fd5b506105f8611b5a565b604051610605919061302b565b60405180910390f35b610616611b80565b6000816fffffffffffffffffffffffffffffffff161161066b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066290613092565b60405180910390fd5b80600760006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a81426040516106d592919061312f565b60405180910390a150565b6106e8611b80565b6000826fffffffffffffffffffffffffffffffff1611801561071c57506000816fffffffffffffffffffffffffffffffff16115b61075b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610752906131dd565b60405180910390fd5b81600760106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600860006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a81836107fa919061322c565b426040516108099291906132bc565b60405180910390a15050565b61081d611b80565b600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff16116108a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089890613344565b60405180910390fd5b80600660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a814260405161090b9291906133b0565b60405180910390a150565b61091e611b80565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361098e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098590613438565b60405180910390fd5b82610997610e20565b10156109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cf906134ca565b60405180910390fd5b6109e28284611bfe565b8173ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d28442604051610a2a9291906134ea565b60405180910390a2505050565b6000600660009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b610a65611b80565b6000610a6f610e20565b9050610a7b3382611c92565b50565b610a86611b80565b6000816fffffffffffffffffffffffffffffffff1611610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad290613585565b60405180910390fd5b600660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b56906135f1565b60405180910390fd5b80600660006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610bc992919061365d565b60405180910390a150565b610bdc611b80565b6064818385610beb9190613699565b610bf59190613699565b60ff161115610c39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3090613740565b60405180910390fd5b82600860106101000a81548160ff021916908360ff16021790555081600860116101000a81548160ff021916908360ff16021790555080600860126101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a818385610cb89190613699565b610cc29190613699565b42604051610cd19291906137dd565b60405180910390a1505050565b610ce6611b80565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4c90613865565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9d6ad1956bc285ee763af0abf79be6b40f0fe495e250bd80c1bae2293ecc1df842604051610e1591906138d1565b60405180910390a350565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e7d9190612eb6565b602060405180830381865afa158015610e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe9190613914565b905090565b610ecb611b80565b610ed56000611d4a565b565b610edf611b80565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160149054906101000a900460ff16610f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6a9061398d565b60405180910390fd5b8181600101541015610fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb1906139f9565b60405180910390fd5b81816001016000828254610fce9190613a19565b925050819055508160056000828254610fe79190613a19565b92505081905550610ff88383611c92565b8273ffffffffffffffffffffffffffffffffffffffff167f8d39944b06acdac638a7aa16ecba5a5b350aba42c775308dab4c947d91f4f18a83426040516110409291906134ea565b60405180910390a2505050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1661118f5761118e33611e0e565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461126857600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061132b565b600a6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6113378185858561201d565b50505050565b611345611b80565b600081611350610e20565b61135a9190613a4d565b9050600660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168111156113cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c690613af3565b60405180910390fd5b6113d93383612378565b5050565b6000600660109054906101000a90046fffffffffffffffffffffffffffffffff16905090565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff166114de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d59061398d565b60405180910390fd5b600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16841015611551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154890613b5f565b60405180910390fd5b6000600760009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168561158f9190613bae565b146115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c690613c2b565b60405180910390fd5b600660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460055461160e9190613a4d565b111561164f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164690613cbd565b60405180910390fd5b6116593385612378565b836005600082825461166b9190613a4d565b9250508190555083600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546116c49190613a4d565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e085426040516117139291906134ea565b60405180910390a2600061173985600860109054906101000a900460ff1660ff1661261c565b9050600061175986600860119054906101000a900460ff1660ff1661261c565b9050600061177987600860129054906101000a900460ff1660ff1661261c565b9050600081838561178a9190613a4d565b6117949190613a4d565b9050600081896117a49190613a19565b90508181116117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117df90613d4f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461187b576118268886611bfe565b8773ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d2864260405161186e9291906134ea565b60405180910390a2600094505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461190e576118b98785611bfe565b8673ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d285426040516119019291906134ea565b60405180910390a2600093505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146119a15761194c8684611bfe565b8573ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d286426040516119949291906134ea565b60405180910390a2600092505b8284866119ae9190613a4d565b6119b89190613a4d565b816119c39190613a4d565b90506119f1600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611bfe565b8860056000828254611a039190613a4d565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f3428e989e797df55e8af7c22735e19d98f469023d200174911b2c8e0870240fe8242604051611a529291906134ea565b60405180910390a2505050505050505050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000600760009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b611adf611b80565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4590613de1565b60405180910390fd5b611b5781611d4a565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611b8861263e565b73ffffffffffffffffffffffffffffffffffffffff16611ba66110a6565b73ffffffffffffffffffffffffffffffffffffffff1614611bfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf390613e4d565b60405180910390fd5b565b60008111611c41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3890613edf565b60405180910390fd5b611c8e8282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166126469092919063ffffffff16565b5050565b611c9a6126cc565b80611ca3610e20565b1015611ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdb906134ca565b60405180910390fd5b611cee8282611bfe565b3373ffffffffffffffffffffffffffffffffffffffff167f6dc924e950dd523781352d0a7468f2ee2905084dea2bb7411d7996224ce75a888242604051611d369291906134ea565b60405180910390a2611d4661271b565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7590613438565b60405180910390fd5b60405180606001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016000815250600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550604082015181600101559050506004600081819054906101000a90046fffffffffffffffffffffffffffffffff1680929190611f9490613eff565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550508173ffffffffffffffffffffffffffffffffffffffff167f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c283426040516120119190612de9565b60405180910390a25050565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff166120ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a39061398d565b60405180910390fd5b6000600860009054906101000a90046fffffffffffffffffffffffffffffffff16600760109054906101000a90046fffffffffffffffffffffffffffffffff166120f6919061322c565b6fffffffffffffffffffffffffffffffff169050600081866121189190613a19565b905081600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166121569190613a4d565b861015612198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218f90613f83565b60405180910390fd5b6121a23383612378565b6121fe600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16611bfe565b3373ffffffffffffffffffffffffffffffffffffffff167f8fed26ea05e17903891c5c2a70ac7ce2aeafbb48acf403b9defdb2c96ab2e5c3600760109054906101000a90046fffffffffffffffffffffffffffffffff1642604051612264929190613fa3565b60405180910390a26122a685600860009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16611bfe565b8473ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d2600860009054906101000a90046fffffffffffffffffffffffffffffffff164260405161230c929190613fa3565b60405180910390a26123208186868661144f565b3373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e082426040516123689291906134ea565b60405180910390a2505050505050565b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b81526004016123d6929190613fcc565b602060405180830381865afa1580156123f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124179190613914565b1015612458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244f90614041565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016124b39190612eb6565b602060405180830381865afa1580156124d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f49190613914565b811115612536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252d906140ad565b60405180910390fd5b60008111612579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257090614119565b60405180910390fd5b6125c8823083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612724909392919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f695b93e5f85b6ac34424e1299d94bc079fb230aa7e5568a4e2e6214828cc936b82426040516126109291906134ea565b60405180910390a25050565b60006064828461262c9190614139565b612636919061417b565b905092915050565b600033905090565b6126c78363a9059cbb60e01b84846040516024016126659291906141ac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127ad565b505050565b600260015403612711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270890614221565b60405180910390fd5b6002600181905550565b60018081905550565b6127a7846323b872dd60e01b85858560405160240161274593929190614241565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127ad565b50505050565b600061280f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128759092919063ffffffff16565b905060008151148061283157508080602001905181019061283091906142a4565b5b612870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286790614343565b60405180910390fd5b505050565b6060612884848460008561288d565b90509392505050565b6060824710156128d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c9906143d5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516128fb9190614466565b60006040518083038185875af1925050503d8060008114612938576040519150601f19603f3d011682016040523d82523d6000602084013e61293d565b606091505b509150915061294e8783838761295a565b92505050949350505050565b606083156129bc5760008351036129b457612974856129cf565b6129b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129aa906144c9565b60405180910390fd5b5b8290506129c7565b6129c683836129f2565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612a055781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a39919061453e565b60405180910390fd5b600082825260208201905092915050565b7f4574686572206e6f742061636365707465640000000000000000000000000000600082015250565b6000612a89601283612a42565b9150612a9482612a53565b602082019050919050565b60006020820190508181036000830152612ab881612a7c565b9050919050565b7f46756e6374696f6e206e6f7420737570706f7274656400000000000000000000600082015250565b6000612af5601683612a42565b9150612b0082612abf565b602082019050919050565b60006020820190508181036000830152612b2481612ae8565b9050919050565b600080fd5b60006fffffffffffffffffffffffffffffffff82169050919050565b612b5581612b30565b8114612b6057600080fd5b50565b600081359050612b7281612b4c565b92915050565b600060208284031215612b8e57612b8d612b2b565b5b6000612b9c84828501612b63565b91505092915050565b60008060408385031215612bbc57612bbb612b2b565b5b6000612bca85828601612b63565b9250506020612bdb85828601612b63565b9150509250929050565b6000819050919050565b612bf881612be5565b8114612c0357600080fd5b50565b600081359050612c1581612bef565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c4682612c1b565b9050919050565b612c5681612c3b565b8114612c6157600080fd5b50565b600081359050612c7381612c4d565b92915050565b60008060408385031215612c9057612c8f612b2b565b5b6000612c9e85828601612c06565b9250506020612caf85828601612c64565b9150509250929050565b612cc281612b30565b82525050565b6000602082019050612cdd6000830184612cb9565b92915050565b600060ff82169050919050565b612cf981612ce3565b8114612d0457600080fd5b50565b600081359050612d1681612cf0565b92915050565b600080600060608486031215612d3557612d34612b2b565b5b6000612d4386828701612d07565b9350506020612d5486828701612d07565b9250506040612d6586828701612d07565b9150509250925092565b6000612d7a82612c1b565b9050919050565b612d8a81612d6f565b8114612d9557600080fd5b50565b600081359050612da781612d81565b92915050565b600060208284031215612dc357612dc2612b2b565b5b6000612dd184828501612d98565b91505092915050565b612de381612be5565b82525050565b6000602082019050612dfe6000830184612dda565b92915050565b60008060408385031215612e1b57612e1a612b2b565b5b6000612e2985828601612c64565b9250506020612e3a85828601612c06565b9150509250929050565b600060208284031215612e5a57612e59612b2b565b5b6000612e6884828501612c64565b91505092915050565b60008115159050919050565b612e8681612e71565b82525050565b6000602082019050612ea16000830184612e7d565b92915050565b612eb081612c3b565b82525050565b6000602082019050612ecb6000830184612ea7565b92915050565b60008060008060808587031215612eeb57612eea612b2b565b5b6000612ef987828801612c64565b9450506020612f0a87828801612c64565b9350506040612f1b87828801612c64565b9250506060612f2c87828801612c06565b91505092959194509250565b600060208284031215612f4e57612f4d612b2b565b5b6000612f5c84828501612c06565b91505092915050565b60008060008060808587031215612f7f57612f7e612b2b565b5b6000612f8d87828801612c06565b9450506020612f9e87828801612c64565b9350506040612faf87828801612c64565b9250506060612fc087828801612c64565b91505092959194509250565b6000819050919050565b6000612ff1612fec612fe784612c1b565b612fcc565b612c1b565b9050919050565b600061300382612fd6565b9050919050565b600061301582612ff8565b9050919050565b6130258161300a565b82525050565b6000602082019050613040600083018461301c565b92915050565b7f4d756c7469706c65206d7573742062652067726561746572207468616e203000600082015250565b600061307c601f83612a42565b915061308782613046565b602082019050919050565b600060208201905081810360008301526130ab8161306f565b9050919050565b7f4445504f5349545f4d554c5449504c4500000000000000000000000000000000600082015250565b60006130e8601083612a42565b91506130f3826130b2565b602082019050919050565b600061311961311461310f84612b30565b612fcc565b612be5565b9050919050565b613129816130fe565b82525050565b60006060820190508181036000830152613148816130db565b90506131576020830185613120565b6131646040830184612dda565b9392505050565b7f4d656d62657273686970207061796d656e7473206d75737420626520706f736960008201527f7469766500000000000000000000000000000000000000000000000000000000602082015250565b60006131c7602483612a42565b91506131d28261316b565b604082019050919050565b600060208201905081810360008301526131f6816131ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061323782612b30565b915061324283612b30565b925082820190506fffffffffffffffffffffffffffffffff81111561326a576132696131fd565b5b92915050565b7f4d454d424552534849505f5041594d454e545300000000000000000000000000600082015250565b60006132a6601383612a42565b91506132b182613270565b602082019050919050565b600060608201905081810360008301526132d581613299565b90506132e46020830185613120565b6132f16040830184612dda565b9392505050565b7f4d6178206d75737420657863656564206d696e00000000000000000000000000600082015250565b600061332e601383612a42565b9150613339826132f8565b602082019050919050565b6000602082019050818103600083015261335d81613321565b9050919050565b7f4d41585f434f4e54524143545f42414c414e4345000000000000000000000000600082015250565b600061339a601483612a42565b91506133a582613364565b602082019050919050565b600060608201905081810360008301526133c98161338d565b90506133d86020830185613120565b6133e56040830184612dda565b9392505050565b7f446972656363696f6e20696e76616c6964610000000000000000000000000000600082015250565b6000613422601283612a42565b915061342d826133ec565b602082019050919050565b6000602082019050818103600083015261345181613415565b9050919050565b7f436f6e747261746f206e6f206375656e746120636f6e20737566696369656e7460008201527f657320666f6e646f730000000000000000000000000000000000000000000000602082015250565b60006134b4602983612a42565b91506134bf82613458565b604082019050919050565b600060208201905081810360008301526134e3816134a7565b9050919050565b60006040820190506134ff6000830185612dda565b61350c6020830184612dda565b9392505050565b7f4d696e696d756d20616d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b600061356f602583612a42565b915061357a82613513565b604082019050919050565b6000602082019050818103600083015261359e81613562565b9050919050565b7f4d696e2063616e6e6f7420657863656564206d61780000000000000000000000600082015250565b60006135db601583612a42565b91506135e6826135a5565b602082019050919050565b6000602082019050818103600083015261360a816135ce565b9050919050565b7f4d494e5f414d4f554e545f544f5f4445504f5349540000000000000000000000600082015250565b6000613647601583612a42565b915061365282613611565b602082019050919050565b600060608201905081810360008301526136768161363a565b90506136856020830185613120565b6136926040830184612dda565b9392505050565b60006136a482612ce3565b91506136af83612ce3565b9250828201905060ff8111156136c8576136c76131fd565b5b92915050565b7f546f74616c20636f6d6d697373696f6e2063616e6e6f7420657863656564203160008201527f3030250000000000000000000000000000000000000000000000000000000000602082015250565b600061372a602383612a42565b9150613735826136ce565b604082019050919050565b600060208201905081810360008301526137598161371d565b9050919050565b7f434f4d4d495353494f4e5f524154455300000000000000000000000000000000600082015250565b6000613796601083612a42565b91506137a182613760565b602082019050919050565b60006137c76137c26137bd84612ce3565b612fcc565b612be5565b9050919050565b6137d7816137ac565b82525050565b600060608201905081810360008301526137f681613789565b905061380560208301856137ce565b6138126040830184612dda565b9392505050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b600061384f600f83612a42565b915061385a82613819565b602082019050919050565b6000602082019050818103600083015261387e81613842565b9050919050565b7f425553494e4553535f57414c4c45540000000000000000000000000000000000600082015250565b60006138bb600f83612a42565b91506138c682613885565b602082019050919050565b600060408201905081810360008301526138ea816138ae565b90506138f96020830184612dda565b92915050565b60008151905061390e81612bef565b92915050565b60006020828403121561392a57613929612b2b565b5b6000613938848285016138ff565b91505092915050565b7f4d69656d62726f206e6f2061637469766f000000000000000000000000000000600082015250565b6000613977601183612a42565b915061398282613941565b602082019050919050565b600060208201905081810360008301526139a68161396a565b9050919050565b7f4d6f6e746f20696e76616c69646f000000000000000000000000000000000000600082015250565b60006139e3600e83612a42565b91506139ee826139ad565b602082019050919050565b60006020820190508181036000830152613a12816139d6565b9050919050565b6000613a2482612be5565b9150613a2f83612be5565b9250828203905081811115613a4757613a466131fd565b5b92915050565b6000613a5882612be5565b9150613a6383612be5565b9250828201905080821115613a7b57613a7a6131fd565b5b92915050565b7f456c206465706f7369746f206e6f207075656465207375706572617220656c2060008201527f6c696d6974652064656c20636f6e747261746f00000000000000000000000000602082015250565b6000613add603383612a42565b9150613ae882613a81565b604082019050919050565b60006020820190508181036000830152613b0c81613ad0565b9050919050565b7f4465706f7369746f206e6f20616c63616e7a61206d6f6e746f206d696e696d6f600082015250565b6000613b49602083612a42565b9150613b5482613b13565b602082019050919050565b60006020820190508181036000830152613b7881613b3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613bb982612be5565b9150613bc483612be5565b925082613bd457613bd3613b7f565b5b828206905092915050565b7f56616c6f722064656c206465706f7369746f206e6f2065732076616c69646f00600082015250565b6000613c15601f83612a42565b9150613c2082613bdf565b602082019050919050565b60006020820190508181036000830152613c4481613c08565b9050919050565b7f4465706f7369746f2073757065726120656c206d6f6e746f20736f706f72746160008201527f646f20706f7220656c20636f6e747261746f0000000000000000000000000000602082015250565b6000613ca7603283612a42565b9150613cb282613c4b565b604082019050919050565b60006020820190508181036000830152613cd681613c9a565b9050919050565b7f4572726f7220656e20656c2063616c63756c6f20646520636f6d6973696f6e6560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d39602183612a42565b9150613d4482613cdd565b604082019050919050565b60006020820190508181036000830152613d6881613d2c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613dcb602683612a42565b9150613dd682613d6f565b604082019050919050565b60006020820190508181036000830152613dfa81613dbe565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613e37602083612a42565b9150613e4282613e01565b602082019050919050565b60006020820190508181036000830152613e6681613e2a565b9050919050565b7f4c612063616e74696461642061207472616e736665726972206465626520736560008201527f72206d61796f722061206365726f000000000000000000000000000000000000602082015250565b6000613ec9602e83612a42565b9150613ed482613e6d565b604082019050919050565b60006020820190508181036000830152613ef881613ebc565b9050919050565b6000613f0a82612b30565b91506fffffffffffffffffffffffffffffffff8203613f2c57613f2b6131fd565b5b600182019050919050565b7f4d6f6e746f20696e737566696369656e74650000000000000000000000000000600082015250565b6000613f6d601283612a42565b9150613f7882613f37565b602082019050919050565b60006020820190508181036000830152613f9c81613f60565b9050919050565b6000604082019050613fb86000830185613120565b613fc56020830184612dda565b9392505050565b6000604082019050613fe16000830185612ea7565b613fee6020830184612ea7565b9392505050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b600061402b601683612a42565b915061403682613ff5565b602082019050919050565b6000602082019050818103600083015261405a8161401e565b9050919050565b7f4e6f206375656e74617320636f6e205553445420656e2074752077616c6c6574600082015250565b6000614097602083612a42565b91506140a282614061565b602082019050919050565b600060208201905081810360008301526140c68161408a565b9050919050565b7f4465706f7369746f206e6f2070756564652073657220766163696f0000000000600082015250565b6000614103601b83612a42565b915061410e826140cd565b602082019050919050565b60006020820190508181036000830152614132816140f6565b9050919050565b600061414482612be5565b915061414f83612be5565b925082820261415d81612be5565b91508282048414831517614174576141736131fd565b5b5092915050565b600061418682612be5565b915061419183612be5565b9250826141a1576141a0613b7f565b5b828204905092915050565b60006040820190506141c16000830185612ea7565b6141ce6020830184612dda565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061420b601f83612a42565b9150614216826141d5565b602082019050919050565b6000602082019050818103600083015261423a816141fe565b9050919050565b60006060820190506142566000830186612ea7565b6142636020830185612ea7565b6142706040830184612dda565b949350505050565b61428181612e71565b811461428c57600080fd5b50565b60008151905061429e81614278565b92915050565b6000602082840312156142ba576142b9612b2b565b5b60006142c88482850161428f565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061432d602a83612a42565b9150614338826142d1565b604082019050919050565b6000602082019050818103600083015261435c81614320565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006143bf602683612a42565b91506143ca82614363565b604082019050919050565b600060208201905081810360008301526143ee816143b2565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561442957808201518184015260208101905061440e565b60008484015250505050565b6000614440826143f5565b61444a8185614400565b935061445a81856020860161440b565b80840191505092915050565b60006144728284614435565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006144b3601d83612a42565b91506144be8261447d565b602082019050919050565b600060208201905081810360008301526144e2816144a6565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000614510826144e9565b61451a8185612a42565b935061452a81856020860161440b565b614533816144f4565b840191505092915050565b600060208201905081810360008301526145588184614505565b90509291505056fea26469706673582212206bf6bc344fdfb6ce4fb01537d989e94389c95a096b1aa664ef60a74fadf4176464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1043,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)255"
      },
      {
        "astId": 1045,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_businessWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 1047,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_totalMembers",
        "offset": 0,
        "slot": "4",
        "type": "t_uint128"
      },
      {
        "astId": 1049,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_totalBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1051,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MIN_AMOUNT_TO_DEPOSIT",
        "offset": 0,
        "slot": "6",
        "type": "t_uint128"
      },
      {
        "astId": 1053,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MAX_CONTRACT_BALANCE",
        "offset": 16,
        "slot": "6",
        "type": "t_uint128"
      },
      {
        "astId": 1055,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_DEPOSIT_MULTIPLE",
        "offset": 0,
        "slot": "7",
        "type": "t_uint128"
      },
      {
        "astId": 1057,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBERSHIP_PAYMENT_TO_BUSINESS",
        "offset": 16,
        "slot": "7",
        "type": "t_uint128"
      },
      {
        "astId": 1059,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBERSHIP_PAYMENT_TO_UPLINE",
        "offset": 0,
        "slot": "8",
        "type": "t_uint128"
      },
      {
        "astId": 1061,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_ONE",
        "offset": 16,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 1063,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_TWO",
        "offset": 17,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 1065,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_THREE",
        "offset": 18,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 1077,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "members",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Member)1072_storage)"
      },
      {
        "astId": 1082,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "enrolled",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)255": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Member)1072_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FFFBusiness.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)1072_storage"
      },
      "t_struct(Member)1072_storage": {
        "encoding": "inplace",
        "label": "struct FFFBusiness.Member",
        "members": [
          {
            "astId": 1067,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "memberWallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 1069,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "isActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1071,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}