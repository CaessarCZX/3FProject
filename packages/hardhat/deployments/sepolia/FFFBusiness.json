{
  "address": "0xEbd5b020FEF9413CB420fff0C0CAE632315E8DdE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommissionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "config",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DepositContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MembershipPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewBusinessOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewSaving",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransferBusiness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMember",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "checkActiveMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_decreaseAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseMemberFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_thirtLevelUpline",
          "type": "address"
        }
      ],
      "name": "depositMemberFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBusinessWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositMultiple",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxContractBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currentMember",
          "type": "address"
        }
      ],
      "name": "getMemberBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinAmountToDeposit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPytTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currentMember",
          "type": "address"
        }
      ],
      "name": "getTotalAffiliatesPerMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uplineAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_thirtLevelUpline",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "memberEntrance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "paymentCommissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_newBusinessWallet",
          "type": "address"
        }
      ],
      "name": "setBusinessWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tier1",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_tier2",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_tier3",
          "type": "uint8"
        }
      ],
      "name": "setCommissionRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMultiple",
          "type": "uint128"
        }
      ],
      "name": "setDepositMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMaxBalance",
          "type": "uint128"
        }
      ],
      "name": "setMaxContractBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_toBusiness",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_toUpline",
          "type": "uint128"
        }
      ],
      "name": "setMembershipPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMinAmount",
          "type": "uint128"
        }
      ],
      "name": "setMinAmountToDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pyt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commission",
          "type": "uint256"
        }
      ],
      "name": "setTimestamps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf2b619e9ba07708e19a1598d008a07db2777f40452cc0967cac569f19236174f",
  "receipt": {
    "to": null,
    "from": "0xcC9Ab49082e75Fff477F5D0413998252506d8906",
    "contractAddress": "0xEbd5b020FEF9413CB420fff0C0CAE632315E8DdE",
    "transactionIndex": 94,
    "gasUsed": "4350822",
    "logsBloom": "0x
    "blockHash": "0xe0f662c39bc1d112fe0d0a143bc42d8e1cb55d99202dc457d458d1cdea82b007",
    "transactionHash": "0xf2b619e9ba07708e19a1598d008a07db2777f40452cc0967cac569f19236174f",
    "logs": [
      {
        "transactionIndex": 94,
        "blockNumber": 7346072,
        "transactionHash": "0xf2b619e9ba07708e19a1598d008a07db2777f40452cc0967cac569f19236174f",
        "address": "0xEbd5b020FEF9413CB420fff0C0CAE632315E8DdE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc9ab49082e75fff477f5d0413998252506d8906"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0xe0f662c39bc1d112fe0d0a143bc42d8e1cb55d99202dc457d458d1cdea82b007"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 7346072,
        "transactionHash": "0xf2b619e9ba07708e19a1598d008a07db2777f40452cc0967cac569f19236174f",
        "address": "0xEbd5b020FEF9413CB420fff0C0CAE632315E8DdE",
        "topics": [
          "0x7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c283",
          "0x000000000000000000000000cc9ab49082e75fff477f5d0413998252506d8906"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000676ad7b0",
        "logIndex": 124,
        "blockHash": "0xe0f662c39bc1d112fe0d0a143bc42d8e1cb55d99202dc457d458d1cdea82b007"
      }
    ],
    "blockNumber": 7346072,
    "cumulativeGasUsed": "16114673",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B846D9d563D434d275e2d3a532c30B0574DcA2e"
  ],
  "numDeployments": 5,
  "solcInputHash": "0b96fc40bd6f4eb6236d7b43997e452e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"config\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MembershipPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewBusinessOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewSaving\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferBusiness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMember\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"checkActiveMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseMemberFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirtLevelUpline\",\"type\":\"address\"}],\"name\":\"depositMemberFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusinessWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositMultiple\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxContractBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentMember\",\"type\":\"address\"}],\"name\":\"getMemberBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinAmountToDeposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPytTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentMember\",\"type\":\"address\"}],\"name\":\"getTotalAffiliatesPerMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uplineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirtLevelUpline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"memberEntrance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"paymentCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBusinessWallet\",\"type\":\"address\"}],\"name\":\"setBusinessWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_tier2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_tier3\",\"type\":\"uint8\"}],\"name\":\"setCommissionRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMultiple\",\"type\":\"uint128\"}],\"name\":\"setDepositMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMaxBalance\",\"type\":\"uint128\"}],\"name\":\"setMaxContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_toBusiness\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_toUpline\",\"type\":\"uint128\"}],\"name\":\"setMembershipPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMinAmount\",\"type\":\"uint128\"}],\"name\":\"setMinAmountToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pyt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setTimestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FFFBusiness.sol\":\"FFFBusiness\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/FFFBusiness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract FFFBusiness is Ownable, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// USDT\\n\\tIERC20 public token;\\n\\n\\t// For Bussiness\\n\\taddress payable private _businessWallet;\\n    uint128 private _totalMembers;\\n    uint256 private _totalBalance; \\n\\n\\t//Limits\\n\\tuint128 private _MIN_AMOUNT_TO_DEPOSIT;\\n\\tuint128 private _MAX_CONTRACT_BALANCE;\\n\\tuint128 private _DEPOSIT_MULTIPLE;\\n    uint256 private _PYT_TIMESTAMP;\\n    uint256 private _COMMISSION_TIMESTAMP;\\n    uint128 private _MEMBERSHIP_PAYMENT_TO_BUSINESS;\\n    uint128 private _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n    uint8 private _COMMISSION_PER_TIER_ONE;\\n    uint8 private _COMMISSION_PER_TIER_TWO;\\n    uint8 private _COMMISSION_PER_TIER_THREE;\\n\\n\\t// Represents every client wallet\\n\\tstruct Member {\\n\\t\\taddress payable memberWallet;\\n\\t\\tbool isActive; \\n\\t\\tuint balance; // Total savings per client\\n\\t}\\n\\n\\tmapping(address => Member) private members;\\n\\tmapping(address => address[]) private enrolled; // Warning! for verification only\\n\\n    // Main Events\\n    event NewBusinessOwner(\\n        string message,\\n        address indexed oldOwner,\\n        address indexed newOwner,\\n        uint timestamp\\n    );\\n    event ConfigUpdated(\\n        string config,\\n        uint newValue,\\n        uint timestamp\\n    );\\n\\tevent DepositContract(\\n        address indexed from,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent TransferBusiness(\\n\\t\\taddress indexed from,\\n\\t\\tuint amount,\\n\\t\\tuint timestamp\\n\\t);\\n\\tevent WithdrawalContract(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n    event WithdrawalMember(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent CommissionPaid(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n    event MembershipPaid(\\n        address indexed from,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent NewMember(\\n        address indexed member,\\n        uint timestamp\\n    );\\n    event NewSaving(\\n        address indexed member,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\n\\t// Initiallize USDT address && only DEPLOYER wallet is the OWNER!!!\\n\\tconstructor(address _tokenAddress) {\\n\\t\\trequire(_tokenAddress != address(0), \\\"Token address cannot be zero\\\");\\n\\n        // Ruleset for bussiness logic\\n        _MIN_AMOUNT_TO_DEPOSIT = 2000 * 10 ** 6; // 2000 USDT\\n        _MAX_CONTRACT_BALANCE = 10000000 * 10 ** 6; // 10M USDT\\n        _DEPOSIT_MULTIPLE = 500 * 10 ** 6; // M\\u00faltiple 500 USDT\\n        _PYT_TIMESTAMP = 90 days;\\n        _COMMISSION_TIMESTAMP = 30 days;\\n        _MEMBERSHIP_PAYMENT_TO_BUSINESS = 400 * 10 ** 6; //400 USDT\\n        _MEMBERSHIP_PAYMENT_TO_UPLINE = 100 * 10 ** 6; //100 USDT\\n        _COMMISSION_PER_TIER_ONE = 4;\\n        _COMMISSION_PER_TIER_TWO = 2;\\n        _COMMISSION_PER_TIER_THREE = 2;\\n\\n        // Principal wallet\\n\\t\\t_businessWallet = payable(msg.sender);\\n\\n        // Token\\n\\t\\ttoken = IERC20(_tokenAddress);\\n\\n        // Balance for total members\\n        _totalBalance = 0;\\n\\n        // Principal wallet is the first member\\n        _createMember(_businessWallet);\\n\\t}\\n\\n    // Modofiers\\n\\tmodifier onlyActiveMember() {\\n\\t\\trequire(members[msg.sender].isActive, \\\"Miembro no activo\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkValidAddress(address _recipient) {\\n\\t\\trequire(_recipient != address(0), \\\"Direccion invalida\\\");\\n\\t\\t_;\\n\\t}\\n\\n    // Checkers\\n    function checkActiveMember(address _member) public view returns(bool) {\\n        return members[_member].isActive;\\n    }\\n\\n    // Getters for bussiness logic vars\\n    function getTotalBalance() private view returns (uint) {\\n        return _totalBalance;\\n    }\\n\\n    function getBusinessWallet() public view returns (address) {\\n        return _businessWallet;\\n    }\\n\\n    function getTotalMembers() public view returns (uint) {\\n        return _totalMembers;\\n    }\\n\\n\\tfunction getMemberBalance(address _currentMember) public view returns(uint) {\\n        return members[_currentMember].balance;\\n    }\\n\\n    function getTotalAffiliatesPerMember(address _currentMember) public view returns(uint) {\\n        return enrolled[_currentMember].length;\\n    }\\n\\n    function getMinAmountToDeposit() public view returns (uint128) {\\n        return _MIN_AMOUNT_TO_DEPOSIT;\\n    }\\n\\n    function getMaxContractBalance() public view returns (uint128) {\\n        return _MAX_CONTRACT_BALANCE;\\n    }\\n\\n    function getDepositMultiple() public view returns (uint128) {\\n        return _DEPOSIT_MULTIPLE;\\n    }\\n\\n    function getPytTimestamp() public view returns (uint256) {\\n        return _PYT_TIMESTAMP;\\n    }\\n\\n    function getCommissionTimestamp() public view returns (uint256) {\\n        return _COMMISSION_TIMESTAMP;\\n    }\\n\\n    function getCurrentContractBalance() public view onlyOwner returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n        // Setters\\n    function setMinAmountToDeposit(uint128 _newMinAmount) external onlyOwner {\\n        require(_newMinAmount > 0, \\\"Minimum amount must be greater than 0\\\");\\n        require(_newMinAmount < _MAX_CONTRACT_BALANCE, \\\"Min cannot exceed max\\\");\\n        _MIN_AMOUNT_TO_DEPOSIT = _newMinAmount;\\n        emit ConfigUpdated(\\\"MIN_AMOUNT_TO_DEPOSIT\\\", _newMinAmount, block.timestamp);\\n    }\\n\\n    function setMaxContractBalance(uint128 _newMaxBalance) external onlyOwner {\\n        require(_newMaxBalance > _MIN_AMOUNT_TO_DEPOSIT, \\\"Max must exceed min\\\");\\n        _MAX_CONTRACT_BALANCE = _newMaxBalance;\\n        emit ConfigUpdated(\\\"MAX_CONTRACT_BALANCE\\\", _newMaxBalance, block.timestamp);\\n    }\\n\\n    function setDepositMultiple(uint128 _newMultiple) external onlyOwner {\\n        require(_newMultiple > 0, \\\"Multiple must be greater than 0\\\");\\n        _DEPOSIT_MULTIPLE = _newMultiple;\\n        emit ConfigUpdated(\\\"DEPOSIT_MULTIPLE\\\", _newMultiple, block.timestamp);\\n    }\\n\\n    function setMembershipPayments(uint128 _toBusiness, uint128 _toUpline) external onlyOwner {\\n        require(_toBusiness > 0 && _toUpline > 0, \\\"Membership payments must be positive\\\");\\n        _MEMBERSHIP_PAYMENT_TO_BUSINESS = _toBusiness;\\n        _MEMBERSHIP_PAYMENT_TO_UPLINE = _toUpline;\\n        emit ConfigUpdated(\\\"MEMBERSHIP_PAYMENTS\\\", _toBusiness + _toUpline, block.timestamp);\\n    }\\n\\n    function setCommissionRates(uint8 _tier1, uint8 _tier2, uint8 _tier3) external onlyOwner {\\n        require(_tier1 + _tier2 + _tier3 <= 100, \\\"Total commission cannot exceed 100%\\\");\\n        _COMMISSION_PER_TIER_ONE = _tier1;\\n        _COMMISSION_PER_TIER_TWO = _tier2;\\n        _COMMISSION_PER_TIER_THREE = _tier3;\\n        emit ConfigUpdated(\\\"COMMISSION_RATES\\\", _tier1 + _tier2 + _tier3, block.timestamp);\\n    }\\n\\n    function setTimestamps(uint256 _pyt, uint256 _commission) external onlyOwner {\\n        require(_pyt > 0 && _commission > 0, \\\"Timestamps must be greater than 0\\\");\\n        _PYT_TIMESTAMP = _pyt;\\n        _COMMISSION_TIMESTAMP = _commission;\\n        emit ConfigUpdated(\\\"TIMESTAMPS\\\", _pyt + _commission, block.timestamp);\\n    }\\n\\n    function setBusinessWallet(address payable _newBusinessWallet) external onlyOwner {\\n        require(_newBusinessWallet != address(0), \\\"Invalid address\\\");\\n        _businessWallet = _newBusinessWallet;\\n        emit NewBusinessOwner(\\\"BUSINESS_WALLET\\\", _businessWallet, _newBusinessWallet, block.timestamp);\\n    }\\n\\n\\n\\tfunction memberEntrance(\\n        address _uplineAddress,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline,\\n        uint _amount\\n    ) public {\\n        if (!members[msg.sender].isActive) {\\n            _createMember(payable(msg.sender));\\n        }\\n        if (_uplineAddress != address(0)) {\\n            enrolled[_uplineAddress].push(msg.sender);\\n        } else {\\n            enrolled[_businessWallet].push(msg.sender);\\n        }\\n\\n        _firstDeposit(_amount, _uplineAddress, _secondLevelUpline, _thirtLevelUpline);\\n    }\\n\\n\\tfunction deposit(uint256 _amount) external onlyOwner() {\\n        uint256 realBalance = getCurrentContractBalance() + _amount;\\n        require(realBalance <= _MAX_CONTRACT_BALANCE, \\\"El deposito no puede superar el limite del contrato\\\");\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 currentBalance = getCurrentContractBalance();\\n        _withdraw(msg.sender, currentBalance);\\n    }\\n\\n    function paymentCommissions (\\n        uint256 _paymentAmount,\\n        address _memberAddress\\n    ) external onlyOwner checkValidAddress(_memberAddress) {\\n        require(getCurrentContractBalance() >= _paymentAmount, \\\"Contrato no cuenta con suficientes fondos\\\");\\n        _processPayment(_memberAddress, _paymentAmount);\\n        emit CommissionPaid(_memberAddress, _paymentAmount, block.timestamp);\\n    }\\n\\n    // Provitional function for decrease memberfunds, in case to whitdraw in a future\\n    function decreaseMemberFunds(\\n        address _memberAddress,\\n        uint _decreaseAmount\\n    ) external onlyOwner {\\n        Member storage currentMember = members[_memberAddress];\\n        require(currentMember.isActive, \\\"Miembro no activo\\\");\\n        require(currentMember.balance >= _decreaseAmount, \\\"Monto invalido\\\");\\n\\n        currentMember.balance -= _decreaseAmount;\\n        _totalBalance -= _decreaseAmount;\\n        emit WithdrawalMember(_memberAddress, _decreaseAmount, block.timestamp);\\n    }\\n\\n    function depositMemberFunds(\\n        uint _amount,\\n        address _firstLevelUpline,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline\\n    ) public onlyActiveMember {\\n        require(_amount >= _MIN_AMOUNT_TO_DEPOSIT, \\\"Deposito no alcanza monto minimo\\\");\\n        require(_amount % _DEPOSIT_MULTIPLE == 0, \\\"Valor del deposito no es valido\\\");\\n        require(_totalBalance + _amount <= _MAX_CONTRACT_BALANCE, \\\"Deposito supera el monto soportado por el contrato\\\");\\n\\n        _deposit(msg.sender, _amount);\\n\\n        // Update total balance in contract\\n        _totalBalance += _amount;\\n\\n        members[msg.sender].balance += _amount;\\n        emit NewSaving(msg.sender, _amount, block.timestamp);\\n\\n        uint256 commissionFirstLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_ONE);\\n        uint256 commissionSecondLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_TWO);\\n        uint256 commissionThirtLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_THREE);\\n        uint256 totalCommissions = commissionFirstLevel + commissionSecondLevel + commissionThirtLevel;\\n\\n        uint256 finalDeposit = _amount - totalCommissions;\\n        require(finalDeposit > totalCommissions, \\\"Error en el calculo de comisiones\\\");\\n\\n        // Payment to uplines in case exists\\n        if (_firstLevelUpline != address(0)) {\\n            _processPayment(_firstLevelUpline, commissionFirstLevel);\\n            emit CommissionPaid(_firstLevelUpline, commissionFirstLevel, block.timestamp);\\n            commissionFirstLevel = 0;\\n        }\\n        if (_secondLevelUpline != address(0)) {\\n            _processPayment(_secondLevelUpline, commissionSecondLevel);\\n            emit CommissionPaid(_secondLevelUpline, commissionSecondLevel, block.timestamp);\\n            commissionSecondLevel = 0;\\n        }\\n        if (_thirtLevelUpline != address(0)) {\\n            _processPayment(_thirtLevelUpline, commissionThirtLevel);\\n            emit CommissionPaid(_thirtLevelUpline, commissionFirstLevel, block.timestamp);\\n            commissionThirtLevel = 0;\\n        }\\n\\n        // final calculation after to pay uplines\\n        finalDeposit += (commissionFirstLevel + commissionSecondLevel + commissionThirtLevel);\\n\\n        _processPayment(_businessWallet, finalDeposit);\\n\\n        // Update total balance in contract with total amount per deposit\\n        _totalBalance += _amount;\\n\\n        emit TransferBusiness(msg.sender, finalDeposit, block.timestamp);\\n\\n    }\\n\\n\\tfunction _processPayment(address _to, uint256 _amount) private {\\n        require(_amount > 0, \\\"La cantidad a transferir debe ser mayor a cero\\\");\\n        token.safeTransfer(_to, _amount);\\n    }\\n\\n    function _firstDeposit(\\n        uint256 _amount,\\n        address _uplineAddress,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline\\n    ) private onlyActiveMember {\\n        uint256 membership = _MEMBERSHIP_PAYMENT_TO_BUSINESS + _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n        uint256 firstDeposit = _amount - membership;\\n\\n        require(_amount >= _MIN_AMOUNT_TO_DEPOSIT + membership, \\\"Monto insuficiente\\\");\\n        _deposit(msg.sender, membership);\\n\\n        // Membership payment to bussiness\\n        _processPayment(_businessWallet, _MEMBERSHIP_PAYMENT_TO_BUSINESS);\\n        emit MembershipPaid(msg.sender, _MEMBERSHIP_PAYMENT_TO_BUSINESS, block.timestamp);\\n        // Membership payment to upline\\n        _processPayment(_uplineAddress, _MEMBERSHIP_PAYMENT_TO_UPLINE);\\n        emit CommissionPaid(_uplineAddress, _MEMBERSHIP_PAYMENT_TO_UPLINE, block.timestamp);\\n\\n        // For saving\\n        depositMemberFunds(firstDeposit, _uplineAddress, _secondLevelUpline, _thirtLevelUpline);\\n\\n        emit NewSaving(msg.sender, firstDeposit, block.timestamp);\\n    }\\n\\n    function _deposit(address _from, uint256 _amount) private {\\n        require(token.allowance(_from, address(this)) >= _amount, \\\"Insufficient allowance\\\");\\n        require(_amount <= token.balanceOf(_from), \\\"No cuentas con USDT en tu wallet\\\");\\n        require(_amount > 0, \\\"Deposito no puede ser vacio\\\");\\n        token.safeTransferFrom(_from, address(this), _amount);\\n        emit DepositContract(_from, _amount, block.timestamp);\\n    }\\n\\n    function _withdraw(address _to, uint256 _amount) private nonReentrant {\\n        require(getCurrentContractBalance() >= _amount, \\\"Contrato no cuenta con suficientes fondos\\\");\\n        _processPayment(_to, _amount);\\n        emit WithdrawalContract(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _calculateCommission(uint256 _amount, uint256 _refundPercent) private pure returns (uint) {\\n        return (_amount * _refundPercent) / 100;\\n    }\\n\\n\\tfunction _createMember(address payable _newMember) private checkValidAddress(_newMember) {\\n        members[_newMember] = Member({\\n            memberWallet: _newMember,\\n            isActive: true,\\n            balance: 0\\n        });\\n\\n        _totalMembers++;\\n        emit NewMember(_newMember, block.timestamp);\\n    }\\n    \\n\\treceive() external payable {\\n\\t\\trevert(\\\"Ether not accepted\\\");\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\trevert(\\\"Function not supported\\\");\\n\\t}\\n\\n\\n}\\n\",\"keccak256\":\"0xa8e00f055aea3b039fa9b2fafca8da3ecf49338b2c79c11ea32d546644f55d4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80637f7efd1a116100ec578063ca55753a1161008a578063d59392de11610064578063d59392de14610636578063f2fde38b14610661578063fa1019771461068a578063fc0c546a146106b3576101fb565b8063ca55753a14610593578063cc2ec6ab146105d0578063d1947705146105f9576101fb565b8063aa331db5116100c6578063aa331db5146104eb578063b315ea3614610516578063b6b55f251461053f578063b713087014610568576101fb565b80637f7efd1a146104585780638da5cb5b146104955780638f180305146104c0576101fb565b80633ccfd60b116101595780634d6ece02116101335780634d6ece02146103c45780635afe70d7146103ed5780636d79008114610416578063715018a614610441576101fb565b80633ccfd60b1461035b5780633f37da5f146103725780634b71810d1461039b576101fb565b80632f3f199c116101955780632f3f199c146102b357806335b2455b146102dc578063361f1ad31461030557806337ca3b0614610330576101fb565b80630aa63285146102365780630b760cd914610261578063258cf9b81461028a576101fb565b366101fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f290612c2e565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022d90612c9a565b60405180910390fd5b34801561024257600080fd5b5061024b6106de565b6040516102589190612cd3565b60405180910390f35b34801561026d57600080fd5b5061028860048036038101906102839190612d3b565b6106e8565b005b34801561029657600080fd5b506102b160048036038101906102ac9190612d68565b6107ba565b005b3480156102bf57600080fd5b506102da60048036038101906102d59190612d3b565b6108ef565b005b3480156102e857600080fd5b5061030360048036038101906102fe9190612e32565b6109f0565b005b34801561031157600080fd5b5061031a610b11565b6040516103279190612e81565b60405180910390f35b34801561033c57600080fd5b50610345610b37565b6040516103529190612cd3565b60405180910390f35b34801561036757600080fd5b50610370610b41565b005b34801561037e57600080fd5b5061039960048036038101906103949190612d3b565b610b62565b005b3480156103a757600080fd5b506103c260048036038101906103bd9190612ed5565b610cb8565b005b3480156103d057600080fd5b506103eb60048036038101906103e69190612f28565b610dc2565b005b3480156103f957600080fd5b50610414600480360381019061040f9190612fa6565b610f2e565b005b34801561042257600080fd5b5061042b611070565b6040516104389190612cd3565b60405180910390f35b34801561044d57600080fd5b5061045661111b565b005b34801561046457600080fd5b5061047f600480360381019061047a9190612fd3565b61112f565b60405161048c919061301b565b60405180910390f35b3480156104a157600080fd5b506104aa611188565b6040516104b79190613045565b60405180910390f35b3480156104cc57600080fd5b506104d56111b1565b6040516104e29190612cd3565b60405180910390f35b3480156104f757600080fd5b506105006111e9565b60405161050d9190613045565b60405180910390f35b34801561052257600080fd5b5061053d60048036038101906105389190613060565b611213565b005b34801561054b57600080fd5b50610566600480360381019061056191906130c7565b61141f565b005b34801561057457600080fd5b5061057d6114bf565b60405161058a9190612e81565b60405180910390f35b34801561059f57600080fd5b506105ba60048036038101906105b59190612fd3565b6114e5565b6040516105c79190612cd3565b60405180910390f35b3480156105dc57600080fd5b506105f760048036038101906105f291906130f4565b611531565b005b34801561060557600080fd5b50610620600480360381019061061b9190612fd3565b611b47565b60405161062d9190612cd3565b60405180910390f35b34801561064257600080fd5b5061064b611b93565b6040516106589190612e81565b60405180910390f35b34801561066d57600080fd5b5061068860048036038101906106839190612fd3565b611bb9565b005b34801561069657600080fd5b506106b160048036038101906106ac919061315b565b611c3c565b005b3480156106bf57600080fd5b506106c8611ce9565b6040516106d591906131fa565b60405180910390f35b6000600954905090565b6106f0611d0f565b6000816fffffffffffffffffffffffffffffffff1611610745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073c90613261565b60405180910390fd5b80600760006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a81426040516107af9291906132fe565b60405180910390a150565b6107c2611d0f565b6000826fffffffffffffffffffffffffffffffff161180156107f657506000816fffffffffffffffffffffffffffffffff16115b610835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082c906133ac565b60405180910390fd5b81600a60006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600a60106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a81836108d491906133fb565b426040516108e392919061348b565b60405180910390a15050565b6108f7611d0f565b600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161161097b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290613513565b60405180910390fd5b80600660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a81426040516109e592919061357f565b60405180910390a150565b6109f8611d0f565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5f90613607565b60405180910390fd5b82610a71611070565b1015610ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa990613699565b60405180910390fd5b610abc8284611d8d565b8173ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d28442604051610b049291906136b9565b60405180910390a2505050565b6000600660009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b6000600854905090565b610b49611d0f565b6000610b53611070565b9050610b5f3382611e21565b50565b610b6a611d0f565b6000816fffffffffffffffffffffffffffffffff1611610bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb690613754565b60405180910390fd5b600660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a906137c0565b60405180910390fd5b80600660006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610cad92919061382c565b60405180910390a150565b610cc0611d0f565b6064818385610ccf9190613868565b610cd99190613868565b60ff161115610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d149061390f565b60405180910390fd5b82600b60006101000a81548160ff021916908360ff16021790555081600b60016101000a81548160ff021916908360ff16021790555080600b60026101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a818385610d9c9190613868565b610da69190613868565b42604051610db59291906139ac565b60405180910390a1505050565b610dca611d0f565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160149054906101000a900460ff16610e5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5590613a34565b60405180910390fd5b8181600101541015610ea5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9c90613aa0565b60405180910390fd5b81816001016000828254610eb99190613ac0565b925050819055508160056000828254610ed29190613ac0565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f8d39944b06acdac638a7aa16ecba5a5b350aba42c775308dab4c947d91f4f18a8342604051610f219291906136b9565b60405180910390a2505050565b610f36611d0f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9c90613b40565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9d6ad1956bc285ee763af0abf79be6b40f0fe495e250bd80c1bae2293ecc1df8426040516110659190613bac565b60405180910390a350565b600061107a611d0f565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110d59190613045565b602060405180830381865afa1580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111169190613bef565b905090565b611123611d0f565b61112d6000611ed9565b565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff166112715761127033611f9d565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461134a57600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061140d565b600d6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b611419818585856121ac565b50505050565b611427611d0f565b600081611432611070565b61143c9190613c1c565b9050600660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168111156114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890613cc2565b60405180910390fd5b6114bb3383612507565b5050565b6000600660109054906101000a90046fffffffffffffffffffffffffffffffff16905090565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff166115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790613a34565b60405180910390fd5b600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16841015611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162a90613d2e565b60405180910390fd5b6000600760009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16856116719190613d7d565b146116b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a890613dfa565b60405180910390fd5b600660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16846005546116f09190613c1c565b1115611731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172890613e8c565b60405180910390fd5b61173b3385612507565b836005600082825461174d9190613c1c565b9250508190555083600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546117a69190613c1c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e085426040516117f59291906136b9565b60405180910390a2600061181b85600b60009054906101000a900460ff1660ff166127ab565b9050600061183b86600b60019054906101000a900460ff1660ff166127ab565b9050600061185b87600b60029054906101000a900460ff1660ff166127ab565b9050600081838561186c9190613c1c565b6118769190613c1c565b9050600081896118869190613ac0565b90508181116118ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c190613f1e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461195d576119088886611d8d565b8773ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d286426040516119509291906136b9565b60405180910390a2600094505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146119f05761199b8785611d8d565b8673ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d285426040516119e39291906136b9565b60405180910390a2600093505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611a8357611a2e8684611d8d565b8573ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d28642604051611a769291906136b9565b60405180910390a2600092505b828486611a909190613c1c565b611a9a9190613c1c565b81611aa59190613c1c565b9050611ad3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611d8d565b8860056000828254611ae59190613c1c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f3428e989e797df55e8af7c22735e19d98f469023d200174911b2c8e0870240fe8242604051611b349291906136b9565b60405180910390a2505050505050505050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000600760009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b611bc1611d0f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2790613fb0565b60405180910390fd5b611c3981611ed9565b50565b611c44611d0f565b600082118015611c545750600081115b611c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8a90614042565b60405180910390fd5b81600881905550806009819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8183611cce9190613c1c565b42604051611cdd9291906140ae565b60405180910390a15050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611d176127cd565b73ffffffffffffffffffffffffffffffffffffffff16611d35611188565b73ffffffffffffffffffffffffffffffffffffffff1614611d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8290614136565b60405180910390fd5b565b60008111611dd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc7906141c8565b60405180910390fd5b611e1d8282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166127d59092919063ffffffff16565b5050565b611e2961285b565b80611e32611070565b1015611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90613699565b60405180910390fd5b611e7d8282611d8d565b3373ffffffffffffffffffffffffffffffffffffffff167f6dc924e950dd523781352d0a7468f2ee2905084dea2bb7411d7996224ce75a888242604051611ec59291906136b9565b60405180910390a2611ed56128aa565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361200d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200490613607565b60405180910390fd5b60405180606001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016000815250600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550604082015181600101559050506004600081819054906101000a90046fffffffffffffffffffffffffffffffff1680929190612123906141e8565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550508173ffffffffffffffffffffffffffffffffffffffff167f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c283426040516121a09190612cd3565b60405180910390a25050565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1661223b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223290613a34565b60405180910390fd5b6000600a60109054906101000a90046fffffffffffffffffffffffffffffffff16600a60009054906101000a90046fffffffffffffffffffffffffffffffff1661228591906133fb565b6fffffffffffffffffffffffffffffffff169050600081866122a79190613ac0565b905081600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166122e59190613c1c565b861015612327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231e9061426c565b60405180910390fd5b6123313383612507565b61238d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16611d8d565b3373ffffffffffffffffffffffffffffffffffffffff167f8fed26ea05e17903891c5c2a70ac7ce2aeafbb48acf403b9defdb2c96ab2e5c3600a60009054906101000a90046fffffffffffffffffffffffffffffffff16426040516123f392919061428c565b60405180910390a261243585600a60109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16611d8d565b8473ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d2600a60109054906101000a90046fffffffffffffffffffffffffffffffff164260405161249b92919061428c565b60405180910390a26124af81868686611531565b3373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e082426040516124f79291906136b9565b60405180910390a2505050505050565b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b81526004016125659291906142b5565b602060405180830381865afa158015612582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a69190613bef565b10156125e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125de9061432a565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016126429190613045565b602060405180830381865afa15801561265f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126839190613bef565b8111156126c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bc90614396565b60405180910390fd5b60008111612708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ff90614402565b60405180910390fd5b612757823083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128b3909392919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f695b93e5f85b6ac34424e1299d94bc079fb230aa7e5568a4e2e6214828cc936b824260405161279f9291906136b9565b60405180910390a25050565b6000606482846127bb9190614422565b6127c59190614464565b905092915050565b600033905090565b6128568363a9059cbb60e01b84846040516024016127f4929190614495565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061293c565b505050565b6002600154036128a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128979061450a565b60405180910390fd5b6002600181905550565b60018081905550565b612936846323b872dd60e01b8585856040516024016128d49392919061452a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061293c565b50505050565b600061299e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612a049092919063ffffffff16565b90506000815114806129c05750808060200190518101906129bf919061458d565b5b6129ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f69061462c565b60405180910390fd5b505050565b6060612a138484600085612a1c565b90509392505050565b606082471015612a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a58906146be565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612a8a919061474f565b60006040518083038185875af1925050503d8060008114612ac7576040519150601f19603f3d011682016040523d82523d6000602084013e612acc565b606091505b5091509150612add87838387612ae9565b92505050949350505050565b60608315612b4b576000835103612b4357612b0385612b5e565b612b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b39906147b2565b60405180910390fd5b5b829050612b56565b612b558383612b81565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612b945781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc89190614827565b60405180910390fd5b600082825260208201905092915050565b7f4574686572206e6f742061636365707465640000000000000000000000000000600082015250565b6000612c18601283612bd1565b9150612c2382612be2565b602082019050919050565b60006020820190508181036000830152612c4781612c0b565b9050919050565b7f46756e6374696f6e206e6f7420737570706f7274656400000000000000000000600082015250565b6000612c84601683612bd1565b9150612c8f82612c4e565b602082019050919050565b60006020820190508181036000830152612cb381612c77565b9050919050565b6000819050919050565b612ccd81612cba565b82525050565b6000602082019050612ce86000830184612cc4565b92915050565b600080fd5b60006fffffffffffffffffffffffffffffffff82169050919050565b612d1881612cf3565b8114612d2357600080fd5b50565b600081359050612d3581612d0f565b92915050565b600060208284031215612d5157612d50612cee565b5b6000612d5f84828501612d26565b91505092915050565b60008060408385031215612d7f57612d7e612cee565b5b6000612d8d85828601612d26565b9250506020612d9e85828601612d26565b9150509250929050565b612db181612cba565b8114612dbc57600080fd5b50565b600081359050612dce81612da8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612dff82612dd4565b9050919050565b612e0f81612df4565b8114612e1a57600080fd5b50565b600081359050612e2c81612e06565b92915050565b60008060408385031215612e4957612e48612cee565b5b6000612e5785828601612dbf565b9250506020612e6885828601612e1d565b9150509250929050565b612e7b81612cf3565b82525050565b6000602082019050612e966000830184612e72565b92915050565b600060ff82169050919050565b612eb281612e9c565b8114612ebd57600080fd5b50565b600081359050612ecf81612ea9565b92915050565b600080600060608486031215612eee57612eed612cee565b5b6000612efc86828701612ec0565b9350506020612f0d86828701612ec0565b9250506040612f1e86828701612ec0565b9150509250925092565b60008060408385031215612f3f57612f3e612cee565b5b6000612f4d85828601612e1d565b9250506020612f5e85828601612dbf565b9150509250929050565b6000612f7382612dd4565b9050919050565b612f8381612f68565b8114612f8e57600080fd5b50565b600081359050612fa081612f7a565b92915050565b600060208284031215612fbc57612fbb612cee565b5b6000612fca84828501612f91565b91505092915050565b600060208284031215612fe957612fe8612cee565b5b6000612ff784828501612e1d565b91505092915050565b60008115159050919050565b61301581613000565b82525050565b6000602082019050613030600083018461300c565b92915050565b61303f81612df4565b82525050565b600060208201905061305a6000830184613036565b92915050565b6000806000806080858703121561307a57613079612cee565b5b600061308887828801612e1d565b945050602061309987828801612e1d565b93505060406130aa87828801612e1d565b92505060606130bb87828801612dbf565b91505092959194509250565b6000602082840312156130dd576130dc612cee565b5b60006130eb84828501612dbf565b91505092915050565b6000806000806080858703121561310e5761310d612cee565b5b600061311c87828801612dbf565b945050602061312d87828801612e1d565b935050604061313e87828801612e1d565b925050606061314f87828801612e1d565b91505092959194509250565b6000806040838503121561317257613171612cee565b5b600061318085828601612dbf565b925050602061319185828601612dbf565b9150509250929050565b6000819050919050565b60006131c06131bb6131b684612dd4565b61319b565b612dd4565b9050919050565b60006131d2826131a5565b9050919050565b60006131e4826131c7565b9050919050565b6131f4816131d9565b82525050565b600060208201905061320f60008301846131eb565b92915050565b7f4d756c7469706c65206d7573742062652067726561746572207468616e203000600082015250565b600061324b601f83612bd1565b915061325682613215565b602082019050919050565b6000602082019050818103600083015261327a8161323e565b9050919050565b7f4445504f5349545f4d554c5449504c4500000000000000000000000000000000600082015250565b60006132b7601083612bd1565b91506132c282613281565b602082019050919050565b60006132e86132e36132de84612cf3565b61319b565b612cba565b9050919050565b6132f8816132cd565b82525050565b60006060820190508181036000830152613317816132aa565b905061332660208301856132ef565b6133336040830184612cc4565b9392505050565b7f4d656d62657273686970207061796d656e7473206d75737420626520706f736960008201527f7469766500000000000000000000000000000000000000000000000000000000602082015250565b6000613396602483612bd1565b91506133a18261333a565b604082019050919050565b600060208201905081810360008301526133c581613389565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061340682612cf3565b915061341183612cf3565b925082820190506fffffffffffffffffffffffffffffffff811115613439576134386133cc565b5b92915050565b7f4d454d424552534849505f5041594d454e545300000000000000000000000000600082015250565b6000613475601383612bd1565b91506134808261343f565b602082019050919050565b600060608201905081810360008301526134a481613468565b90506134b360208301856132ef565b6134c06040830184612cc4565b9392505050565b7f4d6178206d75737420657863656564206d696e00000000000000000000000000600082015250565b60006134fd601383612bd1565b9150613508826134c7565b602082019050919050565b6000602082019050818103600083015261352c816134f0565b9050919050565b7f4d41585f434f4e54524143545f42414c414e4345000000000000000000000000600082015250565b6000613569601483612bd1565b915061357482613533565b602082019050919050565b600060608201905081810360008301526135988161355c565b90506135a760208301856132ef565b6135b46040830184612cc4565b9392505050565b7f446972656363696f6e20696e76616c6964610000000000000000000000000000600082015250565b60006135f1601283612bd1565b91506135fc826135bb565b602082019050919050565b60006020820190508181036000830152613620816135e4565b9050919050565b7f436f6e747261746f206e6f206375656e746120636f6e20737566696369656e7460008201527f657320666f6e646f730000000000000000000000000000000000000000000000602082015250565b6000613683602983612bd1565b915061368e82613627565b604082019050919050565b600060208201905081810360008301526136b281613676565b9050919050565b60006040820190506136ce6000830185612cc4565b6136db6020830184612cc4565b9392505050565b7f4d696e696d756d20616d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b600061373e602583612bd1565b9150613749826136e2565b604082019050919050565b6000602082019050818103600083015261376d81613731565b9050919050565b7f4d696e2063616e6e6f7420657863656564206d61780000000000000000000000600082015250565b60006137aa601583612bd1565b91506137b582613774565b602082019050919050565b600060208201905081810360008301526137d98161379d565b9050919050565b7f4d494e5f414d4f554e545f544f5f4445504f5349540000000000000000000000600082015250565b6000613816601583612bd1565b9150613821826137e0565b602082019050919050565b6000606082019050818103600083015261384581613809565b905061385460208301856132ef565b6138616040830184612cc4565b9392505050565b600061387382612e9c565b915061387e83612e9c565b9250828201905060ff811115613897576138966133cc565b5b92915050565b7f546f74616c20636f6d6d697373696f6e2063616e6e6f7420657863656564203160008201527f3030250000000000000000000000000000000000000000000000000000000000602082015250565b60006138f9602383612bd1565b91506139048261389d565b604082019050919050565b60006020820190508181036000830152613928816138ec565b9050919050565b7f434f4d4d495353494f4e5f524154455300000000000000000000000000000000600082015250565b6000613965601083612bd1565b91506139708261392f565b602082019050919050565b600061399661399161398c84612e9c565b61319b565b612cba565b9050919050565b6139a68161397b565b82525050565b600060608201905081810360008301526139c581613958565b90506139d4602083018561399d565b6139e16040830184612cc4565b9392505050565b7f4d69656d62726f206e6f2061637469766f000000000000000000000000000000600082015250565b6000613a1e601183612bd1565b9150613a29826139e8565b602082019050919050565b60006020820190508181036000830152613a4d81613a11565b9050919050565b7f4d6f6e746f20696e76616c69646f000000000000000000000000000000000000600082015250565b6000613a8a600e83612bd1565b9150613a9582613a54565b602082019050919050565b60006020820190508181036000830152613ab981613a7d565b9050919050565b6000613acb82612cba565b9150613ad683612cba565b9250828203905081811115613aee57613aed6133cc565b5b92915050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6000613b2a600f83612bd1565b9150613b3582613af4565b602082019050919050565b60006020820190508181036000830152613b5981613b1d565b9050919050565b7f425553494e4553535f57414c4c45540000000000000000000000000000000000600082015250565b6000613b96600f83612bd1565b9150613ba182613b60565b602082019050919050565b60006040820190508181036000830152613bc581613b89565b9050613bd46020830184612cc4565b92915050565b600081519050613be981612da8565b92915050565b600060208284031215613c0557613c04612cee565b5b6000613c1384828501613bda565b91505092915050565b6000613c2782612cba565b9150613c3283612cba565b9250828201905080821115613c4a57613c496133cc565b5b92915050565b7f456c206465706f7369746f206e6f207075656465207375706572617220656c2060008201527f6c696d6974652064656c20636f6e747261746f00000000000000000000000000602082015250565b6000613cac603383612bd1565b9150613cb782613c50565b604082019050919050565b60006020820190508181036000830152613cdb81613c9f565b9050919050565b7f4465706f7369746f206e6f20616c63616e7a61206d6f6e746f206d696e696d6f600082015250565b6000613d18602083612bd1565b9150613d2382613ce2565b602082019050919050565b60006020820190508181036000830152613d4781613d0b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613d8882612cba565b9150613d9383612cba565b925082613da357613da2613d4e565b5b828206905092915050565b7f56616c6f722064656c206465706f7369746f206e6f2065732076616c69646f00600082015250565b6000613de4601f83612bd1565b9150613def82613dae565b602082019050919050565b60006020820190508181036000830152613e1381613dd7565b9050919050565b7f4465706f7369746f2073757065726120656c206d6f6e746f20736f706f72746160008201527f646f20706f7220656c20636f6e747261746f0000000000000000000000000000602082015250565b6000613e76603283612bd1565b9150613e8182613e1a565b604082019050919050565b60006020820190508181036000830152613ea581613e69565b9050919050565b7f4572726f7220656e20656c2063616c63756c6f20646520636f6d6973696f6e6560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f08602183612bd1565b9150613f1382613eac565b604082019050919050565b60006020820190508181036000830152613f3781613efb565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613f9a602683612bd1565b9150613fa582613f3e565b604082019050919050565b60006020820190508181036000830152613fc981613f8d565b9050919050565b7f54696d657374616d7073206d7573742062652067726561746572207468616e2060008201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b600061402c602183612bd1565b915061403782613fd0565b604082019050919050565b6000602082019050818103600083015261405b8161401f565b9050919050565b7f54494d455354414d505300000000000000000000000000000000000000000000600082015250565b6000614098600a83612bd1565b91506140a382614062565b602082019050919050565b600060608201905081810360008301526140c78161408b565b90506140d66020830185612cc4565b6140e36040830184612cc4565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614120602083612bd1565b915061412b826140ea565b602082019050919050565b6000602082019050818103600083015261414f81614113565b9050919050565b7f4c612063616e74696461642061207472616e736665726972206465626520736560008201527f72206d61796f722061206365726f000000000000000000000000000000000000602082015250565b60006141b2602e83612bd1565b91506141bd82614156565b604082019050919050565b600060208201905081810360008301526141e1816141a5565b9050919050565b60006141f382612cf3565b91506fffffffffffffffffffffffffffffffff8203614215576142146133cc565b5b600182019050919050565b7f4d6f6e746f20696e737566696369656e74650000000000000000000000000000600082015250565b6000614256601283612bd1565b915061426182614220565b602082019050919050565b6000602082019050818103600083015261428581614249565b9050919050565b60006040820190506142a160008301856132ef565b6142ae6020830184612cc4565b9392505050565b60006040820190506142ca6000830185613036565b6142d76020830184613036565b9392505050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000614314601683612bd1565b915061431f826142de565b602082019050919050565b6000602082019050818103600083015261434381614307565b9050919050565b7f4e6f206375656e74617320636f6e205553445420656e2074752077616c6c6574600082015250565b6000614380602083612bd1565b915061438b8261434a565b602082019050919050565b600060208201905081810360008301526143af81614373565b9050919050565b7f4465706f7369746f206e6f2070756564652073657220766163696f0000000000600082015250565b60006143ec601b83612bd1565b91506143f7826143b6565b602082019050919050565b6000602082019050818103600083015261441b816143df565b9050919050565b600061442d82612cba565b915061443883612cba565b925082820261444681612cba565b9150828204841483151761445d5761445c6133cc565b5b5092915050565b600061446f82612cba565b915061447a83612cba565b92508261448a57614489613d4e565b5b828204905092915050565b60006040820190506144aa6000830185613036565b6144b76020830184612cc4565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006144f4601f83612bd1565b91506144ff826144be565b602082019050919050565b60006020820190508181036000830152614523816144e7565b9050919050565b600060608201905061453f6000830186613036565b61454c6020830185613036565b6145596040830184612cc4565b949350505050565b61456a81613000565b811461457557600080fd5b50565b60008151905061458781614561565b92915050565b6000602082840312156145a3576145a2612cee565b5b60006145b184828501614578565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614616602a83612bd1565b9150614621826145ba565b604082019050919050565b6000602082019050818103600083015261464581614609565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006146a8602683612bd1565b91506146b38261464c565b604082019050919050565b600060208201905081810360008301526146d78161469b565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156147125780820151818401526020810190506146f7565b60008484015250505050565b6000614729826146de565b61473381856146e9565b93506147438185602086016146f4565b80840191505092915050565b600061475b828461471e565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061479c601d83612bd1565b91506147a782614766565b602082019050919050565b600060208201905081810360008301526147cb8161478f565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006147f9826147d2565b6148038185612bd1565b93506148138185602086016146f4565b61481c816147dd565b840191505092915050565b6000602082019050818103600083015261484181846147ee565b90509291505056fea264697066735822122062c0f870e67ce8727be8b2b134e09f68a77d92f2c21654582c21e0e36624df5d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1043,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)255"
      },
      {
        "astId": 1045,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_businessWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 1047,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_totalMembers",
        "offset": 0,
        "slot": "4",
        "type": "t_uint128"
      },
      {
        "astId": 1049,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_totalBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1051,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MIN_AMOUNT_TO_DEPOSIT",
        "offset": 0,
        "slot": "6",
        "type": "t_uint128"
      },
      {
        "astId": 1053,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MAX_CONTRACT_BALANCE",
        "offset": 16,
        "slot": "6",
        "type": "t_uint128"
      },
      {
        "astId": 1055,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_DEPOSIT_MULTIPLE",
        "offset": 0,
        "slot": "7",
        "type": "t_uint128"
      },
      {
        "astId": 1057,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_PYT_TIMESTAMP",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1059,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_TIMESTAMP",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1061,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBERSHIP_PAYMENT_TO_BUSINESS",
        "offset": 0,
        "slot": "10",
        "type": "t_uint128"
      },
      {
        "astId": 1063,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBERSHIP_PAYMENT_TO_UPLINE",
        "offset": 16,
        "slot": "10",
        "type": "t_uint128"
      },
      {
        "astId": 1065,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_ONE",
        "offset": 0,
        "slot": "11",
        "type": "t_uint8"
      },
      {
        "astId": 1067,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_TWO",
        "offset": 1,
        "slot": "11",
        "type": "t_uint8"
      },
      {
        "astId": 1069,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_THREE",
        "offset": 2,
        "slot": "11",
        "type": "t_uint8"
      },
      {
        "astId": 1081,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "members",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(Member)1076_storage)"
      },
      {
        "astId": 1086,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "enrolled",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)255": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Member)1076_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FFFBusiness.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)1076_storage"
      },
      "t_struct(Member)1076_storage": {
        "encoding": "inplace",
        "label": "struct FFFBusiness.Member",
        "members": [
          {
            "astId": 1071,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "memberWallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 1073,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "isActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1075,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}