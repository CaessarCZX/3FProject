{
  "address": "0x384122BDDbb3Cd611CeD9bF2602a5A1726EfE42A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "initialKey",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommissionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "config",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DepositContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        }
      ],
      "name": "KeyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MembershipPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewBusinessOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewSaving",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PullPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransferBusiness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMember",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "checkActiveMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_thirtLevelUpline",
          "type": "address"
        }
      ],
      "name": "depositMemberFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBusinessWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionPerFistLevelUpline",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionPerSecondLevelUpline",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionPerThirtLevelUpline",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositMultiple",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxContractBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currentMember",
          "type": "address"
        }
      ],
      "name": "getMemberBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembershipPaymentToBusiness",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembershipPaymentToUpline",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinAmountToDeposit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currentMember",
          "type": "address"
        }
      ],
      "name": "getTotalAffiliatesPerMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminKey",
          "type": "string"
        }
      ],
      "name": "liquidateMemberFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uplineAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_thirtLevelUpline",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "memberEntrance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminKey",
          "type": "string"
        }
      ],
      "name": "paymentCommissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminKey",
          "type": "string"
        }
      ],
      "name": "paymentForPulls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_newBusinessWallet",
          "type": "address"
        }
      ],
      "name": "setBusinessWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tier1",
          "type": "uint8"
        }
      ],
      "name": "setCommissionPerFistLevelUpline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tier2",
          "type": "uint8"
        }
      ],
      "name": "setCommissionPerSecondLevelUpline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tier3",
          "type": "uint8"
        }
      ],
      "name": "setCommissionPerThirtLevelUpline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMultiple",
          "type": "uint128"
        }
      ],
      "name": "setDepositMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMaxBalance",
          "type": "uint128"
        }
      ],
      "name": "setMaxContractBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_toBusiness",
          "type": "uint128"
        }
      ],
      "name": "setMembershipPaymentToBusiness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_toUpline",
          "type": "uint128"
        }
      ],
      "name": "setMembershipPaymentToUpline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newMinAmount",
          "type": "uint128"
        }
      ],
      "name": "setMinAmountToDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newKey",
          "type": "string"
        }
      ],
      "name": "updateAdminKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd250ef0a90af50e284283811de06c32a21af1ac70730191d7cb6b8504090b27e",
  "receipt": {
    "to": null,
    "from": "0xcC9Ab49082e75Fff477F5D0413998252506d8906",
    "contractAddress": "0x384122BDDbb3Cd611CeD9bF2602a5A1726EfE42A",
    "transactionIndex": 12,
    "gasUsed": "5001552",
    "logsBloom": "0x
    "blockHash": "0x8e6a8ff390182ec4adbb3597deaf638fb0cf555bd643337649a6bb3011f676cb",
    "transactionHash": "0xd250ef0a90af50e284283811de06c32a21af1ac70730191d7cb6b8504090b27e",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 7403816,
        "transactionHash": "0xd250ef0a90af50e284283811de06c32a21af1ac70730191d7cb6b8504090b27e",
        "address": "0x384122BDDbb3Cd611CeD9bF2602a5A1726EfE42A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc9ab49082e75fff477f5d0413998252506d8906"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x8e6a8ff390182ec4adbb3597deaf638fb0cf555bd643337649a6bb3011f676cb"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 7403816,
        "transactionHash": "0xd250ef0a90af50e284283811de06c32a21af1ac70730191d7cb6b8504090b27e",
        "address": "0x384122BDDbb3Cd611CeD9bF2602a5A1726EfE42A",
        "topics": [
          "0x7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c283",
          "0x000000000000000000000000cc9ab49082e75fff477f5d0413998252506d8906"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000677617ec",
        "logIndex": 6,
        "blockHash": "0x8e6a8ff390182ec4adbb3597deaf638fb0cf555bd643337649a6bb3011f676cb"
      }
    ],
    "blockNumber": 7403816,
    "cumulativeGasUsed": "5742537",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B846D9d563D434d275e2d3a532c30B0574DcA2e",
    "Proyecto3fLibertadFXZW"
  ],
  "numDeployments": 8,
  "solcInputHash": "1c53cb1cf10434a2a6930172ac1d5fc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"initialKey\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"config\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"KeyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MembershipPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewBusinessOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewSaving\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PullPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferBusiness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMember\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"checkActiveMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirtLevelUpline\",\"type\":\"address\"}],\"name\":\"depositMemberFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusinessWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionPerFistLevelUpline\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionPerSecondLevelUpline\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionPerThirtLevelUpline\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositMultiple\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxContractBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentMember\",\"type\":\"address\"}],\"name\":\"getMemberBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembershipPaymentToBusiness\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembershipPaymentToUpline\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinAmountToDeposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentMember\",\"type\":\"address\"}],\"name\":\"getTotalAffiliatesPerMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminKey\",\"type\":\"string\"}],\"name\":\"liquidateMemberFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uplineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirtLevelUpline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"memberEntrance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminKey\",\"type\":\"string\"}],\"name\":\"paymentCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminKey\",\"type\":\"string\"}],\"name\":\"paymentForPulls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBusinessWallet\",\"type\":\"address\"}],\"name\":\"setBusinessWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier1\",\"type\":\"uint8\"}],\"name\":\"setCommissionPerFistLevelUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier2\",\"type\":\"uint8\"}],\"name\":\"setCommissionPerSecondLevelUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier3\",\"type\":\"uint8\"}],\"name\":\"setCommissionPerThirtLevelUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMultiple\",\"type\":\"uint128\"}],\"name\":\"setDepositMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMaxBalance\",\"type\":\"uint128\"}],\"name\":\"setMaxContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_toBusiness\",\"type\":\"uint128\"}],\"name\":\"setMembershipPaymentToBusiness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_toUpline\",\"type\":\"uint128\"}],\"name\":\"setMembershipPaymentToUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newMinAmount\",\"type\":\"uint128\"}],\"name\":\"setMinAmountToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newKey\",\"type\":\"string\"}],\"name\":\"updateAdminKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FFFBusiness.sol\":\"FFFBusiness\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/FFFBusiness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract FFFBusiness is Ownable, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n    //Securty\\n    bytes32 private _ADMIN_KEY;\\n\\n\\t// USDT\\n\\tIERC20 public token;\\n\\n\\t// For Bussiness\\n\\taddress payable private _businessWallet;\\n    uint128 private _totalMembers;\\n    uint256 private _totalBalance;\\n\\n\\t//Limits\\n\\tuint128 private _MIN_AMOUNT_TO_DEPOSIT;\\n\\tuint128 private _MAX_CONTRACT_BALANCE;\\n\\tuint128 private _DEPOSIT_MULTIPLE;\\n    uint128 private _MEMBERSHIP_PAYMENT_TO_BUSINESS;\\n    uint128 private _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n    uint8 private _COMMISSION_PER_TIER_ONE;\\n    uint8 private _COMMISSION_PER_TIER_TWO;\\n    uint8 private _COMMISSION_PER_TIER_THREE;\\n\\n\\t// Represents every client wallet\\n\\tstruct Member {\\n\\t\\taddress payable memberWallet;\\n\\t\\tbool isActive; \\n\\t\\tuint balance; // Total savings per client\\n\\t}\\n\\n\\tmapping(address => Member) private members;\\n\\tmapping(address => address[]) private enrolled; // Warning! for verification only\\n\\n    // Setup events\\n    event NewBusinessOwner(\\n        string message,\\n        address indexed oldOwner,\\n        address indexed newOwner,\\n        uint timestamp\\n    );\\n    event ConfigUpdated(\\n        string config,\\n        uint newValue,\\n        uint timestamp\\n    );\\n\\n    //Security events\\n    event KeyUpdated(\\n        address indexed updater\\n    );\\n\\n    //Business events\\n\\tevent DepositContract(\\n        address indexed from,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent TransferBusiness(\\n\\t\\taddress indexed from,\\n\\t\\tuint amount,\\n\\t\\tuint timestamp\\n\\t);\\n\\tevent WithdrawalContract(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n    event MembershipPaid(\\n        address indexed from,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\n    //Member events\\n    event WithdrawalMember(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent CommissionPaid(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n    event PullPayment(\\n        address indexed to,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\tevent NewMember(\\n        address indexed member,\\n        uint timestamp\\n    );\\n    event NewSaving(\\n        address indexed member,\\n        uint amount,\\n        uint timestamp\\n    );\\n\\n\\t// Initiallize USDT address && only DEPLOYER wallet is the OWNER!!!\\n\\tconstructor(address _tokenAddress, string memory initialKey) {\\n\\t\\trequire(_tokenAddress != address(0), \\\"Token address cannot be zero\\\");\\n\\n        // For encrypted admin key\\n        _ADMIN_KEY = keccak256(abi.encodePacked(initialKey));\\n\\n        // Ruleset for bussiness logic\\n        _MIN_AMOUNT_TO_DEPOSIT = 2000 * 10 ** 6; // 2000 USDT\\n        _MAX_CONTRACT_BALANCE = 10000000 * 10 ** 6; // 10M USDT\\n        _DEPOSIT_MULTIPLE = 500 * 10 ** 6; // M\\u00faltiple 500 USDT\\n        _MEMBERSHIP_PAYMENT_TO_BUSINESS = 400 * 10 ** 6; //400 USDT\\n        _MEMBERSHIP_PAYMENT_TO_UPLINE = 100 * 10 ** 6; //100 USDT\\n        _COMMISSION_PER_TIER_ONE = 4;\\n        _COMMISSION_PER_TIER_TWO = 2;\\n        _COMMISSION_PER_TIER_THREE = 2;\\n\\n        // Principal wallet\\n\\t\\t_businessWallet = payable(msg.sender);\\n\\n        // Token\\n\\t\\ttoken = IERC20(_tokenAddress);\\n\\n        // Balance for total members\\n        _totalBalance = 0;\\n\\n        // Principal wallet is the first member\\n        _createMember(_businessWallet);\\n\\t}\\n\\n    // Modofiers\\n\\tmodifier onlyActiveMember() {\\n\\t\\trequire(members[msg.sender].isActive, \\\"Miembro no activo\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkValidAddress(address _recipient) {\\n\\t\\trequire(_recipient != address(0), \\\"Direccion invalida\\\");\\n\\t\\t_;\\n\\t}\\n\\n    modifier verifyAdminKey(string memory key) {\\n        require(keccak256(abi.encodePacked(key)) == _ADMIN_KEY, \\\"Palabra clave de administrador no valida\\\");\\n        _;\\n    }\\n\\n\\n    // Checkers\\n    function checkActiveMember(address _member) public view returns(bool) {\\n        return members[_member].isActive;\\n    }\\n\\n    // Getters for bussiness logic vars\\n    function getTotalBalance() private view returns (uint) {\\n        return _totalBalance;\\n    }\\n\\n    function getBusinessWallet() public view returns (address) {\\n        return _businessWallet;\\n    }\\n\\n    function getTotalMembers() public view returns (uint) {\\n        return _totalMembers;\\n    }\\n\\n\\tfunction getMemberBalance(address _currentMember) public view returns(uint) {\\n        return members[_currentMember].balance;\\n    }\\n\\n    function getTotalAffiliatesPerMember(address _currentMember) public view returns(uint) {\\n        return enrolled[_currentMember].length;\\n    }\\n\\n    function getMinAmountToDeposit() public view returns (uint128) {\\n        return _MIN_AMOUNT_TO_DEPOSIT;\\n    }\\n\\n    function getMaxContractBalance() public view returns (uint128) {\\n        return _MAX_CONTRACT_BALANCE;\\n    }\\n\\n    function getDepositMultiple() public view returns (uint128) {\\n        return _DEPOSIT_MULTIPLE;\\n    }\\n\\n    function getCurrentContractBalance() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function getMembershipPaymentToBusiness() public view returns (uint128) {\\n        return _MEMBERSHIP_PAYMENT_TO_BUSINESS;\\n    }\\n\\n    function getMembershipPaymentToUpline() public view returns (uint128) {\\n        return _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n    }\\n\\n    function getCommissionPerFistLevelUpline() public view returns (uint8) {\\n        return _COMMISSION_PER_TIER_ONE;\\n    }\\n\\n    function getCommissionPerSecondLevelUpline() public view returns (uint8) {\\n        return _COMMISSION_PER_TIER_TWO;\\n    }\\n\\n    function getCommissionPerThirtLevelUpline() public view returns (uint8) {\\n        return _COMMISSION_PER_TIER_THREE;\\n    }\\n\\n        // Setters\\n    function updateAdminKey(\\n        string memory newKey\\n    )\\n        external\\n        onlyOwner\\n    {\\n        _ADMIN_KEY = keccak256(abi.encodePacked(newKey));\\n        emit KeyUpdated(msg.sender);\\n    }\\n    \\n    function setMinAmountToDeposit(\\n        uint128 _newMinAmount\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_newMinAmount > 0, \\\"Minimum amount must be greater than 0\\\");\\n        require(_newMinAmount < _MAX_CONTRACT_BALANCE, \\\"Min cannot exceed max\\\");\\n        _MIN_AMOUNT_TO_DEPOSIT = _newMinAmount;\\n        emit ConfigUpdated(\\\"MIN_AMOUNT_TO_DEPOSIT\\\", _newMinAmount, block.timestamp);\\n    }\\n\\n    function setMaxContractBalance(\\n        uint128 _newMaxBalance\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_newMaxBalance > _MIN_AMOUNT_TO_DEPOSIT, \\\"Max must exceed min\\\");\\n        _MAX_CONTRACT_BALANCE = _newMaxBalance;\\n        emit ConfigUpdated(\\\"MAX_CONTRACT_BALANCE\\\", _newMaxBalance, block.timestamp);\\n    }\\n\\n    function setDepositMultiple(\\n        uint128 _newMultiple\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_newMultiple > 0, \\\"Multiple must be greater than 0\\\");\\n        _DEPOSIT_MULTIPLE = _newMultiple;\\n        emit ConfigUpdated(\\\"DEPOSIT_MULTIPLE\\\", _newMultiple, block.timestamp);\\n    }\\n\\n    function setMembershipPaymentToBusiness(\\n        uint128 _toBusiness\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_toBusiness > 0, \\\"Membership payments must be positive\\\");\\n        require(_toBusiness < _MAX_CONTRACT_BALANCE, \\\"Payment to Business cannot exceed max\\\");\\n        _MEMBERSHIP_PAYMENT_TO_BUSINESS = _toBusiness;\\n        emit ConfigUpdated(\\\"MEMBERSHIP_PAYMENT_TO_BUSINESS\\\", _toBusiness, block.timestamp);\\n    }\\n\\n    function setMembershipPaymentToUpline(\\n        uint128 _toUpline\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_toUpline > 0, \\\"Membership payments must be positive\\\");\\n        require(_toUpline < _MAX_CONTRACT_BALANCE, \\\"Payment to Upline cannot exceed max\\\");\\n        _MEMBERSHIP_PAYMENT_TO_UPLINE = _toUpline;\\n        emit ConfigUpdated(\\\"MEMBERSHIP_PAYMENT_TO_UPLINE\\\", _toUpline, block.timestamp);\\n    }\\n\\n    function setCommissionPerFistLevelUpline(\\n        uint8 _tier1\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_tier1 > 0, \\\"Commission payments must be positive\\\");\\n        require(_tier1 <= 100, \\\"Commission cannot exceed 100%\\\");\\n        _COMMISSION_PER_TIER_ONE = _tier1;\\n        emit ConfigUpdated(\\\"COMMISSION_PER_FIRST_LEVEL_UPDATED\\\", _tier1, block.timestamp);\\n    }\\n\\n    function setCommissionPerSecondLevelUpline(\\n        uint8 _tier2\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_tier2 > 0, \\\"Commission payments must be positive\\\");\\n        require(_tier2 <= 100, \\\"Commission cannot exceed 100%\\\");\\n        _COMMISSION_PER_TIER_TWO = _tier2;\\n        emit ConfigUpdated(\\\"COMMISSION_PER_SECOND_LEVEL_UPDATED\\\", _tier2, block.timestamp);\\n    }\\n\\n    function setCommissionPerThirtLevelUpline(\\n        uint8 _tier3\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_tier3 > 0, \\\"Commission payments must be positive\\\");\\n        require(_tier3 <= 100, \\\"Total commission cannot exceed 100%\\\");\\n        _COMMISSION_PER_TIER_THREE = _tier3;\\n        emit ConfigUpdated(\\\"COMMISSION_PER_THIRT_LEVEL_UPDATED\\\", _tier3, block.timestamp);\\n    }\\n\\n    function setBusinessWallet(\\n        address payable _newBusinessWallet\\n    ) \\n        external\\n        onlyOwner\\n    {\\n        require(_newBusinessWallet != address(0), \\\"Invalid address\\\");\\n        _businessWallet = _newBusinessWallet;\\n        transferOwnership(_newBusinessWallet);\\n        emit NewBusinessOwner(\\\"BUSINESS_WALLET\\\", _businessWallet, _newBusinessWallet, block.timestamp);\\n    }\\n\\n\\tfunction memberEntrance(\\n        address _uplineAddress,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline,\\n        uint _amount\\n    ) public {\\n        if (!members[msg.sender].isActive) {\\n            _createMember(payable(msg.sender));\\n        }\\n        if (_uplineAddress != address(0)) {\\n            enrolled[_uplineAddress].push(msg.sender);\\n        } else {\\n            enrolled[_businessWallet].push(msg.sender);\\n        }\\n\\n        _firstDeposit(_amount, _uplineAddress, _secondLevelUpline, _thirtLevelUpline);\\n    }\\n\\n\\tfunction deposit(uint256 _amount) external onlyOwner {\\n        uint256 realBalance = getCurrentContractBalance() + _amount;\\n        require(realBalance <= _MAX_CONTRACT_BALANCE, \\\"El deposito no puede superar el limite del contrato\\\");\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 currentBalance = getCurrentContractBalance();\\n        _withdraw(msg.sender, currentBalance);\\n    }\\n\\n    function paymentCommissions (\\n        uint256 _paymentAmount,\\n        address _memberAddress,\\n        string memory _adminKey\\n    )\\n        external \\n        verifyAdminKey(_adminKey)\\n        checkValidAddress(_memberAddress)\\n    {\\n        require(getCurrentContractBalance() >= _paymentAmount, \\\"Contrato no cuenta con suficientes fondos\\\");\\n        _processPayment(_memberAddress, _paymentAmount);\\n        emit CommissionPaid(_memberAddress, _paymentAmount, block.timestamp);\\n    }\\n\\n    function paymentForPulls (\\n        uint256 _paymentAmount,\\n        address _memberAddress,\\n        string memory _adminKey\\n    )\\n        external \\n        verifyAdminKey(_adminKey)\\n        checkValidAddress(_memberAddress)\\n    {\\n        require(getCurrentContractBalance() >= _paymentAmount, \\\"Contrato no cuenta con suficientes fondos\\\");\\n        _processPayment(_memberAddress, _paymentAmount);\\n        emit PullPayment(_memberAddress, _paymentAmount, block.timestamp);\\n    }\\n\\n    function liquidateMemberFunds(\\n        uint _paymentAmount,\\n        address _memberAddress,\\n        string memory _adminKey\\n    ) \\n        external\\n        verifyAdminKey(_adminKey)\\n        checkValidAddress(_memberAddress)\\n    {\\n        Member storage currentMember = members[_memberAddress];\\n        require(currentMember.isActive, \\\"Miembro no activo\\\");\\n        require(currentMember.balance >= _paymentAmount, \\\"Monto invalido\\\");\\n\\n        currentMember.balance -= _paymentAmount;\\n        _totalBalance -= _paymentAmount;\\n        _withdraw(_memberAddress, _paymentAmount);\\n        emit WithdrawalMember(_memberAddress, _paymentAmount, block.timestamp);\\n    }\\n\\n    function depositMemberFunds(\\n        uint _amount,\\n        address _firstLevelUpline,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline\\n    ) public onlyActiveMember {\\n        require(_amount >= _MIN_AMOUNT_TO_DEPOSIT, \\\"Deposito no alcanza monto minimo\\\");\\n        require(_amount % _DEPOSIT_MULTIPLE == 0, \\\"Valor del deposito no es valido\\\");\\n        require(_totalBalance + _amount <= _MAX_CONTRACT_BALANCE, \\\"Deposito supera el monto soportado por el contrato\\\");\\n\\n        _deposit(msg.sender, _amount);\\n\\n        // Update total balance in contract\\n        _totalBalance += _amount;\\n\\n        members[msg.sender].balance += _amount;\\n        emit NewSaving(msg.sender, _amount, block.timestamp);\\n\\n        uint256 commissionFirstLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_ONE);\\n        uint256 commissionSecondLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_TWO);\\n        uint256 commissionThirtLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_THREE);\\n        uint256 totalCommissions = commissionFirstLevel + commissionSecondLevel + commissionThirtLevel;\\n\\n        uint256 finalDeposit = _amount - totalCommissions;\\n        require(finalDeposit > totalCommissions, \\\"Error en el calculo de comisiones\\\");\\n\\n        // Payment to uplines in case exists\\n        if (_firstLevelUpline != address(0)) {\\n            _processPayment(_firstLevelUpline, commissionFirstLevel);\\n            emit CommissionPaid(_firstLevelUpline, commissionFirstLevel, block.timestamp);\\n            commissionFirstLevel = 0;\\n        }\\n        if (_secondLevelUpline != address(0)) {\\n            _processPayment(_secondLevelUpline, commissionSecondLevel);\\n            emit CommissionPaid(_secondLevelUpline, commissionSecondLevel, block.timestamp);\\n            commissionSecondLevel = 0;\\n        }\\n        if (_thirtLevelUpline != address(0)) {\\n            _processPayment(_thirtLevelUpline, commissionThirtLevel);\\n            emit CommissionPaid(_thirtLevelUpline, commissionFirstLevel, block.timestamp);\\n            commissionThirtLevel = 0;\\n        }\\n\\n        // final calculation after to pay uplines\\n        finalDeposit += (commissionFirstLevel + commissionSecondLevel + commissionThirtLevel);\\n\\n        _processPayment(_businessWallet, finalDeposit);\\n\\n        // Update total balance in contract with total amount per deposit\\n        _totalBalance += _amount;\\n\\n        emit TransferBusiness(msg.sender, finalDeposit, block.timestamp);\\n\\n    }\\n\\n\\tfunction _processPayment(address _to, uint256 _amount) private {\\n        require(_amount > 0, \\\"La cantidad a transferir debe ser mayor a cero\\\");\\n        token.safeTransfer(_to, _amount);\\n    }\\n\\n    function _firstDeposit(\\n        uint256 _amount,\\n        address _uplineAddress,\\n        address _secondLevelUpline,\\n        address _thirtLevelUpline\\n    ) private onlyActiveMember {\\n        uint256 membership = _MEMBERSHIP_PAYMENT_TO_BUSINESS + _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n        uint256 firstDeposit = _amount - membership;\\n\\n        require(_amount >= _MIN_AMOUNT_TO_DEPOSIT + membership, \\\"Monto insuficiente\\\");\\n        _deposit(msg.sender, membership);\\n\\n        // Membership payment to bussiness\\n        _processPayment(_businessWallet, _MEMBERSHIP_PAYMENT_TO_BUSINESS);\\n        emit MembershipPaid(msg.sender, _MEMBERSHIP_PAYMENT_TO_BUSINESS, block.timestamp);\\n        // Membership payment to upline\\n        _processPayment(_uplineAddress, _MEMBERSHIP_PAYMENT_TO_UPLINE);\\n        emit CommissionPaid(_uplineAddress, _MEMBERSHIP_PAYMENT_TO_UPLINE, block.timestamp);\\n\\n        // For saving\\n        depositMemberFunds(firstDeposit, _uplineAddress, _secondLevelUpline, _thirtLevelUpline);\\n\\n        emit NewSaving(msg.sender, firstDeposit, block.timestamp);\\n    }\\n\\n    function _deposit(\\n        address _from,\\n        uint256 _amount\\n    ) private {\\n        require(token.allowance(_from, address(this)) >= _amount, \\\"Insufficient allowance\\\");\\n        require(_amount <= token.balanceOf(_from), \\\"No cuentas con USDT en tu wallet\\\");\\n        require(_amount > 0, \\\"Deposito no puede ser vacio\\\");\\n        token.safeTransferFrom(_from, address(this), _amount);\\n        emit DepositContract(_from, _amount, block.timestamp);\\n    }\\n\\n    function _withdraw(\\n        address _to,\\n        uint256 _amount\\n    ) \\n        private\\n        nonReentrant\\n    {\\n        require(getCurrentContractBalance() >= _amount, \\\"Contrato no cuenta con suficientes fondos\\\");\\n        _processPayment(_to, _amount);\\n        emit WithdrawalContract(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _calculateCommission(\\n        uint256 _amount,\\n        uint256 _refundPercent\\n    )\\n        private\\n        pure\\n        returns (uint)\\n    {\\n        return (_amount * _refundPercent) / 100;\\n    }\\n\\n\\tfunction _createMember(address payable _newMember) \\n        private\\n        checkValidAddress(_newMember)\\n    {\\n        members[_newMember] = Member({\\n            memberWallet: _newMember,\\n            isActive: true,\\n            balance: 0\\n        });\\n\\n        _totalMembers++;\\n        emit NewMember(_newMember, block.timestamp);\\n    }\\n    \\n\\treceive() external payable {\\n\\t\\trevert(\\\"Ether not accepted\\\");\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\trevert(\\\"Function not supported\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xd7f42c890e0b906a270f5eb98e764ff4f33e967937eedac9279bebe450e607a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c806394fbe84611610118578063cc2ec6ab116100a0578063e341c7db1161006f578063e341c7db14610781578063f0fb9f15146107aa578063f2fde38b146107d3578063fc0c546a146107fc578063fe251f7e1461082757610248565b8063cc2ec6ab146106c7578063d1947705146106f0578063d59392de1461072d578063d64b28101461075857610248565b8063b7130870116100e7578063b7130870146105e2578063b9ce48a61461060d578063bcf3f6ff14610636578063bd69c12714610661578063ca55753a1461068a57610248565b806394fbe8461461053a578063aa331db514610565578063b315ea3614610590578063b6b55f25146105b957610248565b806348d5c4011161019b57806377f339751161016a57806377f33975146104515780637f7efd1a1461047c57806388e19794146104b95780638da5cb5b146104e45780638f1803051461050f57610248565b806348d5c401146103bd5780635afe70d7146103e65780636d7900811461040f578063715018a61461043a57610248565b80632f3f199c116101d75780632f3f199c14610329578063361f1ad3146103525780633ccfd60b1461037d5780633f37da5f1461039457610248565b80630109705c146102835780630b760cd9146102ae578063181d00eb146102d7578063241766471461030057610248565b36610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f906133e8565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027a90613454565b60405180910390fd5b34801561028f57600080fd5b50610298610850565b6040516102a59190613490565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d09190613507565b610867565b005b3480156102e357600080fd5b506102fe60048036038101906102f99190613507565b610939565b005b34801561030c57600080fd5b506103276004803603810190610322919061370e565b610a8f565b005b34801561033557600080fd5b50610350600480360381019061034b9190613507565b610cdb565b005b34801561035e57600080fd5b50610367610ddc565b604051610374919061378c565b60405180910390f35b34801561038957600080fd5b50610392610e02565b005b3480156103a057600080fd5b506103bb60048036038101906103b69190613507565b610e23565b005b3480156103c957600080fd5b506103e460048036038101906103df91906137d3565b610f79565b005b3480156103f257600080fd5b5061040d6004803603810190610408919061383e565b611065565b005b34801561041b57600080fd5b506104246111b0565b604051610431919061387a565b60405180910390f35b34801561044657600080fd5b5061044f611253565b005b34801561045d57600080fd5b50610466611267565b604051610473919061378c565b60405180910390f35b34801561048857600080fd5b506104a3600480360381019061049e9190613895565b61128d565b6040516104b091906138dd565b60405180910390f35b3480156104c557600080fd5b506104ce6112e6565b6040516104db919061378c565b60405180910390f35b3480156104f057600080fd5b506104f961130c565b6040516105069190613907565b60405180910390f35b34801561051b57600080fd5b50610524611335565b604051610531919061387a565b60405180910390f35b34801561054657600080fd5b5061054f61136d565b60405161055c9190613490565b60405180910390f35b34801561057157600080fd5b5061057a611384565b6040516105879190613907565b60405180910390f35b34801561059c57600080fd5b506105b760048036038101906105b29190613922565b6113ae565b005b3480156105c557600080fd5b506105e060048036038101906105db9190613989565b6115ba565b005b3480156105ee57600080fd5b506105f761165a565b604051610604919061378c565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f919061370e565b611680565b005b34801561064257600080fd5b5061064b611806565b6040516106589190613490565b60405180910390f35b34801561066d57600080fd5b50610688600480360381019061068391906137d3565b61181d565b005b34801561069657600080fd5b506106b160048036038101906106ac9190613895565b611909565b6040516106be919061387a565b60405180910390f35b3480156106d357600080fd5b506106ee60048036038101906106e991906139b6565b611955565b005b3480156106fc57600080fd5b5061071760048036038101906107129190613895565b611f6b565b604051610724919061387a565b60405180910390f35b34801561073957600080fd5b50610742611fb7565b60405161074f919061378c565b60405180910390f35b34801561076457600080fd5b5061077f600480360381019061077a9190613a1d565b611fdd565b005b34801561078d57600080fd5b506107a860048036038101906107a391906137d3565b612058565b005b3480156107b657600080fd5b506107d160048036038101906107cc919061370e565b612144565b005b3480156107df57600080fd5b506107fa60048036038101906107f59190613895565b6122ca565b005b34801561080857600080fd5b5061081161234d565b60405161081e9190613ac5565b60405180910390f35b34801561083357600080fd5b5061084e60048036038101906108499190613507565b612373565b005b6000600960109054906101000a900460ff16905090565b61086f6124c9565b6000816fffffffffffffffffffffffffffffffff16116108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb90613b2c565b60405180910390fd5b80600860006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a814260405161092e929190613bc9565b60405180910390a150565b6109416124c9565b6000816fffffffffffffffffffffffffffffffff1611610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90613c77565b60405180910390fd5b600760109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610610a1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1190613d09565b60405180910390fd5b80600860106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610a84929190613d75565b60405180910390a150565b8060025481604051602001610aa49190613e22565b6040516020818303038152906040528051906020012014610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190613eab565b60405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190613f17565b60405180910390fd5b6000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160149054906101000a900460ff16610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf590613f83565b60405180910390fd5b8581600101541015610c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3c90613fef565b60405180910390fd5b85816001016000828254610c59919061403e565b925050819055508560066000828254610c72919061403e565b92505081905550610c838587612547565b8473ffffffffffffffffffffffffffffffffffffffff167f8d39944b06acdac638a7aa16ecba5a5b350aba42c775308dab4c947d91f4f18a8742604051610ccb929190614072565b60405180910390a2505050505050565b610ce36124c9565b600760009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1611610d67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5e906140e7565b60405180910390fd5b80600760106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610dd1929190614153565b60405180910390a150565b6000600760009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b610e0a6124c9565b6000610e146111b0565b9050610e203382612547565b50565b610e2b6124c9565b6000816fffffffffffffffffffffffffffffffff1611610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7790614201565b60405180910390fd5b600760109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb9061426d565b60405180910390fd5b80600760006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610f6e9291906142d9565b60405180910390a150565b610f816124c9565b60008160ff1611610fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbe90614387565b60405180910390fd5b60648160ff16111561100e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100590614419565b60405180910390fd5b80600960126101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a814260405161105a9291906144dc565b60405180910390a150565b61106d6124c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390614564565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611126816122ca565b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9d6ad1956bc285ee763af0abf79be6b40f0fe495e250bd80c1bae2293ecc1df8426040516111a591906145d0565b60405180910390a350565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161120d9190613907565b602060405180830381865afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190614613565b905090565b61125b6124c9565b61126560006125ff565b565b6000600960009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff169050919050565b6000600860109054906101000a90046fffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905090565b6000600960129054906101000a900460ff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1661140c5761140b336126c3565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146114e557600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115a8565b600b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6115b4818585856128d2565b50505050565b6115c26124c9565b6000816115cd6111b0565b6115d79190614640565b9050600760109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681111561164c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611643906146e6565b60405180910390fd5b6116563383612c2d565b5050565b6000600760109054906101000a90046fffffffffffffffffffffffffffffffff16905090565b80600254816040516020016116959190613e22565b60405160208183030381529060405280519060200120146116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e290613eab565b60405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361175b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175290613f17565b60405180910390fd5b846117646111b0565b10156117a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179c90614778565b60405180910390fd5b6117af8486612ed1565b8373ffffffffffffffffffffffffffffffffffffffff167f07bc9ac17674ef4eb653c6def0a3ffe20ec342dbc317888f3985773922f51e8e86426040516117f7929190614072565b60405180910390a25050505050565b6000600960119054906101000a900460ff16905090565b6118256124c9565b60008160ff161161186b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186290614387565b60405180910390fd5b60648160ff1611156118b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a9906147e4565b60405180910390fd5b80600960116101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a81426040516118fe929190614876565b60405180910390a150565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff166119e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119db90613f83565b60405180910390fd5b600760009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16841015611a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4e906148fe565b60405180910390fd5b6000600860009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1685611a95919061494d565b14611ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acc906149ca565b60405180910390fd5b600760109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1684600654611b149190614640565b1115611b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4c90614a5c565b60405180910390fd5b611b5f3385612c2d565b8360066000828254611b719190614640565b9250508190555083600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611bca9190614640565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e08542604051611c19929190614072565b60405180910390a26000611c3f85600960109054906101000a900460ff1660ff16612f65565b90506000611c5f86600960119054906101000a900460ff1660ff16612f65565b90506000611c7f87600960129054906101000a900460ff1660ff16612f65565b90506000818385611c909190614640565b611c9a9190614640565b905060008189611caa919061403e565b9050818111611cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce590614aee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614611d8157611d2c8886612ed1565b8773ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d28642604051611d74929190614072565b60405180910390a2600094505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611e1457611dbf8785612ed1565b8673ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d28542604051611e07929190614072565b60405180910390a2600093505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611ea757611e528684612ed1565b8573ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d28642604051611e9a929190614072565b60405180910390a2600092505b828486611eb49190614640565b611ebe9190614640565b81611ec99190614640565b9050611ef7600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612ed1565b8860066000828254611f099190614640565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f3428e989e797df55e8af7c22735e19d98f469023d200174911b2c8e0870240fe8242604051611f58929190614072565b60405180910390a2505050505050505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000600860009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b611fe56124c9565b80604051602001611ff69190613e22565b604051602081830303815290604052805190602001206002819055503373ffffffffffffffffffffffffffffffffffffffff167fd0451c3e2c460a223310e1a5edaff1ffb952141c5c9c48b9796b5a36dbc1f73060405160405180910390a250565b6120606124c9565b60008160ff16116120a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209d90614387565b60405180910390fd5b60648160ff1611156120ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e4906147e4565b60405180910390fd5b80600960106101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051612139929190614b80565b60405180910390a150565b80600254816040516020016121599190613e22565b60405160208183030381529060405280519060200120146121af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a690613eab565b60405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361221f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221690613f17565b60405180910390fd5b846122286111b0565b1015612269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226090614778565b60405180910390fd5b6122738486612ed1565b8373ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d286426040516122bb929190614072565b60405180910390a25050505050565b6122d26124c9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233890614c2e565b60405180910390fd5b61234a816125ff565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61237b6124c9565b6000816fffffffffffffffffffffffffffffffff16116123d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c790613c77565b60405180910390fd5b600760109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610612454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244b90614cc0565b60405180910390fd5b80600960006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a81426040516124be929190614d2c565b60405180910390a150565b6124d1612f87565b73ffffffffffffffffffffffffffffffffffffffff166124ef61130c565b73ffffffffffffffffffffffffffffffffffffffff1614612545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253c90614db4565b60405180910390fd5b565b61254f612f8f565b806125586111b0565b1015612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259090614778565b60405180910390fd5b6125a38282612ed1565b3373ffffffffffffffffffffffffffffffffffffffff167f6dc924e950dd523781352d0a7468f2ee2905084dea2bb7411d7996224ce75a8882426040516125eb929190614072565b60405180910390a26125fb612fde565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272a90613f17565b60405180910390fd5b60405180606001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016000815250600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550604082015181600101559050506005600081819054906101000a90046fffffffffffffffffffffffffffffffff168092919061284990614dd4565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550508173ffffffffffffffffffffffffffffffffffffffff167f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c283426040516128c6919061387a565b60405180910390a25050565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16612961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295890613f83565b60405180910390fd5b6000600960009054906101000a90046fffffffffffffffffffffffffffffffff16600860109054906101000a90046fffffffffffffffffffffffffffffffff166129ab9190614e0c565b6fffffffffffffffffffffffffffffffff169050600081866129cd919061403e565b905081600760009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16612a0b9190614640565b861015612a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4490614e9c565b60405180910390fd5b612a573383612c2d565b612ab3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16612ed1565b3373ffffffffffffffffffffffffffffffffffffffff167f8fed26ea05e17903891c5c2a70ac7ce2aeafbb48acf403b9defdb2c96ab2e5c3600860109054906101000a90046fffffffffffffffffffffffffffffffff1642604051612b19929190614ebc565b60405180910390a2612b5b85600960009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16612ed1565b8473ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d2600960009054906101000a90046fffffffffffffffffffffffffffffffff1642604051612bc1929190614ebc565b60405180910390a2612bd581868686611955565b3373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e08242604051612c1d929190614072565b60405180910390a2505050505050565b80600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401612c8b929190614ee5565b602060405180830381865afa158015612ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccc9190614613565b1015612d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0490614f5a565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401612d689190613907565b602060405180830381865afa158015612d85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da99190614613565b811115612deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de290614fc6565b60405180910390fd5b60008111612e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2590615032565b60405180910390fd5b612e7d823083600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612fe7909392919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f695b93e5f85b6ac34424e1299d94bc079fb230aa7e5568a4e2e6214828cc936b8242604051612ec5929190614072565b60405180910390a25050565b60008111612f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0b906150c4565b60405180910390fd5b612f618282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130709092919063ffffffff16565b5050565b600060648284612f7591906150e4565b612f7f9190615126565b905092915050565b600033905090565b600260015403612fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fcb906151a3565b60405180910390fd5b6002600181905550565b60018081905550565b61306a846323b872dd60e01b858585604051602401613008939291906151c3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506130f6565b50505050565b6130f18363a9059cbb60e01b848460405160240161308f9291906151fa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506130f6565b505050565b6000613158826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131be9092919063ffffffff16565b905060008151148061317a575080806020019051810190613179919061524f565b5b6131b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131b0906152ee565b60405180910390fd5b505050565b60606131cd84846000856131d6565b90509392505050565b60608247101561321b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161321290615380565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161324491906153e7565b60006040518083038185875af1925050503d8060008114613281576040519150601f19603f3d011682016040523d82523d6000602084013e613286565b606091505b5091509150613297878383876132a3565b92505050949350505050565b606083156133055760008351036132fd576132bd85613318565b6132fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132f39061544a565b60405180910390fd5b5b829050613310565b61330f838361333b565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561334e5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338291906154a3565b60405180910390fd5b600082825260208201905092915050565b7f4574686572206e6f742061636365707465640000000000000000000000000000600082015250565b60006133d260128361338b565b91506133dd8261339c565b602082019050919050565b60006020820190508181036000830152613401816133c5565b9050919050565b7f46756e6374696f6e206e6f7420737570706f7274656400000000000000000000600082015250565b600061343e60168361338b565b915061344982613408565b602082019050919050565b6000602082019050818103600083015261346d81613431565b9050919050565b600060ff82169050919050565b61348a81613474565b82525050565b60006020820190506134a56000830184613481565b92915050565b6000604051905090565b600080fd5b600080fd5b60006fffffffffffffffffffffffffffffffff82169050919050565b6134e4816134bf565b81146134ef57600080fd5b50565b600081359050613501816134db565b92915050565b60006020828403121561351d5761351c6134b5565b5b600061352b848285016134f2565b91505092915050565b6000819050919050565b61354781613534565b811461355257600080fd5b50565b6000813590506135648161353e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135958261356a565b9050919050565b6135a58161358a565b81146135b057600080fd5b50565b6000813590506135c28161359c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61361b826135d2565b810181811067ffffffffffffffff8211171561363a576136396135e3565b5b80604052505050565b600061364d6134ab565b90506136598282613612565b919050565b600067ffffffffffffffff821115613679576136786135e3565b5b613682826135d2565b9050602081019050919050565b82818337600083830152505050565b60006136b16136ac8461365e565b613643565b9050828152602081018484840111156136cd576136cc6135cd565b5b6136d884828561368f565b509392505050565b600082601f8301126136f5576136f46135c8565b5b813561370584826020860161369e565b91505092915050565b600080600060608486031215613727576137266134b5565b5b600061373586828701613555565b9350506020613746868287016135b3565b925050604084013567ffffffffffffffff811115613767576137666134ba565b5b613773868287016136e0565b9150509250925092565b613786816134bf565b82525050565b60006020820190506137a1600083018461377d565b92915050565b6137b081613474565b81146137bb57600080fd5b50565b6000813590506137cd816137a7565b92915050565b6000602082840312156137e9576137e86134b5565b5b60006137f7848285016137be565b91505092915050565b600061380b8261356a565b9050919050565b61381b81613800565b811461382657600080fd5b50565b60008135905061383881613812565b92915050565b600060208284031215613854576138536134b5565b5b600061386284828501613829565b91505092915050565b61387481613534565b82525050565b600060208201905061388f600083018461386b565b92915050565b6000602082840312156138ab576138aa6134b5565b5b60006138b9848285016135b3565b91505092915050565b60008115159050919050565b6138d7816138c2565b82525050565b60006020820190506138f260008301846138ce565b92915050565b6139018161358a565b82525050565b600060208201905061391c60008301846138f8565b92915050565b6000806000806080858703121561393c5761393b6134b5565b5b600061394a878288016135b3565b945050602061395b878288016135b3565b935050604061396c878288016135b3565b925050606061397d87828801613555565b91505092959194509250565b60006020828403121561399f5761399e6134b5565b5b60006139ad84828501613555565b91505092915050565b600080600080608085870312156139d0576139cf6134b5565b5b60006139de87828801613555565b94505060206139ef878288016135b3565b9350506040613a00878288016135b3565b9250506060613a11878288016135b3565b91505092959194509250565b600060208284031215613a3357613a326134b5565b5b600082013567ffffffffffffffff811115613a5157613a506134ba565b5b613a5d848285016136e0565b91505092915050565b6000819050919050565b6000613a8b613a86613a818461356a565b613a66565b61356a565b9050919050565b6000613a9d82613a70565b9050919050565b6000613aaf82613a92565b9050919050565b613abf81613aa4565b82525050565b6000602082019050613ada6000830184613ab6565b92915050565b7f4d756c7469706c65206d7573742062652067726561746572207468616e203000600082015250565b6000613b16601f8361338b565b9150613b2182613ae0565b602082019050919050565b60006020820190508181036000830152613b4581613b09565b9050919050565b7f4445504f5349545f4d554c5449504c4500000000000000000000000000000000600082015250565b6000613b8260108361338b565b9150613b8d82613b4c565b602082019050919050565b6000613bb3613bae613ba9846134bf565b613a66565b613534565b9050919050565b613bc381613b98565b82525050565b60006060820190508181036000830152613be281613b75565b9050613bf16020830185613bba565b613bfe604083018461386b565b9392505050565b7f4d656d62657273686970207061796d656e7473206d75737420626520706f736960008201527f7469766500000000000000000000000000000000000000000000000000000000602082015250565b6000613c6160248361338b565b9150613c6c82613c05565b604082019050919050565b60006020820190508181036000830152613c9081613c54565b9050919050565b7f5061796d656e7420746f20427573696e6573732063616e6e6f7420657863656560008201527f64206d6178000000000000000000000000000000000000000000000000000000602082015250565b6000613cf360258361338b565b9150613cfe82613c97565b604082019050919050565b60006020820190508181036000830152613d2281613ce6565b9050919050565b7f4d454d424552534849505f5041594d454e545f544f5f425553494e4553530000600082015250565b6000613d5f601e8361338b565b9150613d6a82613d29565b602082019050919050565b60006060820190508181036000830152613d8e81613d52565b9050613d9d6020830185613bba565b613daa604083018461386b565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015613de5578082015181840152602081019050613dca565b60008484015250505050565b6000613dfc82613db1565b613e068185613dbc565b9350613e16818560208601613dc7565b80840191505092915050565b6000613e2e8284613df1565b915081905092915050565b7f50616c6162726120636c6176652064652061646d696e6973747261646f72206e60008201527f6f2076616c696461000000000000000000000000000000000000000000000000602082015250565b6000613e9560288361338b565b9150613ea082613e39565b604082019050919050565b60006020820190508181036000830152613ec481613e88565b9050919050565b7f446972656363696f6e20696e76616c6964610000000000000000000000000000600082015250565b6000613f0160128361338b565b9150613f0c82613ecb565b602082019050919050565b60006020820190508181036000830152613f3081613ef4565b9050919050565b7f4d69656d62726f206e6f2061637469766f000000000000000000000000000000600082015250565b6000613f6d60118361338b565b9150613f7882613f37565b602082019050919050565b60006020820190508181036000830152613f9c81613f60565b9050919050565b7f4d6f6e746f20696e76616c69646f000000000000000000000000000000000000600082015250565b6000613fd9600e8361338b565b9150613fe482613fa3565b602082019050919050565b6000602082019050818103600083015261400881613fcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061404982613534565b915061405483613534565b925082820390508181111561406c5761406b61400f565b5b92915050565b6000604082019050614087600083018561386b565b614094602083018461386b565b9392505050565b7f4d6178206d75737420657863656564206d696e00000000000000000000000000600082015250565b60006140d160138361338b565b91506140dc8261409b565b602082019050919050565b60006020820190508181036000830152614100816140c4565b9050919050565b7f4d41585f434f4e54524143545f42414c414e4345000000000000000000000000600082015250565b600061413d60148361338b565b915061414882614107565b602082019050919050565b6000606082019050818103600083015261416c81614130565b905061417b6020830185613bba565b614188604083018461386b565b9392505050565b7f4d696e696d756d20616d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b60006141eb60258361338b565b91506141f68261418f565b604082019050919050565b6000602082019050818103600083015261421a816141de565b9050919050565b7f4d696e2063616e6e6f7420657863656564206d61780000000000000000000000600082015250565b600061425760158361338b565b915061426282614221565b602082019050919050565b600060208201905081810360008301526142868161424a565b9050919050565b7f4d494e5f414d4f554e545f544f5f4445504f5349540000000000000000000000600082015250565b60006142c360158361338b565b91506142ce8261428d565b602082019050919050565b600060608201905081810360008301526142f2816142b6565b90506143016020830185613bba565b61430e604083018461386b565b9392505050565b7f436f6d6d697373696f6e207061796d656e7473206d75737420626520706f736960008201527f7469766500000000000000000000000000000000000000000000000000000000602082015250565b600061437160248361338b565b915061437c82614315565b604082019050919050565b600060208201905081810360008301526143a081614364565b9050919050565b7f546f74616c20636f6d6d697373696f6e2063616e6e6f7420657863656564203160008201527f3030250000000000000000000000000000000000000000000000000000000000602082015250565b600061440360238361338b565b915061440e826143a7565b604082019050919050565b60006020820190508181036000830152614432816143f6565b9050919050565b7f434f4d4d495353494f4e5f5045525f54484952545f4c4556454c5f555044415460008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b600061449560228361338b565b91506144a082614439565b604082019050919050565b60006144c66144c16144bc84613474565b613a66565b613534565b9050919050565b6144d6816144ab565b82525050565b600060608201905081810360008301526144f581614488565b905061450460208301856144cd565b614511604083018461386b565b9392505050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b600061454e600f8361338b565b915061455982614518565b602082019050919050565b6000602082019050818103600083015261457d81614541565b9050919050565b7f425553494e4553535f57414c4c45540000000000000000000000000000000000600082015250565b60006145ba600f8361338b565b91506145c582614584565b602082019050919050565b600060408201905081810360008301526145e9816145ad565b90506145f8602083018461386b565b92915050565b60008151905061460d8161353e565b92915050565b600060208284031215614629576146286134b5565b5b6000614637848285016145fe565b91505092915050565b600061464b82613534565b915061465683613534565b925082820190508082111561466e5761466d61400f565b5b92915050565b7f456c206465706f7369746f206e6f207075656465207375706572617220656c2060008201527f6c696d6974652064656c20636f6e747261746f00000000000000000000000000602082015250565b60006146d060338361338b565b91506146db82614674565b604082019050919050565b600060208201905081810360008301526146ff816146c3565b9050919050565b7f436f6e747261746f206e6f206375656e746120636f6e20737566696369656e7460008201527f657320666f6e646f730000000000000000000000000000000000000000000000602082015250565b600061476260298361338b565b915061476d82614706565b604082019050919050565b6000602082019050818103600083015261479181614755565b9050919050565b7f436f6d6d697373696f6e2063616e6e6f74206578636565642031303025000000600082015250565b60006147ce601d8361338b565b91506147d982614798565b602082019050919050565b600060208201905081810360008301526147fd816147c1565b9050919050565b7f434f4d4d495353494f4e5f5045525f5345434f4e445f4c4556454c5f5550444160008201527f5445440000000000000000000000000000000000000000000000000000000000602082015250565b600061486060238361338b565b915061486b82614804565b604082019050919050565b6000606082019050818103600083015261488f81614853565b905061489e60208301856144cd565b6148ab604083018461386b565b9392505050565b7f4465706f7369746f206e6f20616c63616e7a61206d6f6e746f206d696e696d6f600082015250565b60006148e860208361338b565b91506148f3826148b2565b602082019050919050565b60006020820190508181036000830152614917816148db565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061495882613534565b915061496383613534565b9250826149735761497261491e565b5b828206905092915050565b7f56616c6f722064656c206465706f7369746f206e6f2065732076616c69646f00600082015250565b60006149b4601f8361338b565b91506149bf8261497e565b602082019050919050565b600060208201905081810360008301526149e3816149a7565b9050919050565b7f4465706f7369746f2073757065726120656c206d6f6e746f20736f706f72746160008201527f646f20706f7220656c20636f6e747261746f0000000000000000000000000000602082015250565b6000614a4660328361338b565b9150614a51826149ea565b604082019050919050565b60006020820190508181036000830152614a7581614a39565b9050919050565b7f4572726f7220656e20656c2063616c63756c6f20646520636f6d6973696f6e6560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614ad860218361338b565b9150614ae382614a7c565b604082019050919050565b60006020820190508181036000830152614b0781614acb565b9050919050565b7f434f4d4d495353494f4e5f5045525f46495253545f4c4556454c5f555044415460008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b6000614b6a60228361338b565b9150614b7582614b0e565b604082019050919050565b60006060820190508181036000830152614b9981614b5d565b9050614ba860208301856144cd565b614bb5604083018461386b565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614c1860268361338b565b9150614c2382614bbc565b604082019050919050565b60006020820190508181036000830152614c4781614c0b565b9050919050565b7f5061796d656e7420746f2055706c696e652063616e6e6f74206578636565642060008201527f6d61780000000000000000000000000000000000000000000000000000000000602082015250565b6000614caa60238361338b565b9150614cb582614c4e565b604082019050919050565b60006020820190508181036000830152614cd981614c9d565b9050919050565b7f4d454d424552534849505f5041594d454e545f544f5f55504c494e4500000000600082015250565b6000614d16601c8361338b565b9150614d2182614ce0565b602082019050919050565b60006060820190508181036000830152614d4581614d09565b9050614d546020830185613bba565b614d61604083018461386b565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614d9e60208361338b565b9150614da982614d68565b602082019050919050565b60006020820190508181036000830152614dcd81614d91565b9050919050565b6000614ddf826134bf565b91506fffffffffffffffffffffffffffffffff8203614e0157614e0061400f565b5b600182019050919050565b6000614e17826134bf565b9150614e22836134bf565b925082820190506fffffffffffffffffffffffffffffffff811115614e4a57614e4961400f565b5b92915050565b7f4d6f6e746f20696e737566696369656e74650000000000000000000000000000600082015250565b6000614e8660128361338b565b9150614e9182614e50565b602082019050919050565b60006020820190508181036000830152614eb581614e79565b9050919050565b6000604082019050614ed16000830185613bba565b614ede602083018461386b565b9392505050565b6000604082019050614efa60008301856138f8565b614f0760208301846138f8565b9392505050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000614f4460168361338b565b9150614f4f82614f0e565b602082019050919050565b60006020820190508181036000830152614f7381614f37565b9050919050565b7f4e6f206375656e74617320636f6e205553445420656e2074752077616c6c6574600082015250565b6000614fb060208361338b565b9150614fbb82614f7a565b602082019050919050565b60006020820190508181036000830152614fdf81614fa3565b9050919050565b7f4465706f7369746f206e6f2070756564652073657220766163696f0000000000600082015250565b600061501c601b8361338b565b915061502782614fe6565b602082019050919050565b6000602082019050818103600083015261504b8161500f565b9050919050565b7f4c612063616e74696461642061207472616e736665726972206465626520736560008201527f72206d61796f722061206365726f000000000000000000000000000000000000602082015250565b60006150ae602e8361338b565b91506150b982615052565b604082019050919050565b600060208201905081810360008301526150dd816150a1565b9050919050565b60006150ef82613534565b91506150fa83613534565b925082820261510881613534565b9150828204841483151761511f5761511e61400f565b5b5092915050565b600061513182613534565b915061513c83613534565b92508261514c5761514b61491e565b5b828204905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061518d601f8361338b565b915061519882615157565b602082019050919050565b600060208201905081810360008301526151bc81615180565b9050919050565b60006060820190506151d860008301866138f8565b6151e560208301856138f8565b6151f2604083018461386b565b949350505050565b600060408201905061520f60008301856138f8565b61521c602083018461386b565b9392505050565b61522c816138c2565b811461523757600080fd5b50565b60008151905061524981615223565b92915050565b600060208284031215615265576152646134b5565b5b60006152738482850161523a565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006152d8602a8361338b565b91506152e38261527c565b604082019050919050565b60006020820190508181036000830152615307816152cb565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061536a60268361338b565b91506153758261530e565b604082019050919050565b600060208201905081810360008301526153998161535d565b9050919050565b600081519050919050565b600081905092915050565b60006153c1826153a0565b6153cb81856153ab565b93506153db818560208601613dc7565b80840191505092915050565b60006153f382846153b6565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000615434601d8361338b565b915061543f826153fe565b602082019050919050565b6000602082019050818103600083015261546381615427565b9050919050565b600061547582613db1565b61547f818561338b565b935061548f818560208601613dc7565b615498816135d2565b840191505092915050565b600060208201905081810360008301526154bd818461546a565b90509291505056fea26469706673582212208b0ffd8db4ae454d76ddb750456666a4eae2699265199f26ede35a34c36cd15164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1042,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_ADMIN_KEY",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1045,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)255"
      },
      {
        "astId": 1047,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_businessWallet",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 1049,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_totalMembers",
        "offset": 0,
        "slot": "5",
        "type": "t_uint128"
      },
      {
        "astId": 1051,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_totalBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1053,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MIN_AMOUNT_TO_DEPOSIT",
        "offset": 0,
        "slot": "7",
        "type": "t_uint128"
      },
      {
        "astId": 1055,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MAX_CONTRACT_BALANCE",
        "offset": 16,
        "slot": "7",
        "type": "t_uint128"
      },
      {
        "astId": 1057,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_DEPOSIT_MULTIPLE",
        "offset": 0,
        "slot": "8",
        "type": "t_uint128"
      },
      {
        "astId": 1059,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBERSHIP_PAYMENT_TO_BUSINESS",
        "offset": 16,
        "slot": "8",
        "type": "t_uint128"
      },
      {
        "astId": 1061,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBERSHIP_PAYMENT_TO_UPLINE",
        "offset": 0,
        "slot": "9",
        "type": "t_uint128"
      },
      {
        "astId": 1063,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_ONE",
        "offset": 16,
        "slot": "9",
        "type": "t_uint8"
      },
      {
        "astId": 1065,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_TWO",
        "offset": 17,
        "slot": "9",
        "type": "t_uint8"
      },
      {
        "astId": 1067,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_THREE",
        "offset": 18,
        "slot": "9",
        "type": "t_uint8"
      },
      {
        "astId": 1079,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "members",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Member)1074_storage)"
      },
      {
        "astId": 1084,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "enrolled",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)255": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Member)1074_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FFFBusiness.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)1074_storage"
      },
      "t_struct(Member)1074_storage": {
        "encoding": "inplace",
        "label": "struct FFFBusiness.Member",
        "members": [
          {
            "astId": 1069,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "memberWallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 1071,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "isActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1073,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}