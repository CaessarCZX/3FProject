{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/FFFBusiness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract FFFBusiness {\n    IERC20 public token;\n    uint private none;\n    address payable private _businessWallet;\n    uint128 private _totalMembers;\n\n   // To modify when contract is changed to USDT\n    uint128 private constant _MIN_AMOUNT_TO_TRANSFER = 2000 * 10**6; // 2000 USDT\n    uint128 private constant _MAX_MEMBER_BALANCE = 50000 * 10**6; // 50,000 USDT en ether (31.07 ETH)\n    uint128 private constant _DEPOSIT_MULTIPLE = 1000 * 10**6; // MÃºltiplo de 1000 USDT en ether (0.62 ETH)\n\n    uint8 private constant _REFUND_TIER_ONE = 5;\n    uint8 private constant _REFUND_TIER_TWO = 10;\n    uint8 private constant _REFUND_TIER_THREE = 15;\n    uint8 private constant _REFUND_TIER_FOUR = 20;\n    uint8 private constant _REFUND_TIER_FIVE = 25;\n\n    uint8 private constant _QUALIFY_TO_IMPROVE_RANK = 3;\n\n    enum Ranks { Sapphire, Pearl, Ruby, Emerald, Diamond }\n\n    struct Member {\n        address payable memberWallet;\n        bool isActive;\n        uint balance;\n        Ranks rank;\n    }\n\n    mapping(address => Member) private members;\n    mapping(address => address[]) private enrolled;\n\n    event Deposit(address indexed from, uint amount, uint timestamp);\n    event Transfer(address indexed from, address indexed to, uint amount, uint timestamp);\n    event WithdrawalRequest(address indexed to, uint amount, uint timestamp);\n    event Refund(address indexed to, uint amount, uint timestamp);\n    event NewMember(address indexed member, uint timestamp);\n    event NewRankReached(address indexed member, string rank, uint timestamp);\n\n    constructor(address tokenAddress) {\n        _businessWallet = payable(msg.sender);\n        token = IERC20(tokenAddress);  \n        createMember(_businessWallet);\n    }\n\n    modifier onlyActiveMember() {\n        require(members[msg.sender].isActive, \"Miembro no activo\");\n        _;\n    }\n\n    modifier checkValidAddress(address _recipient) {\n        require(_recipient != address(0), \"Direccion invalida\");\n        _;\n    }\n\n    // Only for development\n    function getBusinessWallet() public view returns (address) {\n        return _businessWallet;\n    }\n\n    function getTotalMembers() public view returns (uint) {\n        return _totalMembers;\n    }\n    // =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\n    receive() external payable {}\n\n    function deposit() public payable {}\n\n    function depositMemberFunds(uint _amount) public {\n        require(_amount <= token.balanceOf(msg.sender), \"No cuentas con USDT en tu wallet\");\n        require(_amount >= _MIN_AMOUNT_TO_TRANSFER, \"Deposito minimo es de 2000 USDT\");\n        require(_amount % _DEPOSIT_MULTIPLE == 0, \"Solo puede depositar de mil en mil\");\n\n        Member storage member = members[msg.sender];\n        uint newTotalBalance = member.balance + _amount;\n        require(newTotalBalance <= _MAX_MEMBER_BALANCE, \"Has alcanzado el limite maxiomo de 50,000 USDT\");\n\n        require(token.transferFrom(msg.sender, address(this), _amount), \"Transferencia fallida\");\n\n        member.balance += _amount;\n        emit Deposit(msg.sender, _amount, block.timestamp);\n\n        uint refundToMember = _calculateRefund(_amount, member.rank);\n        uint refundToBusiness = _amount - refundToMember;\n\n        _processPayment(_businessWallet, refundToBusiness);\n        _processPayment(payable(msg.sender), refundToMember);\n        emit Refund(msg.sender, refundToMember, block.timestamp);\n    }\n\n    function memberEntrance(address _uplineAddress, uint _amount) public {\n        if (!members[msg.sender].isActive) {\n            createMember(payable(msg.sender));\n        }\n        if (_uplineAddress != address(0)) {\n            enrolled[_uplineAddress].push(msg.sender);\n            _updateMemberRank(_uplineAddress);\n        }\n\n        depositMemberFunds(_amount);\n    }\n\n    function getMemberBalance(address _currentMember) public view returns(uint) {\n        return members[_currentMember].balance;\n    }\n\n    function getTotalAffiliatesPerMember(address _currentMember) public view returns(uint) {\n        return enrolled[_currentMember].length;\n    }\n\n    function checkActiveMember(address _member) public view returns(bool) {\n        return members[_member].isActive;\n    }\n\n    function _processPayment(address payable _to, uint _amount) private {\n        require(_amount > 0, \"La cantidad a tranferir debe ser mayor a cero\");\n        require(token.transfer(_to, _amount), \"Ha fallado la tranferencia\");\n    }\n\n    function _calculateRefund(uint _amount, Ranks _rank) private pure returns (uint) {\n        uint refundPercent;\n        if (_rank == Ranks.Diamond) refundPercent = _REFUND_TIER_FIVE;\n        else if (_rank == Ranks.Emerald) refundPercent = _REFUND_TIER_FOUR;\n        else if (_rank == Ranks.Ruby) refundPercent = _REFUND_TIER_THREE;\n        else if (_rank == Ranks.Pearl) refundPercent = _REFUND_TIER_TWO;\n        else refundPercent = _REFUND_TIER_ONE;\n\n        return (_amount * refundPercent) / 100;\n    }\n\n    function _updateMemberRank(address _uplineAddress) private {\n        Member storage member = members[_uplineAddress];\n        uint referralCount = enrolled[_uplineAddress].length;\n\n        if (referralCount / _QUALIFY_TO_IMPROVE_RANK >= 5 && member.rank != Ranks.Diamond) {\n            member.rank = Ranks.Diamond;\n            emit NewRankReached(_uplineAddress, \"Diamond\", block.timestamp);\n        } else if (referralCount / _QUALIFY_TO_IMPROVE_RANK >= 4 && member.rank != Ranks.Emerald) {\n            member.rank = Ranks.Emerald;\n            emit NewRankReached(_uplineAddress, \"Emerald\", block.timestamp);\n        } else if (referralCount / _QUALIFY_TO_IMPROVE_RANK >= 3 && member.rank != Ranks.Ruby) {\n            member.rank = Ranks.Ruby;\n            emit NewRankReached(_uplineAddress, \"Ruby\", block.timestamp);\n        } else if (referralCount / _QUALIFY_TO_IMPROVE_RANK >= 2 && member.rank != Ranks.Pearl) {\n            member.rank = Ranks.Pearl;\n            emit NewRankReached(_uplineAddress, \"Pearl\", block.timestamp);\n        }\n    }\n\n    function createMember(address payable _newMember) internal checkValidAddress(_newMember) {\n        members[_newMember] = Member({\n            memberWallet: _newMember,\n            isActive: true,\n            balance: 0,\n            rank: Ranks.Sapphire\n        });\n\n        _totalMembers++;\n        emit NewMember(_newMember, block.timestamp);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}