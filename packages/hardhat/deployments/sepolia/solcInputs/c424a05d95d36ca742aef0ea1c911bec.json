{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/FFFBusiness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract FFFBusiness is Ownable, ReentrancyGuard {\n\tusing SafeERC20 for IERC20;\n\n\t// USDT\n\tIERC20 public token;\n\n\t// For Bussiness\n\taddress payable private _businessWallet;\n    uint128 private _totalMembers;\n    uint256 private _totalBalance;\n\n\t//Limits\n\tuint128 private _MIN_AMOUNT_TO_DEPOSIT;\n\tuint128 private _MAX_CONTRACT_BALANCE;\n\tuint128 private _DEPOSIT_MULTIPLE;\n    uint128 private _MEMBERSHIP_PAYMENT_TO_BUSINESS;\n    uint128 private _MEMBERSHIP_PAYMENT_TO_UPLINE;\n    uint8 private _COMMISSION_PER_TIER_ONE;\n    uint8 private _COMMISSION_PER_TIER_TWO;\n    uint8 private _COMMISSION_PER_TIER_THREE;\n\n\t// Represents every client wallet\n\tstruct Member {\n\t\taddress payable memberWallet;\n\t\tbool isActive; \n\t\tuint balance; // Total savings per client\n\t}\n\n\tmapping(address => Member) private members;\n\tmapping(address => address[]) private enrolled; // Warning! for verification only\n\n    // Main Events\n    event NewBusinessOwner(\n        string message,\n        address indexed oldOwner,\n        address indexed newOwner,\n        uint timestamp\n    );\n    event ConfigUpdated(\n        string config,\n        uint newValue,\n        uint timestamp\n    );\n\tevent DepositContract(\n        address indexed from,\n        uint amount,\n        uint timestamp\n    );\n\tevent TransferBusiness(\n\t\taddress indexed from,\n\t\tuint amount,\n\t\tuint timestamp\n\t);\n\tevent WithdrawalContract(\n        address indexed to,\n        uint amount,\n        uint timestamp\n    );\n    event WithdrawalMember(\n        address indexed to,\n        uint amount,\n        uint timestamp\n    );\n\tevent CommissionPaid(\n        address indexed to,\n        uint amount,\n        uint timestamp\n    );\n    event MembershipPaid(\n        address indexed from,\n        uint amount,\n        uint timestamp\n    );\n\tevent NewMember(\n        address indexed member,\n        uint timestamp\n    );\n    event NewSaving(\n        address indexed member,\n        uint amount,\n        uint timestamp\n    );\n\n\t// Initiallize USDT address && only DEPLOYER wallet is the OWNER!!!\n\tconstructor(address _tokenAddress) {\n\t\trequire(_tokenAddress != address(0), \"Token address cannot be zero\");\n\n        // Ruleset for bussiness logic\n        _MIN_AMOUNT_TO_DEPOSIT = 2000 * 10 ** 6; // 2000 USDT\n        _MAX_CONTRACT_BALANCE = 10000000 * 10 ** 6; // 10M USDT\n        _DEPOSIT_MULTIPLE = 500 * 10 ** 6; // Múltiple 500 USDT\n        _MEMBERSHIP_PAYMENT_TO_BUSINESS = 400 * 10 ** 6; //400 USDT\n        _MEMBERSHIP_PAYMENT_TO_UPLINE = 100 * 10 ** 6; //100 USDT\n        _COMMISSION_PER_TIER_ONE = 4;\n        _COMMISSION_PER_TIER_TWO = 2;\n        _COMMISSION_PER_TIER_THREE = 2;\n\n        // Principal wallet\n\t\t_businessWallet = payable(msg.sender);\n\n        // Token\n\t\ttoken = IERC20(_tokenAddress);\n\n        // Balance for total members\n        _totalBalance = 0;\n\n        // Principal wallet is the first member\n        _createMember(_businessWallet);\n\t}\n\n    // Modofiers\n\tmodifier onlyActiveMember() {\n\t\trequire(members[msg.sender].isActive, \"Miembro no activo\");\n\t\t_;\n\t}\n\n\tmodifier checkValidAddress(address _recipient) {\n\t\trequire(_recipient != address(0), \"Direccion invalida\");\n\t\t_;\n\t}\n\n    // Checkers\n    function checkActiveMember(address _member) public view returns(bool) {\n        return members[_member].isActive;\n    }\n\n    // Getters for bussiness logic vars\n    function getTotalBalance() private view returns (uint) {\n        return _totalBalance;\n    }\n\n    function getBusinessWallet() public view returns (address) {\n        return _businessWallet;\n    }\n\n    function getTotalMembers() public view returns (uint) {\n        return _totalMembers;\n    }\n\n\tfunction getMemberBalance(address _currentMember) public view returns(uint) {\n        return members[_currentMember].balance;\n    }\n\n    function getTotalAffiliatesPerMember(address _currentMember) public view returns(uint) {\n        return enrolled[_currentMember].length;\n    }\n\n    function getMinAmountToDeposit() public view returns (uint128) {\n        return _MIN_AMOUNT_TO_DEPOSIT;\n    }\n\n    function getMaxContractBalance() public view returns (uint128) {\n        return _MAX_CONTRACT_BALANCE;\n    }\n\n    function getDepositMultiple() public view returns (uint128) {\n        return _DEPOSIT_MULTIPLE;\n    }\n\n    function getCurrentContractBalance() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n        // Setters\n    function setMinAmountToDeposit(uint128 _newMinAmount) external onlyOwner {\n        require(_newMinAmount > 0, \"Minimum amount must be greater than 0\");\n        require(_newMinAmount < _MAX_CONTRACT_BALANCE, \"Min cannot exceed max\");\n        _MIN_AMOUNT_TO_DEPOSIT = _newMinAmount;\n        emit ConfigUpdated(\"MIN_AMOUNT_TO_DEPOSIT\", _newMinAmount, block.timestamp);\n    }\n\n    function setMaxContractBalance(uint128 _newMaxBalance) external onlyOwner {\n        require(_newMaxBalance > _MIN_AMOUNT_TO_DEPOSIT, \"Max must exceed min\");\n        _MAX_CONTRACT_BALANCE = _newMaxBalance;\n        emit ConfigUpdated(\"MAX_CONTRACT_BALANCE\", _newMaxBalance, block.timestamp);\n    }\n\n    function setDepositMultiple(uint128 _newMultiple) external onlyOwner {\n        require(_newMultiple > 0, \"Multiple must be greater than 0\");\n        _DEPOSIT_MULTIPLE = _newMultiple;\n        emit ConfigUpdated(\"DEPOSIT_MULTIPLE\", _newMultiple, block.timestamp);\n    }\n\n    function setMembershipPayments(uint128 _toBusiness, uint128 _toUpline) external onlyOwner {\n        require(_toBusiness > 0 && _toUpline > 0, \"Membership payments must be positive\");\n        _MEMBERSHIP_PAYMENT_TO_BUSINESS = _toBusiness;\n        _MEMBERSHIP_PAYMENT_TO_UPLINE = _toUpline;\n        emit ConfigUpdated(\"MEMBERSHIP_PAYMENTS\", _toBusiness + _toUpline, block.timestamp);\n    }\n\n    function setCommissionRates(uint8 _tier1, uint8 _tier2, uint8 _tier3) external onlyOwner {\n        require(_tier1 + _tier2 + _tier3 <= 100, \"Total commission cannot exceed 100%\");\n        _COMMISSION_PER_TIER_ONE = _tier1;\n        _COMMISSION_PER_TIER_TWO = _tier2;\n        _COMMISSION_PER_TIER_THREE = _tier3;\n        emit ConfigUpdated(\"COMMISSION_RATES\", _tier1 + _tier2 + _tier3, block.timestamp);\n    }\n\n    function setBusinessWallet(address payable _newBusinessWallet) external onlyOwner {\n        require(_newBusinessWallet != address(0), \"Invalid address\");\n        _businessWallet = _newBusinessWallet;\n        emit NewBusinessOwner(\"BUSINESS_WALLET\", _businessWallet, _newBusinessWallet, block.timestamp);\n    }\n\n\n\tfunction memberEntrance(\n        address _uplineAddress,\n        address _secondLevelUpline,\n        address _thirtLevelUpline,\n        uint _amount\n    ) public {\n        if (!members[msg.sender].isActive) {\n            _createMember(payable(msg.sender));\n        }\n        if (_uplineAddress != address(0)) {\n            enrolled[_uplineAddress].push(msg.sender);\n        } else {\n            enrolled[_businessWallet].push(msg.sender);\n        }\n\n        _firstDeposit(_amount, _uplineAddress, _secondLevelUpline, _thirtLevelUpline);\n    }\n\n\tfunction deposit(uint256 _amount) external onlyOwner() {\n        uint256 realBalance = getCurrentContractBalance() + _amount;\n        require(realBalance <= _MAX_CONTRACT_BALANCE, \"El deposito no puede superar el limite del contrato\");\n        _deposit(msg.sender, _amount);\n    }\n\n    function withdraw() external onlyOwner {\n        uint256 currentBalance = getCurrentContractBalance();\n        _withdraw(msg.sender, currentBalance);\n    }\n\n    function paymentCommissions (\n        uint256 _paymentAmount,\n        address _memberAddress\n    ) external onlyOwner checkValidAddress(_memberAddress) {\n        require(getCurrentContractBalance() >= _paymentAmount, \"Contrato no cuenta con suficientes fondos\");\n        _processPayment(_memberAddress, _paymentAmount);\n        emit CommissionPaid(_memberAddress, _paymentAmount, block.timestamp);\n    }\n\n    // Provitional function for decrease memberfunds, in case to whitdraw in a future\n    function liquidateMemberFunds(\n        address _memberAddress,\n        uint _decreaseAmount\n    ) external onlyOwner {\n        Member storage currentMember = members[_memberAddress];\n        require(currentMember.isActive, \"Miembro no activo\");\n        require(currentMember.balance >= _decreaseAmount, \"Monto invalido\");\n\n        currentMember.balance -= _decreaseAmount;\n        _totalBalance -= _decreaseAmount;\n        _withdraw(_memberAddress, _decreaseAmount);\n        emit WithdrawalMember(_memberAddress, _decreaseAmount, block.timestamp);\n    }\n\n    function depositMemberFunds(\n        uint _amount,\n        address _firstLevelUpline,\n        address _secondLevelUpline,\n        address _thirtLevelUpline\n    ) public onlyActiveMember {\n        require(_amount >= _MIN_AMOUNT_TO_DEPOSIT, \"Deposito no alcanza monto minimo\");\n        require(_amount % _DEPOSIT_MULTIPLE == 0, \"Valor del deposito no es valido\");\n        require(_totalBalance + _amount <= _MAX_CONTRACT_BALANCE, \"Deposito supera el monto soportado por el contrato\");\n\n        _deposit(msg.sender, _amount);\n\n        // Update total balance in contract\n        _totalBalance += _amount;\n\n        members[msg.sender].balance += _amount;\n        emit NewSaving(msg.sender, _amount, block.timestamp);\n\n        uint256 commissionFirstLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_ONE);\n        uint256 commissionSecondLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_TWO);\n        uint256 commissionThirtLevel = _calculateCommission(_amount, _COMMISSION_PER_TIER_THREE);\n        uint256 totalCommissions = commissionFirstLevel + commissionSecondLevel + commissionThirtLevel;\n\n        uint256 finalDeposit = _amount - totalCommissions;\n        require(finalDeposit > totalCommissions, \"Error en el calculo de comisiones\");\n\n        // Payment to uplines in case exists\n        if (_firstLevelUpline != address(0)) {\n            _processPayment(_firstLevelUpline, commissionFirstLevel);\n            emit CommissionPaid(_firstLevelUpline, commissionFirstLevel, block.timestamp);\n            commissionFirstLevel = 0;\n        }\n        if (_secondLevelUpline != address(0)) {\n            _processPayment(_secondLevelUpline, commissionSecondLevel);\n            emit CommissionPaid(_secondLevelUpline, commissionSecondLevel, block.timestamp);\n            commissionSecondLevel = 0;\n        }\n        if (_thirtLevelUpline != address(0)) {\n            _processPayment(_thirtLevelUpline, commissionThirtLevel);\n            emit CommissionPaid(_thirtLevelUpline, commissionFirstLevel, block.timestamp);\n            commissionThirtLevel = 0;\n        }\n\n        // final calculation after to pay uplines\n        finalDeposit += (commissionFirstLevel + commissionSecondLevel + commissionThirtLevel);\n\n        _processPayment(_businessWallet, finalDeposit);\n\n        // Update total balance in contract with total amount per deposit\n        _totalBalance += _amount;\n\n        emit TransferBusiness(msg.sender, finalDeposit, block.timestamp);\n\n    }\n\n\tfunction _processPayment(address _to, uint256 _amount) private {\n        require(_amount > 0, \"La cantidad a transferir debe ser mayor a cero\");\n        token.safeTransfer(_to, _amount);\n    }\n\n    function _firstDeposit(\n        uint256 _amount,\n        address _uplineAddress,\n        address _secondLevelUpline,\n        address _thirtLevelUpline\n    ) private onlyActiveMember {\n        uint256 membership = _MEMBERSHIP_PAYMENT_TO_BUSINESS + _MEMBERSHIP_PAYMENT_TO_UPLINE;\n        uint256 firstDeposit = _amount - membership;\n\n        require(_amount >= _MIN_AMOUNT_TO_DEPOSIT + membership, \"Monto insuficiente\");\n        _deposit(msg.sender, membership);\n\n        // Membership payment to bussiness\n        _processPayment(_businessWallet, _MEMBERSHIP_PAYMENT_TO_BUSINESS);\n        emit MembershipPaid(msg.sender, _MEMBERSHIP_PAYMENT_TO_BUSINESS, block.timestamp);\n        // Membership payment to upline\n        _processPayment(_uplineAddress, _MEMBERSHIP_PAYMENT_TO_UPLINE);\n        emit CommissionPaid(_uplineAddress, _MEMBERSHIP_PAYMENT_TO_UPLINE, block.timestamp);\n\n        // For saving\n        depositMemberFunds(firstDeposit, _uplineAddress, _secondLevelUpline, _thirtLevelUpline);\n\n        emit NewSaving(msg.sender, firstDeposit, block.timestamp);\n    }\n\n    function _deposit(address _from, uint256 _amount) private {\n        require(token.allowance(_from, address(this)) >= _amount, \"Insufficient allowance\");\n        require(_amount <= token.balanceOf(_from), \"No cuentas con USDT en tu wallet\");\n        require(_amount > 0, \"Deposito no puede ser vacio\");\n        token.safeTransferFrom(_from, address(this), _amount);\n        emit DepositContract(_from, _amount, block.timestamp);\n    }\n\n    function _withdraw(address _to, uint256 _amount) private nonReentrant {\n        require(getCurrentContractBalance() >= _amount, \"Contrato no cuenta con suficientes fondos\");\n        _processPayment(_to, _amount);\n        emit WithdrawalContract(msg.sender, _amount, block.timestamp);\n    }\n\n    function _calculateCommission(uint256 _amount, uint256 _refundPercent) private pure returns (uint) {\n        return (_amount * _refundPercent) / 100;\n    }\n\n\tfunction _createMember(address payable _newMember) private checkValidAddress(_newMember) {\n        members[_newMember] = Member({\n            memberWallet: _newMember,\n            isActive: true,\n            balance: 0\n        });\n\n        _totalMembers++;\n        emit NewMember(_newMember, block.timestamp);\n    }\n    \n\treceive() external payable {\n\t\trevert(\"Ether not accepted\");\n\t}\n\n\tfallback() external payable {\n\t\trevert(\"Function not supported\");\n\t}\n\n\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}