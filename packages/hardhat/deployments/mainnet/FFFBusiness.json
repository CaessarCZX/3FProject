{
  "address": "0x40E6dFc291B42ACCeEcB1Aa7790eD4ABcaaCA923",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "memberKey",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommissionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "config",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DepositContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        }
      ],
      "name": "KeyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MembershipPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewBusinessOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewSaving",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProccessPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PullCommissionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransferBusiness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMember",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_thirtLevelUpline",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memberKey",
          "type": "string"
        }
      ],
      "name": "depositMemberFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBusinessWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionPerFistLevelUpline",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionPerSecondLevelUpline",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionPerThirtLevelUpline",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositMultiple",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembershipPaymentToBusiness",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembershipPaymentToUpline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinAmountToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_currentMemberBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_walletToPay",
          "type": "address"
        }
      ],
      "name": "liquidateMemberFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uplineAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondLevelUpline",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_thirtLevelUpline",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memberKey",
          "type": "string"
        }
      ],
      "name": "memberEntrance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPullCommission",
          "type": "bool"
        }
      ],
      "name": "paymentCommissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_newBusinessWallet",
          "type": "address"
        }
      ],
      "name": "setBusinessWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tier1",
          "type": "uint8"
        }
      ],
      "name": "setCommissionPerFistLevelUpline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tier2",
          "type": "uint8"
        }
      ],
      "name": "setCommissionPerSecondLevelUpline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_tier3",
          "type": "uint8"
        }
      ],
      "name": "setCommissionPerThirtLevelUpline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMultiple",
          "type": "uint256"
        }
      ],
      "name": "setDepositMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxBalance",
          "type": "uint256"
        }
      ],
      "name": "setMaxContractBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toBusiness",
          "type": "uint256"
        }
      ],
      "name": "setMembershipPaymentToBusiness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toUpline",
          "type": "uint256"
        }
      ],
      "name": "setMembershipPaymentToUpline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinAmountToDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe894b9c4a5670c2f30258c831f07c424e305ff6f9758c3d10d141b6f0a43a312",
  "receipt": {
    "to": null,
    "from": "0xA38551b7d13FeB260c5e071F932BD073fB67A44a",
    "contractAddress": "0x40E6dFc291B42ACCeEcB1Aa7790eD4ABcaaCA923",
    "transactionIndex": 2,
    "gasUsed": "5027460",
    "logsBloom": "0x
    "blockHash": "0xcc9368e3f87a30bda2258d06aafa3b8f98d566019aa7e3741b80d539cf27f837",
    "transactionHash": "0xe894b9c4a5670c2f30258c831f07c424e305ff6f9758c3d10d141b6f0a43a312",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 21674957,
        "transactionHash": "0xe894b9c4a5670c2f30258c831f07c424e305ff6f9758c3d10d141b6f0a43a312",
        "address": "0x40E6dFc291B42ACCeEcB1Aa7790eD4ABcaaCA923",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a38551b7d13feb260c5e071f932bd073fb67a44a"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xcc9368e3f87a30bda2258d06aafa3b8f98d566019aa7e3741b80d539cf27f837"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 21674957,
        "transactionHash": "0xe894b9c4a5670c2f30258c831f07c424e305ff6f9758c3d10d141b6f0a43a312",
        "address": "0x40E6dFc291B42ACCeEcB1Aa7790eD4ABcaaCA923",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a38551b7d13feb260c5e071f932bd073fb67a44a",
          "0x000000000000000000000000a38551b7d13feb260c5e071f932bd073fb67a44a"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xcc9368e3f87a30bda2258d06aafa3b8f98d566019aa7e3741b80d539cf27f837"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 21674957,
        "transactionHash": "0xe894b9c4a5670c2f30258c831f07c424e305ff6f9758c3d10d141b6f0a43a312",
        "address": "0x40E6dFc291B42ACCeEcB1Aa7790eD4ABcaaCA923",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000a38551b7d13feb260c5e071f932bd073fb67a44a",
          "0x000000000000000000000000a38551b7d13feb260c5e071f932bd073fb67a44a"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xcc9368e3f87a30bda2258d06aafa3b8f98d566019aa7e3741b80d539cf27f837"
      }
    ],
    "blockNumber": 21674957,
    "cumulativeGasUsed": "5238815",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    "1xJ+yM}D6w079Dmh4&FCU"
  ],
  "numDeployments": 1,
  "solcInputHash": "392c5766a41ac515a6ad3d95c9157d16",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memberKey\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"config\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"KeyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MembershipPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewBusinessOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewSaving\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProccessPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PullCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferBusiness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMember\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirtLevelUpline\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memberKey\",\"type\":\"string\"}],\"name\":\"depositMemberFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBusinessWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionPerFistLevelUpline\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionPerSecondLevelUpline\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionPerThirtLevelUpline\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositMultiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembershipPaymentToBusiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembershipPaymentToUpline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinAmountToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currentMemberBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_walletToPay\",\"type\":\"address\"}],\"name\":\"liquidateMemberFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uplineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondLevelUpline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirtLevelUpline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memberKey\",\"type\":\"string\"}],\"name\":\"memberEntrance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPullCommission\",\"type\":\"bool\"}],\"name\":\"paymentCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBusinessWallet\",\"type\":\"address\"}],\"name\":\"setBusinessWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier1\",\"type\":\"uint8\"}],\"name\":\"setCommissionPerFistLevelUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier2\",\"type\":\"uint8\"}],\"name\":\"setCommissionPerSecondLevelUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier3\",\"type\":\"uint8\"}],\"name\":\"setCommissionPerThirtLevelUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMultiple\",\"type\":\"uint256\"}],\"name\":\"setDepositMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxBalance\",\"type\":\"uint256\"}],\"name\":\"setMaxContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toBusiness\",\"type\":\"uint256\"}],\"name\":\"setMembershipPaymentToBusiness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toUpline\",\"type\":\"uint256\"}],\"name\":\"setMembershipPaymentToUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FFFBusiness.sol\":\"FFFBusiness\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/FFFBusiness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract FFFBusiness is Ownable, AccessControl, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t//Securty\\n\\tbytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\tbytes32 private _MEMBER_KEY;\\n\\n\\t// USDT\\n\\tIERC20 public token;\\n\\n\\t// For Bussiness\\n\\taddress payable private _businessWallet;\\n\\tuint128 private _totalMembers;\\n\\tuint256 private _totalBalance;\\n\\n\\t//Limits\\n\\tuint256 private _MIN_AMOUNT_TO_DEPOSIT;\\n\\tuint256 private _MAX_CONTRACT_BALANCE;\\n\\tuint256 private _DEPOSIT_MULTIPLE;\\n\\tuint256 private _MEMBERSHIP_PAYMENT_TO_BUSINESS;\\n\\tuint256 private _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n\\tuint8 private _COMMISSION_PER_TIER_ONE;\\n\\tuint8 private _COMMISSION_PER_TIER_TWO;\\n\\tuint8 private _COMMISSION_PER_TIER_THREE;\\n\\n\\t//Testing events\\n\\tevent Log(string message, uint amount);\\n\\tevent ProccessPayment(string message, address indexed to, uint amount);\\n\\n\\t// Setup events\\n\\tevent NewBusinessOwner(\\n\\t\\tstring message,\\n\\t\\taddress indexed oldOwner,\\n\\t\\taddress indexed newOwner,\\n\\t\\tuint timestamp\\n\\t);\\n\\tevent ConfigUpdated(string config, uint newValue, uint timestamp);\\n\\n\\t//Security events\\n\\tevent KeyUpdated(address indexed updater);\\n\\n\\t//Business events\\n\\tevent DepositContract(address indexed from, uint amount, uint timestamp);\\n\\tevent TransferBusiness(address indexed from, uint amount, uint timestamp);\\n\\tevent WithdrawalContract(address indexed to, uint amount, uint timestamp);\\n\\tevent MembershipPaid(address indexed from, uint amount, uint timestamp);\\n\\n\\t//Member events\\n\\tevent WithdrawalMember(address indexed member, address indexed to , uint amount, uint timestamp);\\n\\tevent CommissionPaid(address indexed to, uint amount, uint timestamp);\\n\\tevent PullCommissionPaid(address indexed to, uint amount, uint timestamp);\\n\\tevent NewMember(address indexed member, uint timestamp);\\n\\tevent NewSaving(address indexed member, uint amount, uint timestamp);\\n\\n\\t// Initiallize USDT address && only DEPLOYER wallet is the OWNER!!!\\n\\tconstructor(address _tokenAddress, string memory memberKey) {\\n\\t\\trequire(_tokenAddress != address(0), \\\"Token address cannot be zero\\\");\\n\\n\\t\\t// Role\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_setupRole(ADMIN_ROLE, msg.sender);\\n\\n\\t\\t// Member invitation key\\n\\t\\t_MEMBER_KEY = keccak256(abi.encodePacked(memberKey));\\n\\n\\t\\t// Ruleset for bussiness logic\\n\\t\\t_MIN_AMOUNT_TO_DEPOSIT = 2000 * 10 ** 6; // 2000 USDT\\n\\t\\t_MAX_CONTRACT_BALANCE = 10000000 * 10 ** 6; // 10M USDT\\n\\t\\t_DEPOSIT_MULTIPLE = 500 * 10 ** 6; // M\\u00faltiple 500 USDT\\n\\t\\t_MEMBERSHIP_PAYMENT_TO_BUSINESS = 400 * 10 ** 6; //400 USDT\\n\\t\\t_MEMBERSHIP_PAYMENT_TO_UPLINE = 100 * 10 ** 6; //100 USDT\\n\\t\\t_COMMISSION_PER_TIER_ONE = 4;\\n\\t\\t_COMMISSION_PER_TIER_TWO = 2;\\n\\t\\t_COMMISSION_PER_TIER_THREE = 2;\\n\\n\\t\\t// Principal wallet\\n\\t\\t_businessWallet = payable(msg.sender);\\n\\n\\t\\t// Token\\n\\t\\ttoken = IERC20(_tokenAddress);\\n\\n\\t\\t// Balance for total members\\n\\t\\t_totalBalance = 0;\\n\\t}\\n\\n\\t// Modofiers\\n\\tmodifier onlyActiveMember(string memory _memberKey) {\\n\\t\\trequire(\\n\\t\\t\\tkeccak256(abi.encodePacked(_memberKey)) == _MEMBER_KEY,\\n\\t\\t\\t\\\"Codigo de invitacion invalido\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkValidAddress(address _recipient) {\\n\\t\\trequire(_recipient != address(0), \\\"Direccion invalida\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Getters for bussiness logic vars\\n\\tfunction getTotalBalance() private view returns (uint) {\\n\\t\\treturn _totalBalance;\\n\\t}\\n\\n\\tfunction getBusinessWallet() public view returns (address) {\\n\\t\\treturn _businessWallet;\\n\\t}\\n\\n\\tfunction getTotalMembers() public view returns (uint) {\\n\\t\\treturn _totalMembers;\\n\\t}\\n\\n\\tfunction getMinAmountToDeposit() public view returns (uint256) {\\n\\t\\treturn _MIN_AMOUNT_TO_DEPOSIT;\\n\\t}\\n\\n\\tfunction getMaxContractBalance() public view returns (uint256) {\\n\\t\\treturn _MAX_CONTRACT_BALANCE;\\n\\t}\\n\\n\\tfunction getDepositMultiple() public view returns (uint256) {\\n\\t\\treturn _DEPOSIT_MULTIPLE;\\n\\t}\\n\\n\\tfunction getCurrentContractBalance() public view returns (uint256) {\\n\\t\\treturn token.balanceOf(address(this));\\n\\t}\\n\\n\\tfunction getMembershipPaymentToBusiness() public view returns (uint256) {\\n\\t\\treturn _MEMBERSHIP_PAYMENT_TO_BUSINESS;\\n\\t}\\n\\n\\tfunction getMembershipPaymentToUpline() public view returns (uint256) {\\n\\t\\treturn _MEMBERSHIP_PAYMENT_TO_UPLINE;\\n\\t}\\n\\n\\tfunction getCommissionPerFistLevelUpline() public view returns (uint8) {\\n\\t\\treturn _COMMISSION_PER_TIER_ONE;\\n\\t}\\n\\n\\tfunction getCommissionPerSecondLevelUpline() public view returns (uint8) {\\n\\t\\treturn _COMMISSION_PER_TIER_TWO;\\n\\t}\\n\\n\\tfunction getCommissionPerThirtLevelUpline() public view returns (uint8) {\\n\\t\\treturn _COMMISSION_PER_TIER_THREE;\\n\\t}\\n\\n\\tfunction setMinAmountToDeposit(\\n\\t\\tuint256 _newMinAmount\\n\\t) external onlyRole(ADMIN_ROLE) {\\n\\t\\trequire(_newMinAmount > 0, \\\"Minimum amount must be greater than 0\\\");\\n\\t\\trequire(_newMinAmount < _MAX_CONTRACT_BALANCE, \\\"Min cannot exceed max\\\");\\n\\t\\t_MIN_AMOUNT_TO_DEPOSIT = _newMinAmount;\\n\\t\\temit ConfigUpdated(\\n\\t\\t\\t\\\"MIN_AMOUNT_TO_DEPOSIT\\\",\\n\\t\\t\\t_newMinAmount,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setMaxContractBalance(uint256 _newMaxBalance) external onlyOwner {\\n\\t\\trequire(_newMaxBalance > _MIN_AMOUNT_TO_DEPOSIT, \\\"Max must exceed min\\\");\\n\\t\\t_MAX_CONTRACT_BALANCE = _newMaxBalance;\\n\\t\\temit ConfigUpdated(\\n\\t\\t\\t\\\"MAX_CONTRACT_BALANCE\\\",\\n\\t\\t\\t_newMaxBalance,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setDepositMultiple(\\n\\t\\tuint256 _newMultiple\\n\\t) external onlyRole(ADMIN_ROLE) {\\n\\t\\trequire(_newMultiple > 0, \\\"Multiple must be greater than 0\\\");\\n\\t\\t_DEPOSIT_MULTIPLE = _newMultiple;\\n\\t\\temit ConfigUpdated(\\\"DEPOSIT_MULTIPLE\\\", _newMultiple, block.timestamp);\\n\\t}\\n\\n\\tfunction setMembershipPaymentToBusiness(\\n\\t\\tuint256 _toBusiness\\n\\t) external onlyOwner {\\n\\t\\trequire(_toBusiness > 0, \\\"Membership payments must be positive\\\");\\n\\t\\trequire(\\n\\t\\t\\t_toBusiness < _MAX_CONTRACT_BALANCE,\\n\\t\\t\\t\\\"Payment to Business cannot exceed max\\\"\\n\\t\\t);\\n\\t\\t_MEMBERSHIP_PAYMENT_TO_BUSINESS = _toBusiness;\\n\\t\\temit ConfigUpdated(\\n\\t\\t\\t\\\"MEMBERSHIP_PAYMENT_TO_BUSINESS\\\",\\n\\t\\t\\t_toBusiness,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setMembershipPaymentToUpline(\\n\\t\\tuint256 _toUpline\\n\\t) external onlyOwner {\\n\\t\\trequire(_toUpline > 0, \\\"Membership payments must be positive\\\");\\n\\t\\trequire(\\n\\t\\t\\t_toUpline < _MAX_CONTRACT_BALANCE,\\n\\t\\t\\t\\\"Payment to Upline cannot exceed max\\\"\\n\\t\\t);\\n\\t\\t_MEMBERSHIP_PAYMENT_TO_UPLINE = _toUpline;\\n\\t\\temit ConfigUpdated(\\n\\t\\t\\t\\\"MEMBERSHIP_PAYMENT_TO_UPLINE\\\",\\n\\t\\t\\t_toUpline,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setCommissionPerFistLevelUpline(\\n\\t\\tuint8 _tier1\\n\\t) external onlyRole(ADMIN_ROLE) {\\n\\t\\trequire(_tier1 > 0, \\\"Commission payments must be positive\\\");\\n\\t\\trequire(_tier1 <= 100, \\\"Commission cannot exceed 100%\\\");\\n\\t\\t_COMMISSION_PER_TIER_ONE = _tier1;\\n\\t\\temit ConfigUpdated(\\n\\t\\t\\t\\\"COMMISSION_PER_FIRST_LEVEL_UPDATED\\\",\\n\\t\\t\\t_tier1,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setCommissionPerSecondLevelUpline(\\n\\t\\tuint8 _tier2\\n\\t) external onlyRole(ADMIN_ROLE) {\\n\\t\\trequire(_tier2 > 0, \\\"Commission payments must be positive\\\");\\n\\t\\trequire(_tier2 <= 100, \\\"Commission cannot exceed 100%\\\");\\n\\t\\t_COMMISSION_PER_TIER_TWO = _tier2;\\n\\t\\temit ConfigUpdated(\\n\\t\\t\\t\\\"COMMISSION_PER_SECOND_LEVEL_UPDATED\\\",\\n\\t\\t\\t_tier2,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setCommissionPerThirtLevelUpline(\\n\\t\\tuint8 _tier3\\n\\t) external onlyRole(ADMIN_ROLE) {\\n\\t\\trequire(_tier3 > 0, \\\"Commission payments must be positive\\\");\\n\\t\\trequire(_tier3 <= 100, \\\"Total commission cannot exceed 100%\\\");\\n\\t\\t_COMMISSION_PER_TIER_THREE = _tier3;\\n\\t\\temit ConfigUpdated(\\n\\t\\t\\t\\\"COMMISSION_PER_THIRT_LEVEL_UPDATED\\\",\\n\\t\\t\\t_tier3,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction addAdmin(address account) external onlyOwner {\\n\\t\\tgrantRole(ADMIN_ROLE, account);\\n\\t}\\n\\n\\tfunction removeAdmin(address account) external onlyOwner {\\n\\t\\trevokeRole(ADMIN_ROLE, account);\\n\\t}\\n\\n\\tfunction paymentCommissions(\\n\\t\\tuint256 _paymentAmount,\\n\\t\\taddress _memberAddress,\\n\\t\\tbool _isPullCommission\\n\\t) external checkValidAddress(_memberAddress) onlyRole(ADMIN_ROLE) {\\n\\t\\t_withdraw(_memberAddress, _paymentAmount);\\n\\n\\t\\tif (_isPullCommission == true) {\\n\\t\\t\\temit PullCommissionPaid(\\n\\t\\t\\t\\t_memberAddress,\\n\\t\\t\\t\\t_paymentAmount,\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\temit CommissionPaid(\\n\\t\\t\\t\\t_memberAddress,\\n\\t\\t\\t\\t_paymentAmount,\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction liquidateMemberFunds(\\n\\t\\tuint256 _paymentAmount,\\n\\t\\taddress _memberAddress,\\n\\t\\tuint256 _currentMemberBalance,\\n\\t\\taddress _walletToPay\\n\\t) external checkValidAddress(_memberAddress) onlyRole(ADMIN_ROLE) {\\n\\t\\trequire(_currentMemberBalance >= _paymentAmount, \\\"Monto invalido\\\");\\n\\n\\t\\t// Update balance for deposit members in smart Contract\\n\\t\\t_totalBalance -= _paymentAmount;\\n\\t\\t\\n\\t\\trequire(_walletToPay != address(0), \\\"Direccion de wallet de destino no valida\\\");\\n\\n\\t\\t_withdraw(_walletToPay, _paymentAmount);\\n\\t\\temit WithdrawalMember(_memberAddress, _walletToPay, _paymentAmount, block.timestamp);\\n\\t}\\n\\n\\tfunction setBusinessWallet(\\n\\t\\taddress payable _newBusinessWallet\\n\\t) external onlyOwner {\\n\\t\\trequire(_newBusinessWallet != address(0), \\\"Direccion de nueva wallet no valida\\\");\\n\\n\\t\\t_businessWallet = _newBusinessWallet;\\n\\n\\t\\ttransferOwnership(_newBusinessWallet);\\n\\n\\t\\t_revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, _newBusinessWallet);\\n\\n\\t\\temit NewBusinessOwner(\\n\\t\\t\\t\\\"BUSINESS_WALLET\\\",\\n\\t\\t\\t_businessWallet,\\n\\t\\t\\t_newBusinessWallet,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction memberEntrance(\\n\\t\\taddress _uplineAddress,\\n\\t\\taddress _secondLevelUpline,\\n\\t\\taddress _thirtLevelUpline,\\n\\t\\tuint256 _amount,\\n\\t\\tstring memory _memberKey\\n\\t) public {\\n\\t\\t_totalMembers++;\\n\\t\\temit NewMember(msg.sender, block.timestamp);\\n\\n\\t\\t_firstDeposit(\\n\\t\\t\\t_amount,\\n\\t\\t\\t_uplineAddress,\\n\\t\\t\\t_secondLevelUpline,\\n\\t\\t\\t_thirtLevelUpline,\\n\\t\\t\\t_memberKey\\n\\t\\t);\\n\\t}\\n\\n\\tfunction deposit(uint256 _amount) external onlyRole(ADMIN_ROLE) {\\n\\t\\tuint256 realBalance = getCurrentContractBalance() + _amount;\\n\\t\\trequire(\\n\\t\\t\\trealBalance <= _MAX_CONTRACT_BALANCE,\\n\\t\\t\\t\\\"El deposito no puede superar el limite del contrato\\\"\\n\\t\\t);\\n\\t\\t_deposit(msg.sender, _amount);\\n\\t}\\n\\n\\tfunction withdraw() external onlyOwner {\\n\\t\\tuint256 currentBalance = getCurrentContractBalance();\\n\\t\\t_withdraw(msg.sender, currentBalance);\\n\\t}\\n\\n\\tfunction depositMemberFunds(\\n\\t\\tuint256 _amount,\\n\\t\\taddress _firstLevelUpline,\\n\\t\\taddress _secondLevelUpline,\\n\\t\\taddress _thirtLevelUpline,\\n\\t\\tstring memory _memberKey\\n\\t) public onlyActiveMember(_memberKey) {\\n\\t\\trequire(\\n\\t\\t\\t_amount >= _MIN_AMOUNT_TO_DEPOSIT,\\n\\t\\t\\t\\\"Deposito no alcanza monto minimo\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_amount % _DEPOSIT_MULTIPLE == 0,\\n\\t\\t\\t\\\"Valor del deposito no es valido\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_totalBalance + _amount <= _MAX_CONTRACT_BALANCE,\\n\\t\\t\\t\\\"Deposito supera el monto soportado por el contrato\\\"\\n\\t\\t);\\n\\n\\t\\t_deposit(msg.sender, _amount);\\n\\n\\t\\temit NewSaving(msg.sender, _amount, block.timestamp);\\n\\n\\t\\tuint256 commissionFirstLevel = _calculateCommission(\\n\\t\\t\\t_amount,\\n\\t\\t\\t_COMMISSION_PER_TIER_ONE\\n\\t\\t);\\n\\t\\tuint256 commissionSecondLevel = _calculateCommission(\\n\\t\\t\\t_amount,\\n\\t\\t\\t_COMMISSION_PER_TIER_TWO\\n\\t\\t);\\n\\t\\tuint256 commissionThirtLevel = _calculateCommission(\\n\\t\\t\\t_amount,\\n\\t\\t\\t_COMMISSION_PER_TIER_THREE\\n\\t\\t);\\n\\t\\tuint256 totalCommissions = commissionFirstLevel +\\n\\t\\t\\tcommissionSecondLevel +\\n\\t\\t\\tcommissionThirtLevel;\\n\\n\\t\\tuint256 finalDeposit = _amount - totalCommissions;\\n\\n\\t\\trequire(\\n\\t\\t\\tfinalDeposit > totalCommissions,\\n\\t\\t\\t\\\"Error en el calculo de comisiones\\\"\\n\\t\\t);\\n\\n\\t\\t// Payment to uplines\\n\\t\\tcommissionFirstLevel = _commissionPayment(\\n\\t\\t\\t_firstLevelUpline,\\n\\t\\t\\tcommissionFirstLevel,\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\t\\tcommissionSecondLevel = _commissionPayment(\\n\\t\\t\\t_secondLevelUpline,\\n\\t\\t\\tcommissionSecondLevel,\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\t\\tcommissionThirtLevel = _commissionPayment(\\n\\t\\t\\t_thirtLevelUpline,\\n\\t\\t\\tcommissionThirtLevel,\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\n\\t\\tfinalDeposit += (commissionFirstLevel +\\n\\t\\t\\tcommissionSecondLevel +\\n\\t\\t\\tcommissionThirtLevel);\\n\\n\\t\\t_processPayment(_businessWallet, finalDeposit);\\n\\n\\t\\t_totalBalance += _amount;\\n\\n\\t\\temit TransferBusiness(msg.sender, finalDeposit, block.timestamp);\\n\\t}\\n\\n\\tfunction _firstDeposit(\\n\\t\\tuint256 _amount,\\n\\t\\taddress _uplineAddress,\\n\\t\\taddress _secondLevelUpline,\\n\\t\\taddress _thirtLevelUpline,\\n\\t\\tstring memory _memberKey\\n\\t) private {\\n\\t\\tuint256 membership = _MEMBERSHIP_PAYMENT_TO_BUSINESS +\\n\\t\\t\\t_MEMBERSHIP_PAYMENT_TO_UPLINE;\\n\\t\\tuint256 firstDeposit = _amount - membership;\\n\\n\\t\\trequire(\\n\\t\\t\\t_amount >= _MIN_AMOUNT_TO_DEPOSIT + membership,\\n\\t\\t\\t\\\"Monto insuficiente\\\"\\n\\t\\t);\\n\\t\\t_deposit(msg.sender, membership);\\n\\n\\t\\t// Membership payment to bussiness\\n\\t\\t_processPayment(_businessWallet, _MEMBERSHIP_PAYMENT_TO_BUSINESS);\\n\\t\\temit MembershipPaid(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_MEMBERSHIP_PAYMENT_TO_BUSINESS,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\n\\t\\t// Membership payment to upline\\n\\t\\t_commissionPayment(\\n\\t\\t\\t_uplineAddress,\\n\\t\\t\\t_MEMBERSHIP_PAYMENT_TO_UPLINE,\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\n\\t\\t// For saving\\n\\t\\tdepositMemberFunds(\\n\\t\\t\\tfirstDeposit,\\n\\t\\t\\t_uplineAddress,\\n\\t\\t\\t_secondLevelUpline,\\n\\t\\t\\t_thirtLevelUpline,\\n\\t\\t\\t_memberKey\\n\\t\\t);\\n\\n\\t\\temit NewSaving(msg.sender, firstDeposit, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * Simple function that verifies commission distribution\\n\\t * and return the same value of amount,\\n\\t * with the option to reset the amount to zero\\n\\t */\\n\\tfunction _commissionPayment(\\n\\t\\taddress _to,\\n\\t\\tuint256 _amount,\\n\\t\\tbool _isReset\\n\\t) private returns (uint256) {\\n\\t\\tif (_to != address(0)) {\\n\\t\\t\\t_processPayment(_to, _amount);\\n\\t\\t\\temit CommissionPaid(_to, _amount, block.timestamp);\\n\\n\\t\\t\\tif (_isReset == true) {\\n\\t\\t\\t\\t_amount = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _amount;\\n\\t}\\n\\n\\tfunction _processPayment(address _to, uint256 _amount) private {\\n\\t\\trequire(_amount > 0, \\\"La cantidad a transferir debe ser mayor a cero\\\");\\n\\t\\ttoken.safeTransfer(_to, _amount);\\n\\t\\temit ProccessPayment(\\\"From business contract\\\", _to, _amount);\\n\\t}\\n\\n\\tfunction _deposit(address _from, uint256 _amount) private {\\n\\t\\trequire(\\n\\t\\t\\ttoken.allowance(_from, address(this)) >= _amount,\\n\\t\\t\\t\\\"Insufficient allowance\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_amount <= token.balanceOf(_from),\\n\\t\\t\\t\\\"No cuentas con USDT en tu wallet\\\"\\n\\t\\t);\\n\\t\\trequire(_amount > 0, \\\"Deposito no puede ser vacio\\\");\\n\\t\\ttoken.safeTransferFrom(_from, address(this), _amount);\\n\\t\\temit DepositContract(_from, _amount, block.timestamp);\\n\\t}\\n\\n\\tfunction _withdraw(address _to, uint256 _amount) private nonReentrant {\\n\\t\\trequire(\\n\\t\\t\\tgetCurrentContractBalance() >= _amount,\\n\\t\\t\\t\\\"Contrato no cuenta con suficientes fondos\\\"\\n\\t\\t);\\n\\t\\t_processPayment(_to, _amount);\\n\\t\\temit WithdrawalContract(msg.sender, _amount, block.timestamp);\\n\\t}\\n\\n\\tfunction _calculateCommission(\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _refundPercent\\n\\t) private pure returns (uint) {\\n\\t\\treturn (_amount * _refundPercent) / 100;\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\trevert(\\\"Ether not accepted\\\");\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\trevert(\\\"Function not supported\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x99c535c1ba14da881df9745c3282187fd221fad09ac10f074dc54ad4cf9d7f7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005c7138038062005c7183398181016040528101906200003791906200069c565b620000576200004b6200026660201b60201c565b6200026e60201b60201c565b6001600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c89062000763565b60405180910390fd5b620000e66000801b336200033260201b60201c565b620001187fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336200033260201b60201c565b806040516020016200012b9190620007d2565b6040516020818303038152906040528051906020012060038190555063773594006008819055506509184e72a000600981905550631dcd6500600a819055506317d78400600b819055506305f5e100600c819055506004600d60006101000a81548160ff021916908360ff1602179055506002600d60016101000a81548160ff021916908360ff1602179055506002600d60026101000a81548160ff021916908360ff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006007819055505050620007eb565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200034482826200034860201b60201c565b5050565b6200035a82826200043960201b60201c565b6200043557600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620003da6200026660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004e582620004b8565b9050919050565b620004f781620004d8565b81146200050357600080fd5b50565b6000815190506200051781620004ec565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005728262000527565b810181811067ffffffffffffffff8211171562000594576200059362000538565b5b80604052505050565b6000620005a9620004a4565b9050620005b7828262000567565b919050565b600067ffffffffffffffff821115620005da57620005d962000538565b5b620005e58262000527565b9050602081019050919050565b60005b8381101562000612578082015181840152602081019050620005f5565b60008484015250505050565b6000620006356200062f84620005bc565b6200059d565b90508281526020810184848401111562000654576200065362000522565b5b62000661848285620005f2565b509392505050565b600082601f8301126200068157620006806200051d565b5b8151620006938482602086016200061e565b91505092915050565b60008060408385031215620006b657620006b5620004ae565b5b6000620006c68582860162000506565b925050602083015167ffffffffffffffff811115620006ea57620006e9620004b3565b5b620006f88582860162000669565b9150509250929050565b600082825260208201905092915050565b7f546f6b656e20616464726573732063616e6e6f74206265207a65726f00000000600082015250565b60006200074b601c8362000702565b9150620007588262000713565b602082019050919050565b600060208201905081810360008301526200077e816200073c565b9050919050565b600081519050919050565b600081905092915050565b6000620007a88262000785565b620007b4818562000790565b9350620007c6818560208601620005f2565b80840191505092915050565b6000620007e082846200079b565b915081905092915050565b61547680620007fb6000396000f3fe60806040526004361061023f5760003560e01c806377f339751161012e578063b7130870116100ab578063d79c5abb1161006f578063d79c5abb14610889578063e2d71d6a146108b2578063e341c7db146108db578063f2fde38b14610904578063fc0c546a1461092d5761027f565b8063b7130870146107b6578063bcf3f6ff146107e1578063bd69c1271461080c578063d547741f14610835578063d59392de1461085e5761027f565b806391d14854116100f257806391d14854146106cf57806394fbe8461461070c578063a217fddf14610737578063aa331db514610762578063b6b55f251461078d5761027f565b806377f33975146105fa57806388e19794146106255780638cb20e6f146106505780638da5cb5b146106795780638f180305146106a45761027f565b806336568abe116101bc5780636d790081116101805780636d7900811461053b578063704802751461056657806370f710791461058f578063715018a6146105b857806375b238fc146105cf5761027f565b806336568abe146104805780633ccfd60b146104a95780633f4bf03c146104c057806348d5c401146104e95780635afe70d7146105125761027f565b80632a5e63a1116102035780632a5e63a1146103b15780632f2ff15d146103da578063312adf5814610403578063350705501461042c578063361f1ad3146104555761027f565b80630109705c146102ba57806301ffc9a7146102e55780631785f53c14610322578063248a9ca31461034b57806327f3547f146103885761027f565b3661027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690612ff3565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b19061305f565b60405180910390fd5b3480156102c657600080fd5b506102cf610958565b6040516102dc919061309b565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190613122565b61096f565b604051610319919061316a565b60405180910390f35b34801561032e57600080fd5b50610349600480360381019061034491906131e3565b6109e9565b005b34801561035757600080fd5b50610372600480360381019061036d9190613246565b610a1e565b60405161037f9190613282565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa91906132d3565b610a3e565b005b3480156103bd57600080fd5b506103d860048036038101906103d39190613446565b610b10565b005b3480156103e657600080fd5b5061040160048036038101906103fc91906134dd565b610e79565b005b34801561040f57600080fd5b5061042a600480360381019061042591906132d3565b610e9a565b005b34801561043857600080fd5b50610453600480360381019061044e919061351d565b610f6c565b005b34801561046157600080fd5b5061046a61114a565b6040516104779190613593565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a291906134dd565b611154565b005b3480156104b557600080fd5b506104be6111d7565b005b3480156104cc57600080fd5b506104e760048036038101906104e291906132d3565b6111f8565b005b3480156104f557600080fd5b50610510600480360381019061050b91906135da565b611287565b005b34801561051e57600080fd5b5061053960048036038101906105349190613645565b611396565b005b34801561054757600080fd5b506105506114fb565b60405161055d9190613593565b60405180910390f35b34801561057257600080fd5b5061058d600480360381019061058891906131e3565b61159e565b005b34801561059b57600080fd5b506105b660048036038101906105b1919061369e565b6115d3565b005b3480156105c457600080fd5b506105cd611730565b005b3480156105db57600080fd5b506105e4611744565b6040516105f19190613282565b60405180910390f35b34801561060657600080fd5b5061060f611768565b60405161061c9190613593565b60405180910390f35b34801561063157600080fd5b5061063a611772565b6040516106479190613593565b60405180910390f35b34801561065c57600080fd5b50610677600480360381019061067291906132d3565b61177c565b005b34801561068557600080fd5b5061068e611871565b60405161069b9190613700565b60405180910390f35b3480156106b057600080fd5b506106b961189a565b6040516106c69190613593565b60405180910390f35b3480156106db57600080fd5b506106f660048036038101906106f191906134dd565b6118d2565b604051610703919061316a565b60405180910390f35b34801561071857600080fd5b5061072161193d565b60405161072e919061309b565b60405180910390f35b34801561074357600080fd5b5061074c611954565b6040516107599190613282565b60405180910390f35b34801561076e57600080fd5b5061077761195b565b6040516107849190613700565b60405180910390f35b34801561079957600080fd5b506107b460048036038101906107af91906132d3565b611985565b005b3480156107c257600080fd5b506107cb611a1a565b6040516107d89190613593565b60405180910390f35b3480156107ed57600080fd5b506107f6611a24565b604051610803919061309b565b60405180910390f35b34801561081857600080fd5b50610833600480360381019061082e91906135da565b611a3b565b005b34801561084157600080fd5b5061085c600480360381019061085791906134dd565b611b4a565b005b34801561086a57600080fd5b50610873611b6b565b6040516108809190613593565b60405180910390f35b34801561089557600080fd5b506108b060048036038101906108ab919061371b565b611b75565b005b3480156108be57600080fd5b506108d960048036038101906108d491906132d3565b611c3c565b005b3480156108e757600080fd5b5061090260048036038101906108fd91906135da565b611ced565b005b34801561091057600080fd5b5061092b600480360381019061092691906131e3565b611dfc565b005b34801561093957600080fd5b50610942611e7f565b60405161094f9190613811565b60405180910390f35b6000600d60009054906101000a900460ff16905090565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109e257506109e182611ea5565b5b9050919050565b6109f1611f0f565b610a1b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611b4a565b50565b600060016000838152602001908152602001600020600101549050919050565b610a46611f0f565b60008111610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a809061389e565b60405180910390fd5b6009548110610acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac490613930565b60405180910390fd5b80600b819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610b0592919061399c565b60405180910390a150565b8060035481604051602001610b259190613a49565b6040516020818303038152906040528051906020012014610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290613aac565b60405180910390fd5b600854861015610bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb790613b18565b60405180910390fd5b6000600a5487610bd09190613b67565b14610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790613be4565b60405180910390fd5b60095486600754610c219190613c33565b1115610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5990613cd9565b60405180910390fd5b610c6c3387611f8d565b3373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e08742604051610cb4929190613cf9565b60405180910390a26000610cda87600d60009054906101000a900460ff1660ff16612231565b90506000610cfa88600d60019054906101000a900460ff1660ff16612231565b90506000610d1a89600d60029054906101000a900460ff1660ff16612231565b90506000818385610d2b9190613c33565b610d359190613c33565b90506000818b610d459190613d22565b9050818111610d89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8090613dc8565b60405180910390fd5b610d958a866001612253565b9450610da389856001612253565b9350610db188846001612253565b9250828486610dc09190613c33565b610dca9190613c33565b81610dd59190613c33565b9050610e03600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826122fe565b8a60076000828254610e159190613c33565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f3428e989e797df55e8af7c22735e19d98f469023d200174911b2c8e0870240fe8242604051610e64929190613cf9565b60405180910390a25050505050505050505050565b610e8282610a1e565b610e8b816123e0565b610e9583836123f4565b505050565b610ea2611f0f565b60008111610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc9061389e565b60405180910390fd5b6009548110610f29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2090613e5a565b60405180910390fd5b80600c819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610f61929190613ec6565b60405180910390a150565b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd390613f4e565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611006816123e0565b85841015611049576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104090613fba565b60405180910390fd5b856007600082825461105b9190613d22565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c89061404c565b60405180910390fd5b6110db83876124d4565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f385fede3060da9fef3bc54a7d11c73ddf15bef0e7b9ce408c518d2543b5f272d884260405161113a929190613cf9565b60405180910390a3505050505050565b6000600854905090565b61115c61258c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c0906140de565b60405180910390fd5b6111d38282612594565b5050565b6111df611f0f565b60006111e96114fb565b90506111f533826124d4565b50565b611200611f0f565b6008548111611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b9061414a565b60405180910390fd5b806009819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a814260405161127c9291906141b6565b60405180910390a150565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756112b1816123e0565b60008260ff16116112f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ee90614264565b60405180910390fd5b60648260ff16111561133e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611335906142f6565b60405180910390fd5b81600d60026101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a824260405161138a9291906143b9565b60405180910390a15050565b61139e611f0f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361140d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140490614467565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061145781611dfc565b6114646000801b33612594565b6114716000801b826123f4565b8073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9d6ad1956bc285ee763af0abf79be6b40f0fe495e250bd80c1bae2293ecc1df8426040516114f091906144d3565b60405180910390a350565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115589190613700565b602060405180830381865afa158015611575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115999190614516565b905090565b6115a6611f0f565b6115d07fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610e79565b50565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163a90613f4e565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561166d816123e0565b61167784866124d4565b60011515831515036116d8578373ffffffffffffffffffffffffffffffffffffffff167f40ce636b7925bb01ae0859a12eddfb1e34d01cb424b5603ad9622112b1b07e1286426040516116cb929190613cf9565b60405180910390a2611729565b8373ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d28642604051611720929190613cf9565b60405180910390a25b5050505050565b611738611f0f565b6117426000612676565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000600c54905090565b6000600b54905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756117a6816123e0565b600082116117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e0906145b5565b60405180910390fd5b600954821061182d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182490614621565b60405180910390fd5b816008819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a824260405161186592919061468d565b60405180910390a15050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905090565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600d60029054906101000a900460ff16905090565b6000801b81565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756119af816123e0565b6000826119ba6114fb565b6119c49190613c33565b9050600954811115611a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a029061473b565b60405180910390fd5b611a153384611f8d565b505050565b6000600954905090565b6000600d60019054906101000a900460ff16905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611a65816123e0565b60008260ff1611611aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa290614264565b60405180910390fd5b60648260ff161115611af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae9906147a7565b60405180910390fd5b81600d60016101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8242604051611b3e929190614839565b60405180910390a15050565b611b5382610a1e565b611b5c816123e0565b611b668383612594565b505050565b6000600a54905090565b6006600081819054906101000a90046fffffffffffffffffffffffffffffffff1680929190611ba390614891565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550503373ffffffffffffffffffffffffffffffffffffffff167f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c28342604051611c209190613593565b60405180910390a2611c35828686868561273a565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611c66816123e0565b60008211611ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca090614915565b60405180910390fd5b81600a819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8242604051611ce1929190614981565b60405180910390a15050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611d17816123e0565b60008260ff1611611d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5490614264565b60405180910390fd5b60648260ff161115611da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9b906147a7565b60405180910390fd5b81600d60006101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8242604051611df0929190614a2f565b60405180910390a15050565b611e04611f0f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90614add565b60405180910390fd5b611e7c81612676565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611f1761258c565b73ffffffffffffffffffffffffffffffffffffffff16611f35611871565b73ffffffffffffffffffffffffffffffffffffffff1614611f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8290614b49565b60405180910390fd5b565b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401611feb929190614b69565b602060405180830381865afa158015612008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202c9190614516565b101561206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206490614bde565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016120c89190613700565b602060405180830381865afa1580156120e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121099190614516565b81111561214b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214290614c4a565b60405180910390fd5b6000811161218e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218590614cb6565b60405180910390fd5b6121dd823083600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128ad909392919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f695b93e5f85b6ac34424e1299d94bc079fb230aa7e5568a4e2e6214828cc936b8242604051612225929190613cf9565b60405180910390a25050565b6000606482846122419190614cd6565b61224b9190614d18565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146122f45761229284846122fe565b8373ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d284426040516122da929190613cf9565b60405180910390a260011515821515036122f357600092505b5b8290509392505050565b60008111612341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233890614dbb565b60405180910390fd5b61238e8282600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129369092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f0d12e13d8f5c7a805c84c6c0deba2b2cf5ef80fddc09b6565d70cd5f97c116ad826040516123d49190614e27565b60405180910390a25050565b6123f1816123ec61258c565b6129bc565b50565b6123fe82826118d2565b6124d057600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061247561258c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6124dc612a41565b806124e56114fb565b1015612526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251d90614ec7565b60405180910390fd5b61253082826122fe565b3373ffffffffffffffffffffffffffffffffffffffff167f6dc924e950dd523781352d0a7468f2ee2905084dea2bb7411d7996224ce75a888242604051612578929190613cf9565b60405180910390a2612588612a8e565b5050565b600033905090565b61259e82826118d2565b156126725760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061261761258c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600c54600b5461274c9190613c33565b90506000818761275c9190613d22565b90508160085461276c9190613c33565b8710156127ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a590614f33565b60405180910390fd5b6127b83383611f8d565b6127e6600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b546122fe565b3373ffffffffffffffffffffffffffffffffffffffff167f8fed26ea05e17903891c5c2a70ac7ce2aeafbb48acf403b9defdb2c96ab2e5c3600b5442604051612830929190613cf9565b60405180910390a261284686600c546000612253565b506128548187878787610b10565b3373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e0824260405161289c929190613cf9565b60405180910390a250505050505050565b612930846323b872dd60e01b8585856040516024016128ce93929190614f53565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a98565b50505050565b6129b78363a9059cbb60e01b8484604051602401612955929190614f8a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a98565b505050565b6129c682826118d2565b612a3d576129d381612b60565b6129e18360001c6020612b8d565b6040516020016129f292919061504b565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3491906150be565b60405180910390fd5b5050565b6002805403612a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7c9061512c565b60405180910390fd5b60028081905550565b6001600281905550565b6000612afa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612dc99092919063ffffffff16565b9050600081511480612b1c575080806020019051810190612b1b9190615161565b5b612b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5290615200565b60405180910390fd5b505050565b6060612b868273ffffffffffffffffffffffffffffffffffffffff16601460ff16612b8d565b9050919050565b606060006002836002612ba09190614cd6565b612baa9190613c33565b67ffffffffffffffff811115612bc357612bc261331b565b5b6040519080825280601f01601f191660200182016040528015612bf55781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c2d57612c2c615220565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c9157612c90615220565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612cd19190614cd6565b612cdb9190613c33565b90505b6001811115612d7b577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612d1d57612d1c615220565b5b1a60f81b828281518110612d3457612d33615220565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612d749061524f565b9050612cde565b5060008414612dbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db6906152c4565b60405180910390fd5b8091505092915050565b6060612dd88484600085612de1565b90509392505050565b606082471015612e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1d90615356565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e4f91906153bd565b60006040518083038185875af1925050503d8060008114612e8c576040519150601f19603f3d011682016040523d82523d6000602084013e612e91565b606091505b5091509150612ea287838387612eae565b92505050949350505050565b60608315612f10576000835103612f0857612ec885612f23565b612f07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612efe90615420565b60405180910390fd5b5b829050612f1b565b612f1a8383612f46565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612f595781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8d91906150be565b60405180910390fd5b600082825260208201905092915050565b7f4574686572206e6f742061636365707465640000000000000000000000000000600082015250565b6000612fdd601283612f96565b9150612fe882612fa7565b602082019050919050565b6000602082019050818103600083015261300c81612fd0565b9050919050565b7f46756e6374696f6e206e6f7420737570706f7274656400000000000000000000600082015250565b6000613049601683612f96565b915061305482613013565b602082019050919050565b600060208201905081810360008301526130788161303c565b9050919050565b600060ff82169050919050565b6130958161307f565b82525050565b60006020820190506130b0600083018461308c565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130ff816130ca565b811461310a57600080fd5b50565b60008135905061311c816130f6565b92915050565b600060208284031215613138576131376130c0565b5b60006131468482850161310d565b91505092915050565b60008115159050919050565b6131648161314f565b82525050565b600060208201905061317f600083018461315b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131b082613185565b9050919050565b6131c0816131a5565b81146131cb57600080fd5b50565b6000813590506131dd816131b7565b92915050565b6000602082840312156131f9576131f86130c0565b5b6000613207848285016131ce565b91505092915050565b6000819050919050565b61322381613210565b811461322e57600080fd5b50565b6000813590506132408161321a565b92915050565b60006020828403121561325c5761325b6130c0565b5b600061326a84828501613231565b91505092915050565b61327c81613210565b82525050565b60006020820190506132976000830184613273565b92915050565b6000819050919050565b6132b08161329d565b81146132bb57600080fd5b50565b6000813590506132cd816132a7565b92915050565b6000602082840312156132e9576132e86130c0565b5b60006132f7848285016132be565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6133538261330a565b810181811067ffffffffffffffff821117156133725761337161331b565b5b80604052505050565b60006133856130b6565b9050613391828261334a565b919050565b600067ffffffffffffffff8211156133b1576133b061331b565b5b6133ba8261330a565b9050602081019050919050565b82818337600083830152505050565b60006133e96133e484613396565b61337b565b90508281526020810184848401111561340557613404613305565b5b6134108482856133c7565b509392505050565b600082601f83011261342d5761342c613300565b5b813561343d8482602086016133d6565b91505092915050565b600080600080600060a08688031215613462576134616130c0565b5b6000613470888289016132be565b9550506020613481888289016131ce565b9450506040613492888289016131ce565b93505060606134a3888289016131ce565b925050608086013567ffffffffffffffff8111156134c4576134c36130c5565b5b6134d088828901613418565b9150509295509295909350565b600080604083850312156134f4576134f36130c0565b5b600061350285828601613231565b9250506020613513858286016131ce565b9150509250929050565b60008060008060808587031215613537576135366130c0565b5b6000613545878288016132be565b9450506020613556878288016131ce565b9350506040613567878288016132be565b9250506060613578878288016131ce565b91505092959194509250565b61358d8161329d565b82525050565b60006020820190506135a86000830184613584565b92915050565b6135b78161307f565b81146135c257600080fd5b50565b6000813590506135d4816135ae565b92915050565b6000602082840312156135f0576135ef6130c0565b5b60006135fe848285016135c5565b91505092915050565b600061361282613185565b9050919050565b61362281613607565b811461362d57600080fd5b50565b60008135905061363f81613619565b92915050565b60006020828403121561365b5761365a6130c0565b5b600061366984828501613630565b91505092915050565b61367b8161314f565b811461368657600080fd5b50565b60008135905061369881613672565b92915050565b6000806000606084860312156136b7576136b66130c0565b5b60006136c5868287016132be565b93505060206136d6868287016131ce565b92505060406136e786828701613689565b9150509250925092565b6136fa816131a5565b82525050565b600060208201905061371560008301846136f1565b92915050565b600080600080600060a08688031215613737576137366130c0565b5b6000613745888289016131ce565b9550506020613756888289016131ce565b9450506040613767888289016131ce565b9350506060613778888289016132be565b925050608086013567ffffffffffffffff811115613799576137986130c5565b5b6137a588828901613418565b9150509295509295909350565b6000819050919050565b60006137d76137d26137cd84613185565b6137b2565b613185565b9050919050565b60006137e9826137bc565b9050919050565b60006137fb826137de565b9050919050565b61380b816137f0565b82525050565b60006020820190506138266000830184613802565b92915050565b7f4d656d62657273686970207061796d656e7473206d75737420626520706f736960008201527f7469766500000000000000000000000000000000000000000000000000000000602082015250565b6000613888602483612f96565b91506138938261382c565b604082019050919050565b600060208201905081810360008301526138b78161387b565b9050919050565b7f5061796d656e7420746f20427573696e6573732063616e6e6f7420657863656560008201527f64206d6178000000000000000000000000000000000000000000000000000000602082015250565b600061391a602583612f96565b9150613925826138be565b604082019050919050565b600060208201905081810360008301526139498161390d565b9050919050565b7f4d454d424552534849505f5041594d454e545f544f5f425553494e4553530000600082015250565b6000613986601e83612f96565b915061399182613950565b602082019050919050565b600060608201905081810360008301526139b581613979565b90506139c46020830185613584565b6139d16040830184613584565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015613a0c5780820151818401526020810190506139f1565b60008484015250505050565b6000613a23826139d8565b613a2d81856139e3565b9350613a3d8185602086016139ee565b80840191505092915050565b6000613a558284613a18565b915081905092915050565b7f436f6469676f20646520696e7669746163696f6e20696e76616c69646f000000600082015250565b6000613a96601d83612f96565b9150613aa182613a60565b602082019050919050565b60006020820190508181036000830152613ac581613a89565b9050919050565b7f4465706f7369746f206e6f20616c63616e7a61206d6f6e746f206d696e696d6f600082015250565b6000613b02602083612f96565b9150613b0d82613acc565b602082019050919050565b60006020820190508181036000830152613b3181613af5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613b728261329d565b9150613b7d8361329d565b925082613b8d57613b8c613b38565b5b828206905092915050565b7f56616c6f722064656c206465706f7369746f206e6f2065732076616c69646f00600082015250565b6000613bce601f83612f96565b9150613bd982613b98565b602082019050919050565b60006020820190508181036000830152613bfd81613bc1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c3e8261329d565b9150613c498361329d565b9250828201905080821115613c6157613c60613c04565b5b92915050565b7f4465706f7369746f2073757065726120656c206d6f6e746f20736f706f72746160008201527f646f20706f7220656c20636f6e747261746f0000000000000000000000000000602082015250565b6000613cc3603283612f96565b9150613cce82613c67565b604082019050919050565b60006020820190508181036000830152613cf281613cb6565b9050919050565b6000604082019050613d0e6000830185613584565b613d1b6020830184613584565b9392505050565b6000613d2d8261329d565b9150613d388361329d565b9250828203905081811115613d5057613d4f613c04565b5b92915050565b7f4572726f7220656e20656c2063616c63756c6f20646520636f6d6973696f6e6560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613db2602183612f96565b9150613dbd82613d56565b604082019050919050565b60006020820190508181036000830152613de181613da5565b9050919050565b7f5061796d656e7420746f2055706c696e652063616e6e6f74206578636565642060008201527f6d61780000000000000000000000000000000000000000000000000000000000602082015250565b6000613e44602383612f96565b9150613e4f82613de8565b604082019050919050565b60006020820190508181036000830152613e7381613e37565b9050919050565b7f4d454d424552534849505f5041594d454e545f544f5f55504c494e4500000000600082015250565b6000613eb0601c83612f96565b9150613ebb82613e7a565b602082019050919050565b60006060820190508181036000830152613edf81613ea3565b9050613eee6020830185613584565b613efb6040830184613584565b9392505050565b7f446972656363696f6e20696e76616c6964610000000000000000000000000000600082015250565b6000613f38601283612f96565b9150613f4382613f02565b602082019050919050565b60006020820190508181036000830152613f6781613f2b565b9050919050565b7f4d6f6e746f20696e76616c69646f000000000000000000000000000000000000600082015250565b6000613fa4600e83612f96565b9150613faf82613f6e565b602082019050919050565b60006020820190508181036000830152613fd381613f97565b9050919050565b7f446972656363696f6e2064652077616c6c65742064652064657374696e6f206e60008201527f6f2076616c696461000000000000000000000000000000000000000000000000602082015250565b6000614036602883612f96565b915061404182613fda565b604082019050919050565b6000602082019050818103600083015261406581614029565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006140c8602f83612f96565b91506140d38261406c565b604082019050919050565b600060208201905081810360008301526140f7816140bb565b9050919050565b7f4d6178206d75737420657863656564206d696e00000000000000000000000000600082015250565b6000614134601383612f96565b915061413f826140fe565b602082019050919050565b6000602082019050818103600083015261416381614127565b9050919050565b7f4d41585f434f4e54524143545f42414c414e4345000000000000000000000000600082015250565b60006141a0601483612f96565b91506141ab8261416a565b602082019050919050565b600060608201905081810360008301526141cf81614193565b90506141de6020830185613584565b6141eb6040830184613584565b9392505050565b7f436f6d6d697373696f6e207061796d656e7473206d75737420626520706f736960008201527f7469766500000000000000000000000000000000000000000000000000000000602082015250565b600061424e602483612f96565b9150614259826141f2565b604082019050919050565b6000602082019050818103600083015261427d81614241565b9050919050565b7f546f74616c20636f6d6d697373696f6e2063616e6e6f7420657863656564203160008201527f3030250000000000000000000000000000000000000000000000000000000000602082015250565b60006142e0602383612f96565b91506142eb82614284565b604082019050919050565b6000602082019050818103600083015261430f816142d3565b9050919050565b7f434f4d4d495353494f4e5f5045525f54484952545f4c4556454c5f555044415460008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b6000614372602283612f96565b915061437d82614316565b604082019050919050565b60006143a361439e6143998461307f565b6137b2565b61329d565b9050919050565b6143b381614388565b82525050565b600060608201905081810360008301526143d281614365565b90506143e160208301856143aa565b6143ee6040830184613584565b9392505050565b7f446972656363696f6e206465206e756576612077616c6c6574206e6f2076616c60008201527f6964610000000000000000000000000000000000000000000000000000000000602082015250565b6000614451602383612f96565b915061445c826143f5565b604082019050919050565b6000602082019050818103600083015261448081614444565b9050919050565b7f425553494e4553535f57414c4c45540000000000000000000000000000000000600082015250565b60006144bd600f83612f96565b91506144c882614487565b602082019050919050565b600060408201905081810360008301526144ec816144b0565b90506144fb6020830184613584565b92915050565b600081519050614510816132a7565b92915050565b60006020828403121561452c5761452b6130c0565b5b600061453a84828501614501565b91505092915050565b7f4d696e696d756d20616d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b600061459f602583612f96565b91506145aa82614543565b604082019050919050565b600060208201905081810360008301526145ce81614592565b9050919050565b7f4d696e2063616e6e6f7420657863656564206d61780000000000000000000000600082015250565b600061460b601583612f96565b9150614616826145d5565b602082019050919050565b6000602082019050818103600083015261463a816145fe565b9050919050565b7f4d494e5f414d4f554e545f544f5f4445504f5349540000000000000000000000600082015250565b6000614677601583612f96565b915061468282614641565b602082019050919050565b600060608201905081810360008301526146a68161466a565b90506146b56020830185613584565b6146c26040830184613584565b9392505050565b7f456c206465706f7369746f206e6f207075656465207375706572617220656c2060008201527f6c696d6974652064656c20636f6e747261746f00000000000000000000000000602082015250565b6000614725603383612f96565b9150614730826146c9565b604082019050919050565b6000602082019050818103600083015261475481614718565b9050919050565b7f436f6d6d697373696f6e2063616e6e6f74206578636565642031303025000000600082015250565b6000614791601d83612f96565b915061479c8261475b565b602082019050919050565b600060208201905081810360008301526147c081614784565b9050919050565b7f434f4d4d495353494f4e5f5045525f5345434f4e445f4c4556454c5f5550444160008201527f5445440000000000000000000000000000000000000000000000000000000000602082015250565b6000614823602383612f96565b915061482e826147c7565b604082019050919050565b6000606082019050818103600083015261485281614816565b905061486160208301856143aa565b61486e6040830184613584565b9392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061489c82614875565b91506fffffffffffffffffffffffffffffffff82036148be576148bd613c04565b5b600182019050919050565b7f4d756c7469706c65206d7573742062652067726561746572207468616e203000600082015250565b60006148ff601f83612f96565b915061490a826148c9565b602082019050919050565b6000602082019050818103600083015261492e816148f2565b9050919050565b7f4445504f5349545f4d554c5449504c4500000000000000000000000000000000600082015250565b600061496b601083612f96565b915061497682614935565b602082019050919050565b6000606082019050818103600083015261499a8161495e565b90506149a96020830185613584565b6149b66040830184613584565b9392505050565b7f434f4d4d495353494f4e5f5045525f46495253545f4c4556454c5f555044415460008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b6000614a19602283612f96565b9150614a24826149bd565b604082019050919050565b60006060820190508181036000830152614a4881614a0c565b9050614a5760208301856143aa565b614a646040830184613584565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614ac7602683612f96565b9150614ad282614a6b565b604082019050919050565b60006020820190508181036000830152614af681614aba565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614b33602083612f96565b9150614b3e82614afd565b602082019050919050565b60006020820190508181036000830152614b6281614b26565b9050919050565b6000604082019050614b7e60008301856136f1565b614b8b60208301846136f1565b9392505050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000614bc8601683612f96565b9150614bd382614b92565b602082019050919050565b60006020820190508181036000830152614bf781614bbb565b9050919050565b7f4e6f206375656e74617320636f6e205553445420656e2074752077616c6c6574600082015250565b6000614c34602083612f96565b9150614c3f82614bfe565b602082019050919050565b60006020820190508181036000830152614c6381614c27565b9050919050565b7f4465706f7369746f206e6f2070756564652073657220766163696f0000000000600082015250565b6000614ca0601b83612f96565b9150614cab82614c6a565b602082019050919050565b60006020820190508181036000830152614ccf81614c93565b9050919050565b6000614ce18261329d565b9150614cec8361329d565b9250828202614cfa8161329d565b91508282048414831517614d1157614d10613c04565b5b5092915050565b6000614d238261329d565b9150614d2e8361329d565b925082614d3e57614d3d613b38565b5b828204905092915050565b7f4c612063616e74696461642061207472616e736665726972206465626520736560008201527f72206d61796f722061206365726f000000000000000000000000000000000000602082015250565b6000614da5602e83612f96565b9150614db082614d49565b604082019050919050565b60006020820190508181036000830152614dd481614d98565b9050919050565b7f46726f6d20627573696e65737320636f6e747261637400000000000000000000600082015250565b6000614e11601683612f96565b9150614e1c82614ddb565b602082019050919050565b60006040820190508181036000830152614e4081614e04565b9050614e4f6020830184613584565b92915050565b7f436f6e747261746f206e6f206375656e746120636f6e20737566696369656e7460008201527f657320666f6e646f730000000000000000000000000000000000000000000000602082015250565b6000614eb1602983612f96565b9150614ebc82614e55565b604082019050919050565b60006020820190508181036000830152614ee081614ea4565b9050919050565b7f4d6f6e746f20696e737566696369656e74650000000000000000000000000000600082015250565b6000614f1d601283612f96565b9150614f2882614ee7565b602082019050919050565b60006020820190508181036000830152614f4c81614f10565b9050919050565b6000606082019050614f6860008301866136f1565b614f7560208301856136f1565b614f826040830184613584565b949350505050565b6000604082019050614f9f60008301856136f1565b614fac6020830184613584565b9392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000614fe96017836139e3565b9150614ff482614fb3565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006150356011836139e3565b915061504082614fff565b601182019050919050565b600061505682614fdc565b91506150628285613a18565b915061506d82615028565b91506150798284613a18565b91508190509392505050565b6000615090826139d8565b61509a8185612f96565b93506150aa8185602086016139ee565b6150b38161330a565b840191505092915050565b600060208201905081810360008301526150d88184615085565b905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000615116601f83612f96565b9150615121826150e0565b602082019050919050565b6000602082019050818103600083015261514581615109565b9050919050565b60008151905061515b81613672565b92915050565b600060208284031215615177576151766130c0565b5b60006151858482850161514c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006151ea602a83612f96565b91506151f58261518e565b604082019050919050565b60006020820190508181036000830152615219816151dd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061525a8261329d565b91506000820361526d5761526c613c04565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006152ae602083612f96565b91506152b982615278565b602082019050919050565b600060208201905081810360008301526152dd816152a1565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000615340602683612f96565b915061534b826152e4565b604082019050919050565b6000602082019050818103600083015261536f81615333565b9050919050565b600081519050919050565b600081905092915050565b600061539782615376565b6153a18185615381565b93506153b18185602086016139ee565b80840191505092915050565b60006153c9828461538c565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061540a601d83612f96565b9150615415826153d4565b602082019050919050565b60006020820190508181036000830152615439816153fd565b905091905056fea264697066735822122083cd038c3d0b5096a4ea1f936fe6cf13239f1080ec17daedf06144e5a96c889464736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061023f5760003560e01c806377f339751161012e578063b7130870116100ab578063d79c5abb1161006f578063d79c5abb14610889578063e2d71d6a146108b2578063e341c7db146108db578063f2fde38b14610904578063fc0c546a1461092d5761027f565b8063b7130870146107b6578063bcf3f6ff146107e1578063bd69c1271461080c578063d547741f14610835578063d59392de1461085e5761027f565b806391d14854116100f257806391d14854146106cf57806394fbe8461461070c578063a217fddf14610737578063aa331db514610762578063b6b55f251461078d5761027f565b806377f33975146105fa57806388e19794146106255780638cb20e6f146106505780638da5cb5b146106795780638f180305146106a45761027f565b806336568abe116101bc5780636d790081116101805780636d7900811461053b578063704802751461056657806370f710791461058f578063715018a6146105b857806375b238fc146105cf5761027f565b806336568abe146104805780633ccfd60b146104a95780633f4bf03c146104c057806348d5c401146104e95780635afe70d7146105125761027f565b80632a5e63a1116102035780632a5e63a1146103b15780632f2ff15d146103da578063312adf5814610403578063350705501461042c578063361f1ad3146104555761027f565b80630109705c146102ba57806301ffc9a7146102e55780631785f53c14610322578063248a9ca31461034b57806327f3547f146103885761027f565b3661027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690612ff3565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b19061305f565b60405180910390fd5b3480156102c657600080fd5b506102cf610958565b6040516102dc919061309b565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190613122565b61096f565b604051610319919061316a565b60405180910390f35b34801561032e57600080fd5b50610349600480360381019061034491906131e3565b6109e9565b005b34801561035757600080fd5b50610372600480360381019061036d9190613246565b610a1e565b60405161037f9190613282565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa91906132d3565b610a3e565b005b3480156103bd57600080fd5b506103d860048036038101906103d39190613446565b610b10565b005b3480156103e657600080fd5b5061040160048036038101906103fc91906134dd565b610e79565b005b34801561040f57600080fd5b5061042a600480360381019061042591906132d3565b610e9a565b005b34801561043857600080fd5b50610453600480360381019061044e919061351d565b610f6c565b005b34801561046157600080fd5b5061046a61114a565b6040516104779190613593565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a291906134dd565b611154565b005b3480156104b557600080fd5b506104be6111d7565b005b3480156104cc57600080fd5b506104e760048036038101906104e291906132d3565b6111f8565b005b3480156104f557600080fd5b50610510600480360381019061050b91906135da565b611287565b005b34801561051e57600080fd5b5061053960048036038101906105349190613645565b611396565b005b34801561054757600080fd5b506105506114fb565b60405161055d9190613593565b60405180910390f35b34801561057257600080fd5b5061058d600480360381019061058891906131e3565b61159e565b005b34801561059b57600080fd5b506105b660048036038101906105b1919061369e565b6115d3565b005b3480156105c457600080fd5b506105cd611730565b005b3480156105db57600080fd5b506105e4611744565b6040516105f19190613282565b60405180910390f35b34801561060657600080fd5b5061060f611768565b60405161061c9190613593565b60405180910390f35b34801561063157600080fd5b5061063a611772565b6040516106479190613593565b60405180910390f35b34801561065c57600080fd5b50610677600480360381019061067291906132d3565b61177c565b005b34801561068557600080fd5b5061068e611871565b60405161069b9190613700565b60405180910390f35b3480156106b057600080fd5b506106b961189a565b6040516106c69190613593565b60405180910390f35b3480156106db57600080fd5b506106f660048036038101906106f191906134dd565b6118d2565b604051610703919061316a565b60405180910390f35b34801561071857600080fd5b5061072161193d565b60405161072e919061309b565b60405180910390f35b34801561074357600080fd5b5061074c611954565b6040516107599190613282565b60405180910390f35b34801561076e57600080fd5b5061077761195b565b6040516107849190613700565b60405180910390f35b34801561079957600080fd5b506107b460048036038101906107af91906132d3565b611985565b005b3480156107c257600080fd5b506107cb611a1a565b6040516107d89190613593565b60405180910390f35b3480156107ed57600080fd5b506107f6611a24565b604051610803919061309b565b60405180910390f35b34801561081857600080fd5b50610833600480360381019061082e91906135da565b611a3b565b005b34801561084157600080fd5b5061085c600480360381019061085791906134dd565b611b4a565b005b34801561086a57600080fd5b50610873611b6b565b6040516108809190613593565b60405180910390f35b34801561089557600080fd5b506108b060048036038101906108ab919061371b565b611b75565b005b3480156108be57600080fd5b506108d960048036038101906108d491906132d3565b611c3c565b005b3480156108e757600080fd5b5061090260048036038101906108fd91906135da565b611ced565b005b34801561091057600080fd5b5061092b600480360381019061092691906131e3565b611dfc565b005b34801561093957600080fd5b50610942611e7f565b60405161094f9190613811565b60405180910390f35b6000600d60009054906101000a900460ff16905090565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109e257506109e182611ea5565b5b9050919050565b6109f1611f0f565b610a1b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611b4a565b50565b600060016000838152602001908152602001600020600101549050919050565b610a46611f0f565b60008111610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a809061389e565b60405180910390fd5b6009548110610acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac490613930565b60405180910390fd5b80600b819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610b0592919061399c565b60405180910390a150565b8060035481604051602001610b259190613a49565b6040516020818303038152906040528051906020012014610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290613aac565b60405180910390fd5b600854861015610bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb790613b18565b60405180910390fd5b6000600a5487610bd09190613b67565b14610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790613be4565b60405180910390fd5b60095486600754610c219190613c33565b1115610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5990613cd9565b60405180910390fd5b610c6c3387611f8d565b3373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e08742604051610cb4929190613cf9565b60405180910390a26000610cda87600d60009054906101000a900460ff1660ff16612231565b90506000610cfa88600d60019054906101000a900460ff1660ff16612231565b90506000610d1a89600d60029054906101000a900460ff1660ff16612231565b90506000818385610d2b9190613c33565b610d359190613c33565b90506000818b610d459190613d22565b9050818111610d89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8090613dc8565b60405180910390fd5b610d958a866001612253565b9450610da389856001612253565b9350610db188846001612253565b9250828486610dc09190613c33565b610dca9190613c33565b81610dd59190613c33565b9050610e03600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826122fe565b8a60076000828254610e159190613c33565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f3428e989e797df55e8af7c22735e19d98f469023d200174911b2c8e0870240fe8242604051610e64929190613cf9565b60405180910390a25050505050505050505050565b610e8282610a1e565b610e8b816123e0565b610e9583836123f4565b505050565b610ea2611f0f565b60008111610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc9061389e565b60405180910390fd5b6009548110610f29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2090613e5a565b60405180910390fd5b80600c819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8142604051610f61929190613ec6565b60405180910390a150565b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd390613f4e565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611006816123e0565b85841015611049576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104090613fba565b60405180910390fd5b856007600082825461105b9190613d22565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c89061404c565b60405180910390fd5b6110db83876124d4565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f385fede3060da9fef3bc54a7d11c73ddf15bef0e7b9ce408c518d2543b5f272d884260405161113a929190613cf9565b60405180910390a3505050505050565b6000600854905090565b61115c61258c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c0906140de565b60405180910390fd5b6111d38282612594565b5050565b6111df611f0f565b60006111e96114fb565b90506111f533826124d4565b50565b611200611f0f565b6008548111611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b9061414a565b60405180910390fd5b806009819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a814260405161127c9291906141b6565b60405180910390a150565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756112b1816123e0565b60008260ff16116112f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ee90614264565b60405180910390fd5b60648260ff16111561133e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611335906142f6565b60405180910390fd5b81600d60026101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a824260405161138a9291906143b9565b60405180910390a15050565b61139e611f0f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361140d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140490614467565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061145781611dfc565b6114646000801b33612594565b6114716000801b826123f4565b8073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9d6ad1956bc285ee763af0abf79be6b40f0fe495e250bd80c1bae2293ecc1df8426040516114f091906144d3565b60405180910390a350565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115589190613700565b602060405180830381865afa158015611575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115999190614516565b905090565b6115a6611f0f565b6115d07fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610e79565b50565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163a90613f4e565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561166d816123e0565b61167784866124d4565b60011515831515036116d8578373ffffffffffffffffffffffffffffffffffffffff167f40ce636b7925bb01ae0859a12eddfb1e34d01cb424b5603ad9622112b1b07e1286426040516116cb929190613cf9565b60405180910390a2611729565b8373ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d28642604051611720929190613cf9565b60405180910390a25b5050505050565b611738611f0f565b6117426000612676565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000600c54905090565b6000600b54905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756117a6816123e0565b600082116117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e0906145b5565b60405180910390fd5b600954821061182d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182490614621565b60405180910390fd5b816008819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a824260405161186592919061468d565b60405180910390a15050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905090565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600d60029054906101000a900460ff16905090565b6000801b81565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756119af816123e0565b6000826119ba6114fb565b6119c49190613c33565b9050600954811115611a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a029061473b565b60405180910390fd5b611a153384611f8d565b505050565b6000600954905090565b6000600d60019054906101000a900460ff16905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611a65816123e0565b60008260ff1611611aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa290614264565b60405180910390fd5b60648260ff161115611af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae9906147a7565b60405180910390fd5b81600d60016101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8242604051611b3e929190614839565b60405180910390a15050565b611b5382610a1e565b611b5c816123e0565b611b668383612594565b505050565b6000600a54905090565b6006600081819054906101000a90046fffffffffffffffffffffffffffffffff1680929190611ba390614891565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550503373ffffffffffffffffffffffffffffffffffffffff167f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c28342604051611c209190613593565b60405180910390a2611c35828686868561273a565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611c66816123e0565b60008211611ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca090614915565b60405180910390fd5b81600a819055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8242604051611ce1929190614981565b60405180910390a15050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611d17816123e0565b60008260ff1611611d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5490614264565b60405180910390fd5b60648260ff161115611da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9b906147a7565b60405180910390fd5b81600d60006101000a81548160ff021916908360ff1602179055507fd7474166e78731bc168caca1fe1ccebbd6f3c95baee64997902e6b48f442b81a8242604051611df0929190614a2f565b60405180910390a15050565b611e04611f0f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90614add565b60405180910390fd5b611e7c81612676565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611f1761258c565b73ffffffffffffffffffffffffffffffffffffffff16611f35611871565b73ffffffffffffffffffffffffffffffffffffffff1614611f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8290614b49565b60405180910390fd5b565b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401611feb929190614b69565b602060405180830381865afa158015612008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202c9190614516565b101561206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206490614bde565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016120c89190613700565b602060405180830381865afa1580156120e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121099190614516565b81111561214b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214290614c4a565b60405180910390fd5b6000811161218e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218590614cb6565b60405180910390fd5b6121dd823083600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128ad909392919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f695b93e5f85b6ac34424e1299d94bc079fb230aa7e5568a4e2e6214828cc936b8242604051612225929190613cf9565b60405180910390a25050565b6000606482846122419190614cd6565b61224b9190614d18565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146122f45761229284846122fe565b8373ffffffffffffffffffffffffffffffffffffffff167fe37b2ae9cc03ec700b9146c4df2fc797e7a1119c08fc25513755ab5315faa6d284426040516122da929190613cf9565b60405180910390a260011515821515036122f357600092505b5b8290509392505050565b60008111612341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233890614dbb565b60405180910390fd5b61238e8282600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129369092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f0d12e13d8f5c7a805c84c6c0deba2b2cf5ef80fddc09b6565d70cd5f97c116ad826040516123d49190614e27565b60405180910390a25050565b6123f1816123ec61258c565b6129bc565b50565b6123fe82826118d2565b6124d057600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061247561258c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6124dc612a41565b806124e56114fb565b1015612526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251d90614ec7565b60405180910390fd5b61253082826122fe565b3373ffffffffffffffffffffffffffffffffffffffff167f6dc924e950dd523781352d0a7468f2ee2905084dea2bb7411d7996224ce75a888242604051612578929190613cf9565b60405180910390a2612588612a8e565b5050565b600033905090565b61259e82826118d2565b156126725760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061261761258c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600c54600b5461274c9190613c33565b90506000818761275c9190613d22565b90508160085461276c9190613c33565b8710156127ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a590614f33565b60405180910390fd5b6127b83383611f8d565b6127e6600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b546122fe565b3373ffffffffffffffffffffffffffffffffffffffff167f8fed26ea05e17903891c5c2a70ac7ce2aeafbb48acf403b9defdb2c96ab2e5c3600b5442604051612830929190613cf9565b60405180910390a261284686600c546000612253565b506128548187878787610b10565b3373ffffffffffffffffffffffffffffffffffffffff167f6e88c611323cf4a2bd9e908bf748750db2a19609319972f06a960f492071e0e0824260405161289c929190613cf9565b60405180910390a250505050505050565b612930846323b872dd60e01b8585856040516024016128ce93929190614f53565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a98565b50505050565b6129b78363a9059cbb60e01b8484604051602401612955929190614f8a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a98565b505050565b6129c682826118d2565b612a3d576129d381612b60565b6129e18360001c6020612b8d565b6040516020016129f292919061504b565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3491906150be565b60405180910390fd5b5050565b6002805403612a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7c9061512c565b60405180910390fd5b60028081905550565b6001600281905550565b6000612afa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612dc99092919063ffffffff16565b9050600081511480612b1c575080806020019051810190612b1b9190615161565b5b612b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5290615200565b60405180910390fd5b505050565b6060612b868273ffffffffffffffffffffffffffffffffffffffff16601460ff16612b8d565b9050919050565b606060006002836002612ba09190614cd6565b612baa9190613c33565b67ffffffffffffffff811115612bc357612bc261331b565b5b6040519080825280601f01601f191660200182016040528015612bf55781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c2d57612c2c615220565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c9157612c90615220565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612cd19190614cd6565b612cdb9190613c33565b90505b6001811115612d7b577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612d1d57612d1c615220565b5b1a60f81b828281518110612d3457612d33615220565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612d749061524f565b9050612cde565b5060008414612dbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db6906152c4565b60405180910390fd5b8091505092915050565b6060612dd88484600085612de1565b90509392505050565b606082471015612e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1d90615356565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e4f91906153bd565b60006040518083038185875af1925050503d8060008114612e8c576040519150601f19603f3d011682016040523d82523d6000602084013e612e91565b606091505b5091509150612ea287838387612eae565b92505050949350505050565b60608315612f10576000835103612f0857612ec885612f23565b612f07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612efe90615420565b60405180910390fd5b5b829050612f1b565b612f1a8383612f46565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612f595781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8d91906150be565b60405180910390fd5b600082825260208201905092915050565b7f4574686572206e6f742061636365707465640000000000000000000000000000600082015250565b6000612fdd601283612f96565b9150612fe882612fa7565b602082019050919050565b6000602082019050818103600083015261300c81612fd0565b9050919050565b7f46756e6374696f6e206e6f7420737570706f7274656400000000000000000000600082015250565b6000613049601683612f96565b915061305482613013565b602082019050919050565b600060208201905081810360008301526130788161303c565b9050919050565b600060ff82169050919050565b6130958161307f565b82525050565b60006020820190506130b0600083018461308c565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130ff816130ca565b811461310a57600080fd5b50565b60008135905061311c816130f6565b92915050565b600060208284031215613138576131376130c0565b5b60006131468482850161310d565b91505092915050565b60008115159050919050565b6131648161314f565b82525050565b600060208201905061317f600083018461315b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131b082613185565b9050919050565b6131c0816131a5565b81146131cb57600080fd5b50565b6000813590506131dd816131b7565b92915050565b6000602082840312156131f9576131f86130c0565b5b6000613207848285016131ce565b91505092915050565b6000819050919050565b61322381613210565b811461322e57600080fd5b50565b6000813590506132408161321a565b92915050565b60006020828403121561325c5761325b6130c0565b5b600061326a84828501613231565b91505092915050565b61327c81613210565b82525050565b60006020820190506132976000830184613273565b92915050565b6000819050919050565b6132b08161329d565b81146132bb57600080fd5b50565b6000813590506132cd816132a7565b92915050565b6000602082840312156132e9576132e86130c0565b5b60006132f7848285016132be565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6133538261330a565b810181811067ffffffffffffffff821117156133725761337161331b565b5b80604052505050565b60006133856130b6565b9050613391828261334a565b919050565b600067ffffffffffffffff8211156133b1576133b061331b565b5b6133ba8261330a565b9050602081019050919050565b82818337600083830152505050565b60006133e96133e484613396565b61337b565b90508281526020810184848401111561340557613404613305565b5b6134108482856133c7565b509392505050565b600082601f83011261342d5761342c613300565b5b813561343d8482602086016133d6565b91505092915050565b600080600080600060a08688031215613462576134616130c0565b5b6000613470888289016132be565b9550506020613481888289016131ce565b9450506040613492888289016131ce565b93505060606134a3888289016131ce565b925050608086013567ffffffffffffffff8111156134c4576134c36130c5565b5b6134d088828901613418565b9150509295509295909350565b600080604083850312156134f4576134f36130c0565b5b600061350285828601613231565b9250506020613513858286016131ce565b9150509250929050565b60008060008060808587031215613537576135366130c0565b5b6000613545878288016132be565b9450506020613556878288016131ce565b9350506040613567878288016132be565b9250506060613578878288016131ce565b91505092959194509250565b61358d8161329d565b82525050565b60006020820190506135a86000830184613584565b92915050565b6135b78161307f565b81146135c257600080fd5b50565b6000813590506135d4816135ae565b92915050565b6000602082840312156135f0576135ef6130c0565b5b60006135fe848285016135c5565b91505092915050565b600061361282613185565b9050919050565b61362281613607565b811461362d57600080fd5b50565b60008135905061363f81613619565b92915050565b60006020828403121561365b5761365a6130c0565b5b600061366984828501613630565b91505092915050565b61367b8161314f565b811461368657600080fd5b50565b60008135905061369881613672565b92915050565b6000806000606084860312156136b7576136b66130c0565b5b60006136c5868287016132be565b93505060206136d6868287016131ce565b92505060406136e786828701613689565b9150509250925092565b6136fa816131a5565b82525050565b600060208201905061371560008301846136f1565b92915050565b600080600080600060a08688031215613737576137366130c0565b5b6000613745888289016131ce565b9550506020613756888289016131ce565b9450506040613767888289016131ce565b9350506060613778888289016132be565b925050608086013567ffffffffffffffff811115613799576137986130c5565b5b6137a588828901613418565b9150509295509295909350565b6000819050919050565b60006137d76137d26137cd84613185565b6137b2565b613185565b9050919050565b60006137e9826137bc565b9050919050565b60006137fb826137de565b9050919050565b61380b816137f0565b82525050565b60006020820190506138266000830184613802565b92915050565b7f4d656d62657273686970207061796d656e7473206d75737420626520706f736960008201527f7469766500000000000000000000000000000000000000000000000000000000602082015250565b6000613888602483612f96565b91506138938261382c565b604082019050919050565b600060208201905081810360008301526138b78161387b565b9050919050565b7f5061796d656e7420746f20427573696e6573732063616e6e6f7420657863656560008201527f64206d6178000000000000000000000000000000000000000000000000000000602082015250565b600061391a602583612f96565b9150613925826138be565b604082019050919050565b600060208201905081810360008301526139498161390d565b9050919050565b7f4d454d424552534849505f5041594d454e545f544f5f425553494e4553530000600082015250565b6000613986601e83612f96565b915061399182613950565b602082019050919050565b600060608201905081810360008301526139b581613979565b90506139c46020830185613584565b6139d16040830184613584565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015613a0c5780820151818401526020810190506139f1565b60008484015250505050565b6000613a23826139d8565b613a2d81856139e3565b9350613a3d8185602086016139ee565b80840191505092915050565b6000613a558284613a18565b915081905092915050565b7f436f6469676f20646520696e7669746163696f6e20696e76616c69646f000000600082015250565b6000613a96601d83612f96565b9150613aa182613a60565b602082019050919050565b60006020820190508181036000830152613ac581613a89565b9050919050565b7f4465706f7369746f206e6f20616c63616e7a61206d6f6e746f206d696e696d6f600082015250565b6000613b02602083612f96565b9150613b0d82613acc565b602082019050919050565b60006020820190508181036000830152613b3181613af5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613b728261329d565b9150613b7d8361329d565b925082613b8d57613b8c613b38565b5b828206905092915050565b7f56616c6f722064656c206465706f7369746f206e6f2065732076616c69646f00600082015250565b6000613bce601f83612f96565b9150613bd982613b98565b602082019050919050565b60006020820190508181036000830152613bfd81613bc1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c3e8261329d565b9150613c498361329d565b9250828201905080821115613c6157613c60613c04565b5b92915050565b7f4465706f7369746f2073757065726120656c206d6f6e746f20736f706f72746160008201527f646f20706f7220656c20636f6e747261746f0000000000000000000000000000602082015250565b6000613cc3603283612f96565b9150613cce82613c67565b604082019050919050565b60006020820190508181036000830152613cf281613cb6565b9050919050565b6000604082019050613d0e6000830185613584565b613d1b6020830184613584565b9392505050565b6000613d2d8261329d565b9150613d388361329d565b9250828203905081811115613d5057613d4f613c04565b5b92915050565b7f4572726f7220656e20656c2063616c63756c6f20646520636f6d6973696f6e6560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613db2602183612f96565b9150613dbd82613d56565b604082019050919050565b60006020820190508181036000830152613de181613da5565b9050919050565b7f5061796d656e7420746f2055706c696e652063616e6e6f74206578636565642060008201527f6d61780000000000000000000000000000000000000000000000000000000000602082015250565b6000613e44602383612f96565b9150613e4f82613de8565b604082019050919050565b60006020820190508181036000830152613e7381613e37565b9050919050565b7f4d454d424552534849505f5041594d454e545f544f5f55504c494e4500000000600082015250565b6000613eb0601c83612f96565b9150613ebb82613e7a565b602082019050919050565b60006060820190508181036000830152613edf81613ea3565b9050613eee6020830185613584565b613efb6040830184613584565b9392505050565b7f446972656363696f6e20696e76616c6964610000000000000000000000000000600082015250565b6000613f38601283612f96565b9150613f4382613f02565b602082019050919050565b60006020820190508181036000830152613f6781613f2b565b9050919050565b7f4d6f6e746f20696e76616c69646f000000000000000000000000000000000000600082015250565b6000613fa4600e83612f96565b9150613faf82613f6e565b602082019050919050565b60006020820190508181036000830152613fd381613f97565b9050919050565b7f446972656363696f6e2064652077616c6c65742064652064657374696e6f206e60008201527f6f2076616c696461000000000000000000000000000000000000000000000000602082015250565b6000614036602883612f96565b915061404182613fda565b604082019050919050565b6000602082019050818103600083015261406581614029565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006140c8602f83612f96565b91506140d38261406c565b604082019050919050565b600060208201905081810360008301526140f7816140bb565b9050919050565b7f4d6178206d75737420657863656564206d696e00000000000000000000000000600082015250565b6000614134601383612f96565b915061413f826140fe565b602082019050919050565b6000602082019050818103600083015261416381614127565b9050919050565b7f4d41585f434f4e54524143545f42414c414e4345000000000000000000000000600082015250565b60006141a0601483612f96565b91506141ab8261416a565b602082019050919050565b600060608201905081810360008301526141cf81614193565b90506141de6020830185613584565b6141eb6040830184613584565b9392505050565b7f436f6d6d697373696f6e207061796d656e7473206d75737420626520706f736960008201527f7469766500000000000000000000000000000000000000000000000000000000602082015250565b600061424e602483612f96565b9150614259826141f2565b604082019050919050565b6000602082019050818103600083015261427d81614241565b9050919050565b7f546f74616c20636f6d6d697373696f6e2063616e6e6f7420657863656564203160008201527f3030250000000000000000000000000000000000000000000000000000000000602082015250565b60006142e0602383612f96565b91506142eb82614284565b604082019050919050565b6000602082019050818103600083015261430f816142d3565b9050919050565b7f434f4d4d495353494f4e5f5045525f54484952545f4c4556454c5f555044415460008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b6000614372602283612f96565b915061437d82614316565b604082019050919050565b60006143a361439e6143998461307f565b6137b2565b61329d565b9050919050565b6143b381614388565b82525050565b600060608201905081810360008301526143d281614365565b90506143e160208301856143aa565b6143ee6040830184613584565b9392505050565b7f446972656363696f6e206465206e756576612077616c6c6574206e6f2076616c60008201527f6964610000000000000000000000000000000000000000000000000000000000602082015250565b6000614451602383612f96565b915061445c826143f5565b604082019050919050565b6000602082019050818103600083015261448081614444565b9050919050565b7f425553494e4553535f57414c4c45540000000000000000000000000000000000600082015250565b60006144bd600f83612f96565b91506144c882614487565b602082019050919050565b600060408201905081810360008301526144ec816144b0565b90506144fb6020830184613584565b92915050565b600081519050614510816132a7565b92915050565b60006020828403121561452c5761452b6130c0565b5b600061453a84828501614501565b91505092915050565b7f4d696e696d756d20616d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b600061459f602583612f96565b91506145aa82614543565b604082019050919050565b600060208201905081810360008301526145ce81614592565b9050919050565b7f4d696e2063616e6e6f7420657863656564206d61780000000000000000000000600082015250565b600061460b601583612f96565b9150614616826145d5565b602082019050919050565b6000602082019050818103600083015261463a816145fe565b9050919050565b7f4d494e5f414d4f554e545f544f5f4445504f5349540000000000000000000000600082015250565b6000614677601583612f96565b915061468282614641565b602082019050919050565b600060608201905081810360008301526146a68161466a565b90506146b56020830185613584565b6146c26040830184613584565b9392505050565b7f456c206465706f7369746f206e6f207075656465207375706572617220656c2060008201527f6c696d6974652064656c20636f6e747261746f00000000000000000000000000602082015250565b6000614725603383612f96565b9150614730826146c9565b604082019050919050565b6000602082019050818103600083015261475481614718565b9050919050565b7f436f6d6d697373696f6e2063616e6e6f74206578636565642031303025000000600082015250565b6000614791601d83612f96565b915061479c8261475b565b602082019050919050565b600060208201905081810360008301526147c081614784565b9050919050565b7f434f4d4d495353494f4e5f5045525f5345434f4e445f4c4556454c5f5550444160008201527f5445440000000000000000000000000000000000000000000000000000000000602082015250565b6000614823602383612f96565b915061482e826147c7565b604082019050919050565b6000606082019050818103600083015261485281614816565b905061486160208301856143aa565b61486e6040830184613584565b9392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061489c82614875565b91506fffffffffffffffffffffffffffffffff82036148be576148bd613c04565b5b600182019050919050565b7f4d756c7469706c65206d7573742062652067726561746572207468616e203000600082015250565b60006148ff601f83612f96565b915061490a826148c9565b602082019050919050565b6000602082019050818103600083015261492e816148f2565b9050919050565b7f4445504f5349545f4d554c5449504c4500000000000000000000000000000000600082015250565b600061496b601083612f96565b915061497682614935565b602082019050919050565b6000606082019050818103600083015261499a8161495e565b90506149a96020830185613584565b6149b66040830184613584565b9392505050565b7f434f4d4d495353494f4e5f5045525f46495253545f4c4556454c5f555044415460008201527f4544000000000000000000000000000000000000000000000000000000000000602082015250565b6000614a19602283612f96565b9150614a24826149bd565b604082019050919050565b60006060820190508181036000830152614a4881614a0c565b9050614a5760208301856143aa565b614a646040830184613584565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614ac7602683612f96565b9150614ad282614a6b565b604082019050919050565b60006020820190508181036000830152614af681614aba565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614b33602083612f96565b9150614b3e82614afd565b602082019050919050565b60006020820190508181036000830152614b6281614b26565b9050919050565b6000604082019050614b7e60008301856136f1565b614b8b60208301846136f1565b9392505050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000614bc8601683612f96565b9150614bd382614b92565b602082019050919050565b60006020820190508181036000830152614bf781614bbb565b9050919050565b7f4e6f206375656e74617320636f6e205553445420656e2074752077616c6c6574600082015250565b6000614c34602083612f96565b9150614c3f82614bfe565b602082019050919050565b60006020820190508181036000830152614c6381614c27565b9050919050565b7f4465706f7369746f206e6f2070756564652073657220766163696f0000000000600082015250565b6000614ca0601b83612f96565b9150614cab82614c6a565b602082019050919050565b60006020820190508181036000830152614ccf81614c93565b9050919050565b6000614ce18261329d565b9150614cec8361329d565b9250828202614cfa8161329d565b91508282048414831517614d1157614d10613c04565b5b5092915050565b6000614d238261329d565b9150614d2e8361329d565b925082614d3e57614d3d613b38565b5b828204905092915050565b7f4c612063616e74696461642061207472616e736665726972206465626520736560008201527f72206d61796f722061206365726f000000000000000000000000000000000000602082015250565b6000614da5602e83612f96565b9150614db082614d49565b604082019050919050565b60006020820190508181036000830152614dd481614d98565b9050919050565b7f46726f6d20627573696e65737320636f6e747261637400000000000000000000600082015250565b6000614e11601683612f96565b9150614e1c82614ddb565b602082019050919050565b60006040820190508181036000830152614e4081614e04565b9050614e4f6020830184613584565b92915050565b7f436f6e747261746f206e6f206375656e746120636f6e20737566696369656e7460008201527f657320666f6e646f730000000000000000000000000000000000000000000000602082015250565b6000614eb1602983612f96565b9150614ebc82614e55565b604082019050919050565b60006020820190508181036000830152614ee081614ea4565b9050919050565b7f4d6f6e746f20696e737566696369656e74650000000000000000000000000000600082015250565b6000614f1d601283612f96565b9150614f2882614ee7565b602082019050919050565b60006020820190508181036000830152614f4c81614f10565b9050919050565b6000606082019050614f6860008301866136f1565b614f7560208301856136f1565b614f826040830184613584565b949350505050565b6000604082019050614f9f60008301856136f1565b614fac6020830184613584565b9392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000614fe96017836139e3565b9150614ff482614fb3565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006150356011836139e3565b915061504082614fff565b601182019050919050565b600061505682614fdc565b91506150628285613a18565b915061506d82615028565b91506150798284613a18565b91508190509392505050565b6000615090826139d8565b61509a8185612f96565b93506150aa8185602086016139ee565b6150b38161330a565b840191505092915050565b600060208201905081810360008301526150d88184615085565b905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000615116601f83612f96565b9150615121826150e0565b602082019050919050565b6000602082019050818103600083015261514581615109565b9050919050565b60008151905061515b81613672565b92915050565b600060208284031215615177576151766130c0565b5b60006151858482850161514c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006151ea602a83612f96565b91506151f58261518e565b604082019050919050565b60006020820190508181036000830152615219816151dd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061525a8261329d565b91506000820361526d5761526c613c04565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006152ae602083612f96565b91506152b982615278565b602082019050919050565b600060208201905081810360008301526152dd816152a1565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000615340602683612f96565b915061534b826152e4565b604082019050919050565b6000602082019050818103600083015261536f81615333565b9050919050565b600081519050919050565b600081905092915050565b600061539782615376565b6153a18185615381565b93506153b18185602086016139ee565b80840191505092915050565b60006153c9828461538c565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061540a601d83612f96565b9150615415826153d4565b602082019050919050565b60006020820190508181036000830152615439816153fd565b905091905056fea264697066735822122083cd038c3d0b5096a4ea1f936fe6cf13239f1080ec17daedf06144e5a96c889464736f6c63430008140033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 512,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2675,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBER_KEY",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 2678,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "token",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)644"
      },
      {
        "astId": 2680,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_businessWallet",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 2682,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_totalMembers",
        "offset": 0,
        "slot": "6",
        "type": "t_uint128"
      },
      {
        "astId": 2684,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_totalBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2686,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MIN_AMOUNT_TO_DEPOSIT",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2688,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MAX_CONTRACT_BALANCE",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2690,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_DEPOSIT_MULTIPLE",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2692,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBERSHIP_PAYMENT_TO_BUSINESS",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2694,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_MEMBERSHIP_PAYMENT_TO_UPLINE",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2696,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_ONE",
        "offset": 0,
        "slot": "13",
        "type": "t_uint8"
      },
      {
        "astId": 2698,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_TWO",
        "offset": 1,
        "slot": "13",
        "type": "t_uint8"
      },
      {
        "astId": 2700,
        "contract": "contracts/FFFBusiness.sol:FFFBusiness",
        "label": "_COMMISSION_PER_TIER_THREE",
        "offset": 2,
        "slot": "13",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)644": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FFFBusiness.sol:FFFBusiness",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}